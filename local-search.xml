<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深度学习 GPU与模型调度 笔记</title>
    <link href="/2023/06/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20GPU%E4%B8%8E%E6%A8%A1%E5%9E%8B%E8%B0%83%E5%BA%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/15/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20GPU%E4%B8%8E%E6%A8%A1%E5%9E%8B%E8%B0%83%E5%BA%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="多gpu计算">多GPU计算</h2><figure><img src="/img/multiGPU.svg" alt="多GPU计算" /><figcaption aria-hidden="true">多GPU计算</figcaption></figure><h3 id="方式">方式</h3><figure><img src="/img/splittingGPU.svg" alt="splitting" /><figcaption aria-hidden="true">splitting</figcaption></figure><h4 id="网络分区">网络分区</h4><ul><li>在多个GPU之间拆分网络。每个GPU将流入特定层的数据作为输入，跨多个后续层对数据进行处理，然后将数据发送到下一个GPU。</li><li>GPU的接口之间需要的密集同步可能是很难办的，还有层之间的接口需要大量的数据传输的时候数据量可能会超出GPU总线的带宽。</li></ul><h4 id="按层分区">按层分区</h4><ul><li>拆分层内的工作。</li><li>我们需要大量的同步或<em>屏障操作</em>（barrieroperation），因为每一层都依赖于所有其他层的结果。</li></ul><h4 id="数据并行">数据并行</h4><figure><img src="/img/data-parallel.svg" alt="data-parallel" /><figcaption aria-hidden="true">data-parallel</figcaption></figure><ul><li>每块GPU上的参数值都是相同且同步的</li><li>每个GPU独立地维护一组完整的模型参数</li><li>计算过程<ol type="1"><li>在任何一次训练迭代中，给定的随机的小批量样本都将被分成<code>k</code>个部分，并均匀地分配到GPU上；</li><li>每个GPU根据分配给它的小批量子集，计算模型参数的损失和梯度；</li><li>将<code>k</code>个GPU中的局部梯度聚合，以获得当前小批量的随机梯度；</li><li>聚合梯度被重新分发到每个GPU中；</li><li>每个GPU使用这个小批量随机梯度，来更新它所维护的完整的模型参数集。</li></ol></li></ul><h3 id="数据并行例子">数据并行例子</h3><h4 id="手动实现">手动实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">%matplotlib inline<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><h5 id="定义模型"><strong>定义模型</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 初始化模型参数</span><br>scale = <span class="hljs-number">0.01</span><br>W1 = torch.randn(size=(<span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>)) * scale<br>b1 = torch.zeros(<span class="hljs-number">20</span>)<br>W2 = torch.randn(size=(<span class="hljs-number">50</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>)) * scale<br>b2 = torch.zeros(<span class="hljs-number">50</span>)<br>W3 = torch.randn(size=(<span class="hljs-number">800</span>, <span class="hljs-number">128</span>)) * scale<br>b3 = torch.zeros(<span class="hljs-number">128</span>)<br>W4 = torch.randn(size=(<span class="hljs-number">128</span>, <span class="hljs-number">10</span>)) * scale<br>b4 = torch.zeros(<span class="hljs-number">10</span>)<br>params = [W1, b1, W2, b2, W3, b3, W4, b4]<br><br><span class="hljs-comment"># 定义模型</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lenet</span>(<span class="hljs-params">X, params</span>):<br>    h1_conv = F.conv2d(<span class="hljs-built_in">input</span>=X, weight=params[<span class="hljs-number">0</span>], bias=params[<span class="hljs-number">1</span>])<br>    h1_activation = F.relu(h1_conv)<br>    h1 = F.avg_pool2d(<span class="hljs-built_in">input</span>=h1_activation, kernel_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), stride=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>    h2_conv = F.conv2d(<span class="hljs-built_in">input</span>=h1, weight=params[<span class="hljs-number">2</span>], bias=params[<span class="hljs-number">3</span>])<br>    h2_activation = F.relu(h2_conv)<br>    h2 = F.avg_pool2d(<span class="hljs-built_in">input</span>=h2_activation, kernel_size=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), stride=(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>))<br>    h2 = h2.reshape(h2.shape[<span class="hljs-number">0</span>], -<span class="hljs-number">1</span>)<br>    h3_linear = torch.mm(h2, params[<span class="hljs-number">4</span>]) + params[<span class="hljs-number">5</span>]<br>    h3 = F.relu(h3_linear)<br>    y_hat = torch.mm(h3, params[<span class="hljs-number">6</span>]) + params[<span class="hljs-number">7</span>]<br>    <span class="hljs-keyword">return</span> y_hat<br><br><span class="hljs-comment"># 交叉熵损失函数</span><br>loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="数据同步"><strong>数据同步</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_params</span>(<span class="hljs-params">params,device</span>):<br>    <span class="hljs-comment"># 参数送到GPU</span><br>    new_params = [p.to(device) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> params]<br>    <span class="hljs-comment"># 对送到GPU中的参数附加梯度</span><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> new_params:<br>        p.requires_grad_()<br>    <span class="hljs-keyword">return</span> new_params<br><br><span class="hljs-comment"># 测试效果</span><br>new_params = get_params(params,d2l.try_gpy(<span class="hljs-number">0</span>))<br>b1 权重: tensor([<span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>],<br>       device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>, requires_grad=<span class="hljs-literal">True</span>)<br>b1 梯度: <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">allreduce</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-comment"># 把分发在各个GPU上的向量加起来</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(data)):<br>        data[<span class="hljs-number">0</span>][:] += data[i].to(data[<span class="hljs-number">0</span>].device)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(data)):<br>        data[i][:] +=data[<span class="hljs-number">0</span>].to(data[i].device)<br>        <br><span class="hljs-comment"># 测试结果</span><br>allreduce之前：<br> tensor([[<span class="hljs-number">1.</span>, <span class="hljs-number">1.</span>]], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br> tensor([[<span class="hljs-number">2.</span>, <span class="hljs-number">2.</span>]], device=<span class="hljs-string">&#x27;cuda:1&#x27;</span>)<br>allreduce之后：<br> <span class="hljs-comment"># 每块GPU都得到了所有GPU上的向量和</span><br> tensor([[<span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>]], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br> tensor([[<span class="hljs-number">3.</span>, <span class="hljs-number">3.</span>]], device=<span class="hljs-string">&#x27;cuda:1&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="数据分发"><strong>数据分发</strong></h5><p>在训练前，把数据均匀的分发到每块显卡。这里用了<code>torch.nn</code>封装好的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># nn.Parallel.scatter()函数说明</span><br><br><span class="hljs-comment"># 使用 4 x 5 的测试数据</span><br>data = torch.arrange(<span class="hljs-number">20</span>).reshape(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br>devices = [torch.device(<span class="hljs-string">&#x27;cuda:0&#x27;</span>),torch.device(<span class="hljs-string">&#x27;cuda:1&#x27;</span>)]<br>split = nn.Parallel.scatter(data,devices)<br><br><span class="hljs-comment"># 测试结果</span><br><span class="hljs-built_in">input</span> : tensor([[ <span class="hljs-number">0</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">4</span>],<br>        [ <span class="hljs-number">5</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">8</span>,  <span class="hljs-number">9</span>],<br>        [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>],<br>        [<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>]])<br>load into [device(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;cuda&#x27;</span>, index=<span class="hljs-number">0</span>), device(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;cuda&#x27;</span>, index=<span class="hljs-number">1</span>)]<br>output: (tensor([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>        [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]], device=<span class="hljs-string">&#x27;cuda:0&#x27;</span>),<br>         tensor([[<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>],<br>        [<span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>]], device=<span class="hljs-string">&#x27;cuda:1&#x27;</span>))<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 辅助函数 拆分X,y到多个GPU</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split</span>(<span class="hljs-params">X,y,devices</span>):<br>    <span class="hljs-keyword">assert</span> X.shape[<span class="hljs-number">0</span>] == y.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> (nn.parallel.scatter(X,devices),<br>           nn.parallel.scatter(y,devices))<br></code></pre></td></tr></table></figure><h5 id="训练">训练</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_batch</span>(<span class="hljs-params">X,y,device_params,devices,lr</span>):<br>    <span class="hljs-comment"># X_shards,y_shards 送到显卡上的X,y</span><br>    X_shards,y_shards = split_batch(X,y,devices)<br>    <span class="hljs-comment"># 在每块GPU计算各自的损失</span><br>    ls = [loss(lenet(X_shard,device_W),y_shard).<span class="hljs-built_in">sum</span>() <br>          <span class="hljs-keyword">for</span> X_shard,y_shard,device_W <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(X_shards,y_shards,device_params)]<br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> ls:<br>        l.backward()<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-comment"># 将所有GPU中的局部梯度聚合，以获得当前小批量的随机梯度</span><br>        <span class="hljs-comment"># 对应计算过程3</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(device_params[<span class="hljs-number">0</span>])):<br>            allreduce([<br>                device_params[c][i].grad <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(devices))<br>            ]) <br>        <span class="hljs-comment"># 在每块GPU上分别更新模型参数</span><br>        <span class="hljs-comment"># 对应计算过程4</span><br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> device_params:<br>            d2l.sgd(param,lr,X.shape[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">num_gpus,batch_size,lr</span>):<br>    train_iter,test_iter = d2l.load_data_fashion_mnist(batch_size)<br>    devices = [d2l.try_gpus(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_cpus)]<br>    <span class="hljs-comment"># 调用get_params()将模型参数送入GPU</span><br>    device_params = [get_params(params,d) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> devices]<br>    num_epochs = <span class="hljs-number">10</span><br>    animator = d2l.Animator(<span class="hljs-string">&#x27;epoch&#x27;</span>, <span class="hljs-string">&#x27;test acc&#x27;</span>, xlim=[<span class="hljs-number">1</span>, num_epochs])<br>    timer = d2l.Timer()<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>   train_batch(X,y,device_params,devices,lr)<br>        <span class="hljs-comment"># 等待当前设备上所有流中的所有核心完成。</span><br>        <span class="hljs-comment"># pytorch里是异步的，避免提前退出</span><br>        <span class="hljs-comment"># 正确测试时间</span><br>        torch.cuda.synchronize()<br>   time.stop()<br>    animator.add(epoch + <span class="hljs-number">1</span>, (d2l.evaluate_accuracy_gpu(<br>            <span class="hljs-keyword">lambda</span> x: lenet(x, device_params[<span class="hljs-number">0</span>]), test_iter, devices[<span class="hljs-number">0</span>]),))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试精度：<span class="hljs-subst">&#123;animator.Y[<span class="hljs-number">0</span>][-<span class="hljs-number">1</span>]:<span class="hljs-number">.2</span>f&#125;</span>，<span class="hljs-subst">&#123;timer.avg():<span class="hljs-number">.1</span>f&#125;</span>秒/轮，&#x27;</span><br>          <span class="hljs-string">f&#x27;在<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(devices)&#125;</span>&#x27;</span>)<br>    <br>    <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">train(num_gpus=<span class="hljs-number">1</span>, batch_size=<span class="hljs-number">256</span>, lr=<span class="hljs-number">0.2</span>)<br>train(num_gpus=<span class="hljs-number">2</span>, batch_size=<span class="hljs-number">256</span>, lr=<span class="hljs-number">0.2</span>)<br></code></pre></td></tr></table></figure><h4 id="简洁实现">简洁实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><h5 id="定义模型-1">定义模型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">resnet18</span>(<span class="hljs-params">num_classes, in_channels=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;稍加修改的ResNet-18模型&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">resnet_block</span>(<span class="hljs-params">in_channels, out_channels, num_residuals,</span><br><span class="hljs-params">                     first_block=<span class="hljs-literal">False</span></span>):<br>        blk = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_residuals):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> first_block:<br>                blk.append(d2l.Residual(in_channels, out_channels,<br>                                        use_1x1conv=<span class="hljs-literal">True</span>, strides=<span class="hljs-number">2</span>))<br>            <span class="hljs-keyword">else</span>:<br>                blk.append(d2l.Residual(out_channels, out_channels))<br>        <span class="hljs-keyword">return</span> nn.Sequential(*blk)<br><br>    <span class="hljs-comment"># 该模型使用了更小的卷积核、步长和填充，而且删除了最大汇聚层</span><br>    net = nn.Sequential(<br>        nn.Conv2d(in_channels, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>),<br>        nn.BatchNorm2d(<span class="hljs-number">64</span>),<br>        nn.ReLU())<br>    net.add_module(<span class="hljs-string">&quot;resnet_block1&quot;</span>, resnet_block(<br>        <span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">2</span>, first_block=<span class="hljs-literal">True</span>))<br>    net.add_module(<span class="hljs-string">&quot;resnet_block2&quot;</span>, resnet_block(<span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">2</span>))<br>    net.add_module(<span class="hljs-string">&quot;resnet_block3&quot;</span>, resnet_block(<span class="hljs-number">128</span>, <span class="hljs-number">256</span>, <span class="hljs-number">2</span>))<br>    net.add_module(<span class="hljs-string">&quot;resnet_block4&quot;</span>, resnet_block(<span class="hljs-number">256</span>, <span class="hljs-number">512</span>, <span class="hljs-number">2</span>))<br>    net.add_module(<span class="hljs-string">&quot;global_avg_pool&quot;</span>, nn.AdaptiveAvgPool2d((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)))<br>    net.add_module(<span class="hljs-string">&quot;fc&quot;</span>, nn.Sequential(nn.Flatten(),<br>                                       nn.Linear(<span class="hljs-number">512</span>, num_classes)))<br>    <span class="hljs-keyword">return</span> net<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">net = resnet(<span class="hljs-number">18</span>)<br>devices = d2l.try_all_gpus()<br></code></pre></td></tr></table></figure><h5 id="训练-1">训练</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">net,num_gpus,batch_size,lr</span>):<br>    train_iter,test_iter = d2l.load_data_fashion_mnist(batch_size)<br>    devices = [d2l.try_gpu(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_gpus)]<br>    <span class="hljs-comment"># 初始化层的权重</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) <span class="hljs-keyword">in</span> [nn.Linear,nn.Conv2d]:<br>            nn.init.normal_(m.weight,std=<span class="hljs-number">0.01</span>)<br>    net.apply(init_weights)<br>    <span class="hljs-comment"># SGD 优化</span><br>    trainer = torch.optim.SGD(net,device_ids=devices)<br>    loss = nn.CrossEntropyLoss()<br>    timer,num_epochs = d2l.Timer()<br>    animator = d2l.Animator(<span class="hljs-string">&#x27;epoch&#x27;</span>,<span class="hljs-string">&#x27;test acc&#x27;</span>,xlim=[<span class="hljs-number">1</span>,num_epochs])<br>    <span class="hljs-keyword">for</span> epochs <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        net.train()<br>        <span class="hljs-keyword">for</span> X,y <span class="hljs-keyword">in</span> train_iter:<br>            trainer.zero_grad()<br>            X,y = X.to(devices[<span class="hljs-number">0</span>]),y.to(devices[<span class="hljs-number">0</span>])<br>            l = loss(net(X),y)<br>            l.backward()<br>            trainer.step()<br>    timer.stop()<br>    animator.add(epoch + <span class="hljs-number">1</span>, (d2l.evaluate_accuracy_gpu(net, test_iter),))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;测试精度：<span class="hljs-subst">&#123;animator.Y[<span class="hljs-number">0</span>][-<span class="hljs-number">1</span>]:<span class="hljs-number">.2</span>f&#125;</span>，<span class="hljs-subst">&#123;timer.avg():<span class="hljs-number">.1</span>f&#125;</span>秒/轮，&#x27;</span><br>          <span class="hljs-string">f&#x27;在<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(devices)&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">train(net, num_gpus=<span class="hljs-number">1</span>, batch_size=<span class="hljs-number">256</span>, lr=<span class="hljs-number">0.1</span>)<br>train(net, num_gpus=<span class="hljs-number">1</span>, batch_size=<span class="hljs-number">256</span>, lr=<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习 卷积 笔记</title>
    <link href="/2023/06/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E5%8D%B7%E7%A7%AF%20%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E5%8D%B7%E7%A7%AF%20%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一些理解">一些理解</h2><p>用神经网络去学习构建卷积核</p><p>卷积层将输入和核矩阵进行交叉相关，加上偏移之后得到输出。</p><p>核矩阵和偏移是可学习的参数</p><p>核矩阵的大小是超参数(在训练前就已经定义好)</p><p><strong>比较好的思想：高、宽减半，通道数翻一倍</strong></p><h2 id="二维交叉与二维卷积">二维交叉与二维卷积</h2><p>没有本质的区别，</p><p><spanclass="math inline">\(y_{i,j}=\sum_{a=1}^{h}\sum_{b=1}^{w}w_{a,b}x_{i+a,j+b}\)</span></p><p><strong>索引前多了负号，因为<code>w</code>是学习的值，所以没有本质区别</strong></p><p><spanclass="math inline">\(y_{i,j}=\sum_{a=1}^{h}\sum_{b=1}^{w}w_{-a,-b}x_{i+a,j+b}\)</span></p><h3 id="不同的维度">不同的维度</h3><ul><li><p>一维</p><p><span class="math inline">\(y_i=\sum_{a=1}^hw_ax_{i+a}\)</span></p><p>处理文本、语言、时间序列</p></li><li><p>三维</p><p><spanclass="math inline">\(y_{i,j,k}=\sum_{a=1}^h\sum_{b=1}^w\sum_{c=1}^d\)</span></p></li></ul><h2 id="实现二维卷积层">实现二维卷积层</h2><h3 id="互相关运算">互相关运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">corr2d</span>(<span class="hljs-params">X,K</span>):<br>    h,w = K.shape<br>    Y = torch.zeros((X.shape[<span class="hljs-number">0</span>]-h+<span class="hljs-number">1</span>,X.shape[<span class="hljs-number">1</span>]-w+<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Y.shape[<span class="hljs-number">0</span>]):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (Y.shape[<span class="hljs-number">1</span>]):<br>            Y[i,j]=(X[i:i+h,j:j+w]*K).<span class="hljs-built_in">sum</span>()<br>    <span class="hljs-keyword">return</span> Y<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Conv2D</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,kernel_size</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.weight = nn.Parameter(torch.rand(kernel_size))<br>        self.bias == nn.Parameter(torch.zeros(<span class="hljs-number">1</span>))<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>        <span class="hljs-keyword">return</span> corr2d(x,self.weight) + self.bias<br></code></pre></td></tr></table></figure><h3 id="例子">例子</h3><figure><img src="/img/卷积EG1.png" alt="求卷积核说明图" /><figcaption aria-hidden="true">求卷积核说明图</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>conv2d = nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,kernel_size=(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),bias=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 第一个张量矩阵</span><br>X = torch.ones((<span class="hljs-number">6</span>, <span class="hljs-number">8</span>))<br>X[:, <span class="hljs-number">2</span>:<span class="hljs-number">6</span>] = <span class="hljs-number">0</span><br>X = X.reshape((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>))<br><span class="hljs-comment"># 第二个张量矩阵</span><br>Y = torch.zeros((<span class="hljs-number">6</span>,<span class="hljs-number">7</span>))<br>Y[:,<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>Y[:,-<span class="hljs-number">2</span>]= -<span class="hljs-number">1</span><br>Y = Y.reshape((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    Y_hat = conv2d(X)<br>    l = (Y_hat - Y) ** <span class="hljs-number">2</span><br>    conv2d.zero_grad()<br>    l.<span class="hljs-built_in">sum</span>().backward()<br>    <span class="hljs-comment"># 迭代卷积核</span><br>    conv2d.weight.data[:] -= <span class="hljs-number">3e-2</span> * conv2d.weight.grad<br>    <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;i+<span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;l.<span class="hljs-built_in">sum</span>():<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(conv2d.weight.data.reshape((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)))<br><span class="hljs-comment">#tensor([[ 1.0000, -1.0000]])</span><br><span class="hljs-comment">#表示 中间问号里的卷积核为[1,-1] 能够使得X卷积计算为Y</span><br></code></pre></td></tr></table></figure><h3 id="填充和步幅">填充和步幅</h3><h4 id="原因">原因</h4><p>每次使用卷积核都能减小输出的大小</p><ul><li><code>input</code> :<code>32x32</code><code>kernel_size</code>:<code>5x5</code><ul><li>根据<code>kernel_size</code> 每卷积一次，减少<code>4x4</code></li><li>第一次卷积 <code>32x32</code> :arrow_right:<code>28x28</code></li><li>...</li><li>第七次卷积结果 <code>4x4</code></li></ul></li><li>总结：每卷积一次，形状从<span class="math inline">\(n_h \timesn_w\)</span>减小到<spanclass="math inline">\((n_w-k_h+1)\times(n_w-k_w+1)\)</span><ul><li>其中<code>k_h</code>为卷积核的高，<code>k_w</code>为卷积核的宽</li></ul></li></ul><h4 id="填充">填充</h4><figure><img src="/img/卷积填充.png" alt="卷积填充" /><figcaption aria-hidden="true">卷积填充</figcaption></figure><p><strong>在输入数据的四周进行数据填充</strong>。</p><ul><li>在上下左右分别添加0<ul><li>输出形状为<span class="math inline">\((n_h-k_h+p_h+1)\times(n_w-k_w+p_w+1)\)</span></li><li>通常取 <span class="math inline">\(p_h=k_h-1\)</span>,<spanclass="math inline">\(p_w=k_w-1\)</span><ul><li><code>k</code>为奇数，在上下两侧填充<spanclass="math inline">\(p_h/2\)</span></li><li><code>k</code>为偶数，在上侧填充<spanclass="math inline">\([p_h/2]\)</span>，在下侧填充<spanclass="math inline">\([p_h/2]\)</span></li></ul></li></ul></li></ul><h4 id="步幅">步幅</h4><p><strong>控制卷积核移动的幅度，可以每次不止移动一格。</strong></p><p>可以使得在输入较大、卷积核较小的情况下，快速达到较小的输出，减少中间的卷积层数。</p><ul><li>给定高度<span class="math inline">\(s_h\)</span>和宽度<spanclass="math inline">\(s_w\)</span>的步幅，输出形状为：<spanclass="math inline">\([(n_h-k_h+p_h+s_h)/s_h]\times[(n_w-k_w+p_w+s_w)/s_w]\)</span><ul><li>如果 <span class="math inline">\(p_h=k_h-1\)</span>,<spanclass="math inline">\(p_w=k_w-1\)</span>，输出形状为：<spanclass="math inline">\([(n_h+s_h-1)/s_h]\times[(n_w+s_w-1)/s_w]\)</span></li><li>如果输入高度和宽度可以被步幅整除，输出形状为：<spanclass="math inline">\((n_h/s_h)\times(n_w/s_w)\)</span></li></ul></li></ul><h4 id="总结">总结</h4><ul><li>填充和步幅都是卷积层的超参数，声明网络的时候加上就行</li><li>填充在输入周围添加额外的行/列，来控制输出形状的减少量，常设为<code>p = k-1</code>核-1</li><li>步幅是每次滑动核窗口时的行/列的步长，可以成倍地减少输出形状</li></ul><h4 id="例子-1">例子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-comment"># 在所有侧边填充一个像素</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">comp_conv2d</span>(<span class="hljs-params">conv2d,X</span>):<br>    <span class="hljs-comment"># （批量大小、通道、高度、宽度）</span><br>    X = X.reshape((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)+X.shape)<br><br>    Y = conv2d(X)<br>    <span class="hljs-keyword">return</span> Y.reshape(Y.shape[<span class="hljs-number">2</span>:])<br><br><span class="hljs-comment"># 定义一个输入输出通道数为1，kernel大小为3，填充为1的卷积神经网络</span><br>conv2d = nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,kernel_size=<span class="hljs-number">3</span>,padding=<span class="hljs-number">1</span>)<br>X = torch.rand(size=(<span class="hljs-number">8</span>,<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(comp_conv2d(conv2d,X).shape)<br><span class="hljs-comment"># 8 x 8</span><br><br><span class="hljs-comment"># kernal 宽高不一样的时候，注意padding填充的设置</span><br><span class="hljs-comment"># 8-5+ 2x2(上下填充的)+1 = 8</span><br><span class="hljs-comment"># 8-3+ 1x2(左右填充的)+1 = 8</span><br><span class="hljs-comment"># (kernel_size - 1 )/ 2</span><br>conv2d = nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,kernel_size=(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>),padding=(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(comp_conv2d(conv2d,X).shape)<br><span class="hljs-comment"># 8 x 8</span><br><br><span class="hljs-comment"># 步幅为2的情况</span><br>conv2d = nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,kernel_size=<span class="hljs-number">3</span>,padding=<span class="hljs-number">1</span>,stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(comp_conv2d(conv2d,X).shape)<br><span class="hljs-comment"># 4 x 4</span><br><br>conv2d = nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,kernel_size=(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>),padding=(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),stride=(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(comp_conv2d(conv2d,X).shape)<br><span class="hljs-comment"># 2 x 2 </span><br><span class="hljs-comment"># [(8-3+0x2+3)/3] = 2</span><br><span class="hljs-comment"># [(8-5+1x2+4)/4] = 2</span><br></code></pre></td></tr></table></figure><h3 id="输入和输出通道">输入和输出通道</h3><figure><img src="/img/卷积输入通道.png" alt="多输入通道的计算方式" /><figcaption aria-hidden="true">多输入通道的计算方式</figcaption></figure><p><strong>每个通道有自己的卷积核</strong></p><p><span class="math inline">\(c_i\)</span>:输入通道<code>channel_input</code></p><p><spanclass="math inline">\(c_o\)</span>:输出通道<code>channel_output</code></p><p><strong>单输入通道</strong></p><p>每个通道和自己的卷积核进行计算</p><ul><li>输入 <code>X</code>:<span class="math inline">\(c_i\times n_h\timesn_w\)</span></li><li>核<code>W</code>:<span class="math inline">\(c_i\times k_h\timesk_w\)</span></li><li>输出<code>Y</code>:<span class="math inline">\(m_h\timesm_w\)</span></li></ul><p><strong>多输入通道</strong></p><p><strong>多个卷积核、每个核生成一个通道</strong></p><p><strong>每个通道可有用于识别不同的特定模式</strong></p><ul><li>输入 <code>X</code>:<span class="math inline">\(c_i\times n_h\timesn_w\)</span></li><li>核<code>W</code>:<span class="math inline">\(c_o\times c_i\timesk_h\times k_w\)</span></li><li>输出<code>Y</code>:<span class="math inline">\(c_o\times m_h\timesm_w\)</span></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#多输入通道</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">corr2d_multi_in</span>(<span class="hljs-params">X,K</span>):<br>    <span class="hljs-comment"># zip 将每一个输入和对应的卷积核绑定</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(d2l.corr2d(x,k) <span class="hljs-keyword">for</span> x,k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(X,K))<br><br><br>X = torch.tensor([[[<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>], [<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>], [<span class="hljs-number">6.0</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">8.0</span>]],<br>               [[<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>], [<span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>], [<span class="hljs-number">7.0</span>, <span class="hljs-number">8.0</span>, <span class="hljs-number">9.0</span>]]])<br>K = torch.tensor([[[<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>], [<span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>]], [[<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>], [<span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>]]])<br><br><span class="hljs-built_in">print</span>(corr2d_multi_in(X, K))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#多输出通道</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">corr2d_multi_in_out</span>(<span class="hljs-params">X,K</span>):<br>    <span class="hljs-keyword">return</span> torch.stack([corr2d_multi_in(X,k) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> K],<span class="hljs-number">0</span>)<br><br>K = torch.reshape((K,K+<span class="hljs-number">1</span>,K+<span class="hljs-number">2</span>),<span class="hljs-number">0</span>)<br><span class="hljs-built_in">print</span>(K.shape)<br></code></pre></td></tr></table></figure><h4 id="x1卷积层"><code>1x1</code>卷积层</h4><p>参考：<ahref="https://mp.weixin.qq.com/s?__biz=MzU0NjgzMDIxMQ==&amp;mid=2247602164&amp;idx=5&amp;sn=42c533969680bbf1ce39c058304cd2bd&amp;chksm=fb54ad18cc23240e77d18d91b3206ef1bde924f2f4a711516701c5ec5fe7511207b6a534b041&amp;scene=27">一文读懂卷积神经网络中的1x1卷积核(qq.com)</a></p><p>不识别空间模式(没有周边像元参与)，只是<strong>对多个通道同一位置的像元进行融合</strong></p><p><span class="math inline">\(k_h=k_w=1\)</span></p><figure><img src="/img/1x1卷积核计算过程.png" alt="1x1卷积核计算过程" /><figcaption aria-hidden="true">1x1卷积核计算过程</figcaption></figure><p>相当于输入形状为<span class="math inline">\(n_hn_w\timesc_i\)</span>，权重为<span class="math inline">\(c_o\timesc_i\)</span>的全连接层</p><ul><li><span class="math inline">\(z=W\cdot x^T+b\)</span><ul><li><span class="math inline">\(W: \space c_o \times c_i\)</span></li><li><span class="math inline">\(x:\space n_hn_w \times c_i\)</span></li></ul></li><li>对应位置按权重(<code>Kernel</code>)相加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">corr2d_multi_in_out_1x1</span>(<span class="hljs-params">X,K</span>):<br>    <span class="hljs-comment"># 数据的维度、长宽</span><br>    c_i,h,w = X.shape<br>    <span class="hljs-comment"># 核的个数，数据的输出维度</span><br>    c_o = K.shape[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># X 拉成 h*w x c_i的张量</span><br>    X = X.reshape((c_i,h*w))<br>    <span class="hljs-comment"># 卷积核，变成权重W</span><br>    K= K.reshape((c_o,c_i))<br>    <span class="hljs-comment"># 实现全连接层的操作</span><br>    Y = torch.matmul(K,X)<br>    <span class="hljs-comment"># 还原成矩阵</span><br>    <span class="hljs-keyword">return</span> Y.reshape((c_o,h,w))<br><br><span class="hljs-comment"># 输入</span><br>X = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><span class="hljs-comment"># 卷积层 输出2 输入3 大小 1x1</span><br>K = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br><br>Y1 = corr2d_multi_in_out_1x1(X, K)<br>Y2 = corr2d_multi_in_out(X, K)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">float</span>(torch.<span class="hljs-built_in">abs</span>(Y1 - Y2).<span class="hljs-built_in">sum</span>()) &lt; <span class="hljs-number">1e-6</span><br></code></pre></td></tr></table></figure><h4 id="总结-1">总结</h4><ul><li>输出通道数是卷积层的超参数</li><li>每个输入通道有独立的二维卷积核，所有通道结果相加得到一个输出通道结果</li><li>每个输出通道有独立的三维卷积核</li><li><code>[3,2,2,2]</code>输出通道为3，输入通道为2，卷积核高2，卷积核宽2<ul><li>有三个卷积核，每个卷积核有两层(是二维)，卷积核大小为2x2</li></ul></li></ul><h3 id="池化">池化</h3><h4 id="二维最大池化">二维最大池化</h4><figure><img src="/img/Pooling池化.png" alt="Pooling池化" /><figcaption aria-hidden="true">Pooling池化</figcaption></figure><p>返回滑动窗口中的最大值</p><ul><li>有填充和步幅</li><li>没有可学习的参数，只有取最大的操作子</li><li>每个输入通道应用池化层获得相应的输出通道</li><li>输入通道数=输出通道数</li></ul><h4 id="二维平均池化">二维平均池化</h4><ul><li>和最大池化一样，操作子变为取平均</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 手写版本</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pool2d</span>(<span class="hljs-params">X,pool_size,mode=<span class="hljs-string">&#x27;max&#x27;</span></span>):<br>    p_h,p_w = pool_size<br>    Y = torch.zeros((X.shape[<span class="hljs-number">0</span>]-p_h+<span class="hljs-number">1</span>,X.shape[<span class="hljs-number">1</span>]-p_w+<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Y.shape[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Y.shape[<span class="hljs-number">1</span>]):<br>            <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;max&#x27;</span>:<br>                Y[i,j] = X[i:i+p_h,j:j+p_w].<span class="hljs-built_in">max</span>()<br>            <span class="hljs-keyword">elif</span> mode ==<span class="hljs-string">&#x27;avg&#x27;</span>:<br>                Y[i,j] = X[i:i+p_h,j:j+p_w].mean()<br>             <br>     <span class="hljs-keyword">return</span> Y<br><br><span class="hljs-comment"># 创建最大池化层，窗口大小为3x3</span><br><span class="hljs-comment"># 框架默认步幅与池化窗口大小相同，所以步幅也为3</span><br>pool2d = nn.MaxPool2d(<span class="hljs-number">3</span>)<br><span class="hljs-comment"># 也可以手动指定padding和stride</span><br>pool2d = nn.MaxPool2d(<span class="hljs-number">3</span>,padding=<span class="hljs-number">1</span>,stride=<span class="hljs-number">2</span>)<br><span class="hljs-comment"># 窗口大小也可以自己指定</span><br>pool2d = nn.MaxPool2d((<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),padding=(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),stride=(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#池化层多个通道中，每个通道单独计算</span><br><span class="hljs-comment"># 2 x 4 x 4</span><br>X = torch.cat((X,X+<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)<br><br>pool2d = nn.MaxPool2d(<span class="hljs-number">3</span>,padding=<span class="hljs-number">1</span>,stride=<span class="hljs-number">2</span>)<br><span class="hljs-comment"># 2 x 2 x 2</span><br>pool2d(X)<br><br></code></pre></td></tr></table></figure><h4 id="总结-2">总结</h4><ul><li>池化层返回窗口中的最大或者平均值，取决于操作子</li><li>池化层能缓解卷积层对位置的敏感性</li><li>同样有窗口大小、填充和步幅作为超参数</li></ul><h3 id="卷积层全连接层参数个数计算">卷积层、全连接层参数个数计算</h3><p>参考：<ahref="https://zhuanlan.zhihu.com/p/77471991">CNN卷积层、全连接层的参数量、计算量</a></p><ul><li>卷积层参数量：卷积核元素的大小<ul><li>计算公式：<strong>参数量=（filter size * 前一层特征图的通道数 ）*当前层filter数量</strong></li></ul></li><li>全连接层参数量：<ul><li>计算公式：见参考</li></ul></li></ul><h2 id="批量归一化">批量归一化</h2><h3 id="问题">问题</h3><p>底部：靠近数据</p><p>顶部：靠近损失</p><p>训练过程中，方差和均值的分布在不同层之间发生变化</p><p>在持续的训练过程中，上面的收敛比较快，下面变化比较慢。</p><p>但是每次底部变化，底层的信息变了，顶部需要进行重新训练。</p><p>这个问题会导致收敛比较慢。</p><h3 id="原因-1">原因</h3><ul><li>损失在网络计算的最后(上部)，网络后面的层的训练比较快</li><li>数据在网络的最底部<ul><li>底层训练很慢</li><li>底层变化，整个网络的数据都发生变化</li><li>最后的那些层需要学习很多次</li><li>导致收敛变慢</li></ul></li></ul><h3 id="解决方法">解决方法</h3><p>把不同层之间的均值和方差的分布固定住。</p><p>固定小批量里的均值和方差</p><p><span class="math inline">\(\begin{split}\begin{aligned}\hat{\boldsymbol{\mu}}_\mathcal{B} &amp;= \frac{1}{|\mathcal{B}|}\sum_{\mathbf{x} \in \mathcal{B}} \mathbf{x},\\\hat{\boldsymbol{\sigma}}_\mathcal{B}^2 &amp;= \frac{1}{|\mathcal{B}|}\sum_{\mathbf{x} \in \mathcal{B}} (\mathbf{x} -\hat{\boldsymbol{\mu}}_{\mathcal{B}})^2 +\epsilon.\end{aligned}\end{split}\)</span></p><p><span class="math inline">\(\mathrm{BN}(\mathbf{x}) =\boldsymbol{\gamma} \odot \frac{\mathbf{x} -\hat{\boldsymbol{\mu}}_\mathcal{B}}{\hat{\boldsymbol{\sigma}}_\mathcal{B}}+ \boldsymbol{\beta}.\)</span></p><p><span class="math inline">\(\gamma \quad \beta\)</span>可学习的参数，当变为标准正态分布可能不太合适的话，可以用数据重新学习一个合适的方差和均值对数据进行优化。</p><h3 id="批量归一化层">批量归一化层</h3><ul><li>可学习的参数为<spanclass="math inline">\(\gamma\quad\beta\)</span></li><li>作用在<ul><li>全连接层和卷积层输入上</li><li>全连接层和卷积层输出上，激活函数之前<ul><li>对输出数据减去均值除以方差，加上可以学习的<spanclass="math inline">\(\gamma\quad\beta\)</span>，在加上激活函数</li></ul></li></ul></li><li>对于全连接层，作用在特征维<ul><li>全连接层输入是二维的</li><li>行是样本，列是特征。</li><li>作用在特征维度是对特征求均值和方差（列）</li></ul></li><li>对于卷积层，作用在通道维<ul><li>二维拓展到三维</li><li><code>Batch size x Channels x Height x Width</code><ul><li>样本数量： <code>Batch size x Height x Width</code>个像素</li><li>每个像素：<code>Channels</code> 个通道(特征)</li></ul></li><li>对每个像素的通道计算均值和方差</li></ul></li></ul><h3 id="代码">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-comment"># moving_mean,moving_var 整个数据集的均值和方差</span><br><span class="hljs-comment"># eps 极小值 避免数据集中含有0</span><br><span class="hljs-comment"># momentum 更新moving_mean，moving_var</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">batch_norm</span>(<span class="hljs-params">X,gamma,beta,moving_mean,moving_var,eps,momentum</span>):<br>    <span class="hljs-comment"># 不算梯度，在做Inferance 推理</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> torch.is_grad_enabled():<br>        <span class="hljs-comment"># 为什么用全局的均值和方差</span><br>        <span class="hljs-comment"># 做推理的时候很多时候输入只是一个样本，一般算不出自己的均值和方差</span><br>        X_hat = (X-moving_mean)/torch.sqrt(moving_var+eps)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 限定输入类型为全连接层和卷积层</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(X.shape) <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>,<span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(X.shape)==<span class="hljs-number">2</span>:<br>            <span class="hljs-comment"># 批量大小、特征维度</span><br>            <span class="hljs-comment"># 对每一列的所有（行数个）样本求平均</span><br>            <span class="hljs-comment"># dim=0 压缩行维度</span><br>            <span class="hljs-comment"># 最后得到一个行向量</span><br>            mean = X.mean(dim=<span class="hljs-number">0</span>)<br>            var = ((X-mean)**<span class="hljs-number">2</span>).mean(dim=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 批量大小 通道数 高 宽 0 1 2 3</span><br>            <span class="hljs-comment"># dim=(0,2,3) 把批量大小、高、宽的全部通道数求均值</span><br>            <span class="hljs-comment"># keepdim = True 最终结果 1 x n x 1 x 1</span><br>            mean = X.mean(dim=(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),keepdim=<span class="hljs-literal">True</span>)<br>            var = ((X-mean)**<span class="hljs-number">2</span>).mean(dim=(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),keepdim=<span class="hljs-literal">True</span>)<br>        X_hat = (X-mean) / torch.sqrt(var+eps)<br>        moving_mean = momentum * moving_mean +(<span class="hljs-number">1.0</span>-momentum)*mean<br>        moving_var = momentum * moving_var + (<span class="hljs-number">1.0</span>-momentum)*var<br>    Y = gamma * X_hat +beta<br>    <br>    <span class="hljs-keyword">return</span> Y,moving_mean.data,moving_var.data<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchNorm</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,num_features,num_dims</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-keyword">if</span> num_dims==<span class="hljs-number">2</span>:<br>            shape = (<span class="hljs-number">1</span>,num_features)<br>        <span class="hljs-keyword">else</span>:<br>            shape=(<span class="hljs-number">1</span>,num_features,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># nn.Parameter() 将张量注册为模块的参数</span><br>        self.gamma = nn.Parameter(torch.ones(shape))<br>        self.beta  = nn.Parameter(torch.zeros(shape))<br>        self.moving_mean = torch.zeros(shape)<br>        self.moving_var = torch.ones(shape)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>        <span class="hljs-keyword">if</span> self.moving_mean.device != X.device:<br>            self.moving_mean = self.moving_mean.to(X.device)<br>            self.moving_var = self.moving_var.to(X.device)<br>        <br>        Y,self.moving_mean,self.moving_var = batch_norm(X,self.gamma,self.beta,self.moving_mean,self.moving_var,eps=<span class="hljs-number">1e-5</span>,momentum=<span class="hljs-number">0.9</span>)<br>        <br>        <span class="hljs-keyword">return</span> Y<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">net = nn.Sequential(<br>    <span class="hljs-comment"># 输入通道1 输出通道6 卷积核大小 5 </span><br>    nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,kernel_size=<span class="hljs-number">5</span>),BatchNorm(<span class="hljs-number">6</span>,num_dims=<span class="hljs-number">4</span>),nn.Sigmoid(),nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>,stride=<span class="hljs-number">2</span>),<br>    nn.Conv2d(<span class="hljs-number">6</span>,<span class="hljs-number">16</span>,kernel_size=<span class="hljs-number">5</span>),BatchNorm(<span class="hljs-number">16</span>,num_dims=<span class="hljs-number">4</span>),nn.Sigmoid(),nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>,stride=<span class="hljs-number">2</span>),<br>    nn.Flatten(),nn.Linear(<span class="hljs-number">16</span>*<span class="hljs-number">4</span>*<span class="hljs-number">4</span>,<span class="hljs-number">120</span>),<br>    BatchNorm(<span class="hljs-number">120</span>,num_dims=<span class="hljs-number">2</span>),nn.Sigmoid(),<br>    nn.Linear(<span class="hljs-number">120</span>,<span class="hljs-number">84</span>),BatchNorm(<span class="hljs-number">84</span>,num_dims=<span class="hljs-number">2</span>),<br>    nn.Sigmoid(),nn.Linear(<span class="hljs-number">84</span>,<span class="hljs-number">10</span>)<br>)<br><br><span class="hljs-comment">#简明版本 调用nn.BatchNorm2d()</span><br>net = nn.Sequential(<br>    nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">5</span>), nn.BatchNorm2d(<span class="hljs-number">6</span>), nn.Sigmoid(),<br>    nn.AvgPool2d(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>),<br>    nn.Conv2d(<span class="hljs-number">6</span>, <span class="hljs-number">16</span>, kernel_size=<span class="hljs-number">5</span>), nn.BatchNorm2d(<span class="hljs-number">16</span>), nn.Sigmoid(),<br>    nn.AvgPool2d(kernel_size=<span class="hljs-number">2</span>, stride=<span class="hljs-number">2</span>), nn.Flatten(),<br>    nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">120</span>), nn.BatchNorm1d(<span class="hljs-number">120</span>), nn.Sigmoid(),<br>    nn.Linear(<span class="hljs-number">120</span>, <span class="hljs-number">84</span>), nn.BatchNorm1d(<span class="hljs-number">84</span>), nn.Sigmoid(),<br>    nn.Linear(<span class="hljs-number">84</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lr, num_epochs, batch_size = <span class="hljs-number">1.0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)<br>d2l.train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())<br></code></pre></td></tr></table></figure><h3 id="总结-3">总结</h3><ul><li>批量归一化固定小批量中的均值和方差，然后学习出合适的偏移和缩放</li><li>可以加速收敛速度，但是一般不改变模型精度</li><li>可以允许用更大的学习率进行训练</li></ul><h2 id="lenet-经典卷积神经网络">LeNet 经典卷积神经网络</h2><figure><img src="/img/LeNet卷积网络.png" alt="LeNet卷积网络" /><figcaption aria-hidden="true">LeNet卷积网络</figcaption></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reshape</span>(torch.nn.Moudle):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>        <span class="hljs-comment"># view()相当于reshape、resize，对Tensor的形状进行调整。</span><br>        <span class="hljs-keyword">return</span> x.view(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>)<br>    <br>net = nn.Sequential(<br>    Reshape(),<br>    <span class="hljs-comment"># 输入为1 输出为6 卷积核 5x5 padding=2 28x28 --&gt; 32x32</span><br>    <span class="hljs-comment"># nn.Sigmoid()函数的作用？还不是很清楚</span><br>    nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,kernel_size=<span class="hljs-number">5</span>,padding=<span class="hljs-number">2</span>),nn.Sigmoid(),<br>    nn.AvgPool2d(kernel_size=<span class="hljs-number">2</span>,stride=<span class="hljs-number">2</span>),<br>    nn.Conv2d(<span class="hljs-number">6</span>,<span class="hljs-number">16</span>,kernel_size=<span class="hljs-number">5</span>),nn.Sigmoid(),<br>    nn.AvgPool2d(kernel_size=<span class="hljs-number">2</span>,stride=<span class="hljs-number">2</span>),<br>    <span class="hljs-comment"># 卷积层输出的是4D数据 1 x 16 x 5 x 5 1:批量</span><br>    <span class="hljs-comment"># 拉平为一维数据输入多层感知机</span><br>    nn.Flatten(),<br>    nn.Linear(<span class="hljs-number">16</span>*<span class="hljs-number">5</span>*<span class="hljs-number">5</span>,<span class="hljs-number">120</span>),nn.Sigmoid(),<br>    nn.Linear(<span class="hljs-number">120</span>,<span class="hljs-number">84</span>),nn.Sigmoid(),<br>    nn.Linear(<span class="hljs-number">84</span>,<span class="hljs-number">10</span>)<br>)<br><br><span class="hljs-comment"># Reshape 批量：1 输出通道：1 高、宽 28</span><br>Reshape output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>])<br><span class="hljs-comment"># Padding之后：高、宽 32 批量：1 输出通道：6 核大小5 32-5+1 = 28 输出的高、宽还是28</span><br>Conv2d output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>])<br><span class="hljs-comment"># 激活函数 对shape不做操作</span><br>Sigmoid output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>])<br><span class="hljs-comment"># 平均池化层 核大小2 步长2</span><br>AvgPool2d output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>])<br><span class="hljs-comment"># 批量：1 输出通道：16 输出高、宽：10 (16个核 每个核对6个通道加权求和再输出)</span><br>Conv2d output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>])<br><span class="hljs-comment"># 激活函数 对shape不做操作</span><br>Sigmoid output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>])<br><span class="hljs-comment"># 批量：1 输出通道：16 输出高、宽：5</span><br>AvgPool2d output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">16</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>])<br><span class="hljs-comment"># 批量：1 拉平操作 将 1 x 16 x 5 x 5 的 4D 数据降低为一个维度</span><br>Flatten output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">400</span>])<br><span class="hljs-comment"># MLP 隐藏层 400-&gt;120</span><br>Linear output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">120</span>])<br><span class="hljs-comment"># 激活函数 对shape不做操作</span><br>Sigmoid output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">120</span>])<br><span class="hljs-comment"># MLP 隐藏层 120-&gt;84</span><br>Linear output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">84</span>])<br><span class="hljs-comment"># 激活函数 对shape不做操作</span><br>Sigmoid output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">84</span>])<br><span class="hljs-comment"># MLP  84-&gt;10</span><br>Linear output shape:  torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br><br><br>batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size=batch_size)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy_gpu</span>(<span class="hljs-params">net, data_iter, device=<span class="hljs-literal">None</span></span>): <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;使用GPU计算模型在数据集上的精度&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, nn.Module):<br>        net.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 设置为评估模式</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> device:<br>            <span class="hljs-comment"># 设置训练的device</span><br>            device = <span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(net.parameters())).device<br>    <span class="hljs-comment"># 正确预测的数量，总预测的数量</span><br>    metric = d2l.Accumulator(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(X, <span class="hljs-built_in">list</span>):<br>                <span class="hljs-comment"># BERT微调所需的（之后将介绍）</span><br>                X = [x.to(device) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> X]<br>            <span class="hljs-keyword">else</span>:<br>                X = X.to(device)<br>            y = y.to(device)<br>            metric.add(d2l.accuracy(net(X), y), y.numel())<br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">#@save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch6</span>(<span class="hljs-params">net, train_iter, test_iter, num_epochs, lr, device</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;用GPU训练模型(在第六章定义)&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear <span class="hljs-keyword">or</span> <span class="hljs-built_in">type</span>(m) == nn.Conv2d:<br>            <span class="hljs-comment"># 全连接层和卷积层用xavier_uniform初始化</span><br>            <span class="hljs-comment"># 根据输入输出大小，使得用随机数的时候，输入和输出的方差是差不多的</span><br>            nn.init.xavier_uniform_(m.weight)<br>    net.apply(init_weights)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;training on&#x27;</span>, device)<br>    net.to(device)<br>    <span class="hljs-comment"># SGD优化</span><br>    optimizer = torch.optim.SGD(net.parameters(), lr=lr)<br>    <span class="hljs-comment"># 分类用</span><br>    loss = nn.CrossEntropyLoss()<br>    animator = d2l.Animator(xlabel=<span class="hljs-string">&#x27;epoch&#x27;</span>, xlim=[<span class="hljs-number">1</span>, num_epochs],<br>                            legend=[<span class="hljs-string">&#x27;train loss&#x27;</span>, <span class="hljs-string">&#x27;train acc&#x27;</span>, <span class="hljs-string">&#x27;test acc&#x27;</span>])<br>    timer, num_batches = d2l.Timer(), <span class="hljs-built_in">len</span>(train_iter)<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        <span class="hljs-comment"># 训练损失之和，训练准确率之和，样本数</span><br>        metric = d2l.Accumulator(<span class="hljs-number">3</span>)<br>        net.train()<br>        <span class="hljs-keyword">for</span> i, (X, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_iter):<br>            timer.start()<br>            optimizer.zero_grad()<br>            X, y = X.to(device), y.to(device)<br>            y_hat = net(X)<br>            l = loss(y_hat, y)<br>            l.backward()<br>            optimizer.step()<br>            <span class="hljs-keyword">with</span> torch.no_grad():<br>                metric.add(l * X.shape[<span class="hljs-number">0</span>], d2l.accuracy(y_hat, y), X.shape[<span class="hljs-number">0</span>])<br>            timer.stop()<br>            train_l = metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>]<br>            train_acc = metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br>            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span>) % (num_batches // <span class="hljs-number">5</span>) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> i == num_batches - <span class="hljs-number">1</span>:<br>                animator.add(epoch + (i + <span class="hljs-number">1</span>) / num_batches,<br>                             (train_l, train_acc, <span class="hljs-literal">None</span>))<br>        test_acc = evaluate_accuracy_gpu(net, test_iter)<br>        animator.add(epoch + <span class="hljs-number">1</span>, (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, test_acc))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;loss <span class="hljs-subst">&#123;train_l:<span class="hljs-number">.3</span>f&#125;</span>, train acc <span class="hljs-subst">&#123;train_acc:<span class="hljs-number">.3</span>f&#125;</span>, &#x27;</span><br>          <span class="hljs-string">f&#x27;test acc <span class="hljs-subst">&#123;test_acc:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;metric[<span class="hljs-number">2</span>] * num_epochs / timer.<span class="hljs-built_in">sum</span>():<span class="hljs-number">.1</span>f&#125;</span> examples/sec &#x27;</span><br>          <span class="hljs-string">f&#x27;on <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(device)&#125;</span>&#x27;</span>)<br><br>lr, num_epochs = <span class="hljs-number">0.9</span>, <span class="hljs-number">10</span><br>train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())<br></code></pre></td></tr></table></figure><h2 id="alexnet-卷积神经网络">AlexNet 卷积神经网络</h2><h3 id="特点">特点</h3><p><strong>更大更深的<code>LeNet</code></strong></p><figure><img src="/img/alexnet.svg" alt="AlexNet与LeNet对比" /><figcaption aria-hidden="true">AlexNet与LeNet对比</figcaption></figure><h3 id="主要改进"><strong>主要改进</strong></h3><ul><li>丢弃法</li><li><code>ReLU</code></li><li><code>MaxPooling</code></li></ul><h3 id="代码-1">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br>net = nn.Sequential(<br>    <span class="hljs-comment"># 这里使用一个11*11的更大窗口来捕捉对象。</span><br>    <span class="hljs-comment"># 同时，步幅为4，以减少输出的高度和宽度。</span><br>    <span class="hljs-comment"># 另外，输出通道的数目远大于LeNet</span><br>    nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">96</span>, kernel_size=<span class="hljs-number">11</span>, stride=<span class="hljs-number">4</span>, padding=<span class="hljs-number">1</span>), nn.ReLU(),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    <span class="hljs-comment"># 减小卷积窗口，使用填充为2来使得输入与输出的高和宽一致，且增大输出通道数</span><br>    nn.Conv2d(<span class="hljs-number">96</span>, <span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>), nn.ReLU(),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    <span class="hljs-comment"># 使用三个连续的卷积层和较小的卷积窗口。</span><br>    <span class="hljs-comment"># 除了最后的卷积层，输出通道的数量进一步增加。</span><br>    <span class="hljs-comment"># 在前两个卷积层之后，汇聚层不用于减少输入的高度和宽度</span><br>    nn.Conv2d(<span class="hljs-number">256</span>, <span class="hljs-number">384</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>), nn.ReLU(),<br>    nn.Conv2d(<span class="hljs-number">384</span>, <span class="hljs-number">384</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>), nn.ReLU(),<br>    nn.Conv2d(<span class="hljs-number">384</span>, <span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>), nn.ReLU(),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    nn.Flatten(),<br>    <span class="hljs-comment"># 这里，全连接层的输出数量是LeNet中的好几倍。使用dropout层来减轻过拟合</span><br>    nn.Linear(<span class="hljs-number">6400</span>, <span class="hljs-number">4096</span>), nn.ReLU(),<br>    nn.Dropout(p=<span class="hljs-number">0.5</span>),<br>    nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">4096</span>), nn.ReLU(),<br>    nn.Dropout(p=<span class="hljs-number">0.5</span>),<br>    <span class="hljs-comment"># 最后是输出层。由于这里使用Fashion-MNIST，所以用类别数为10，而非论文中的1000</span><br>    nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看数据再Net中如何变换</span><br>X = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>)<br><span class="hljs-keyword">for</span> layer <span class="hljs-keyword">in</span> net:<br>    X=layer(X)<br>    <span class="hljs-built_in">print</span>(layer.__class__.__name__,<span class="hljs-string">&#x27;output shape:\t&#x27;</span>,X.shape)<br><br><span class="hljs-comment">#nn.Conv2d(1, 96, kernel_size=11, stride=4, padding=1)</span><br>Conv2d output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">96</span>, <span class="hljs-number">54</span>, <span class="hljs-number">54</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">96</span>, <span class="hljs-number">54</span>, <span class="hljs-number">54</span>])<br><span class="hljs-comment"># nn.MaxPool2d(kernel_size=3, stride=2)</span><br>MaxPool2d output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">96</span>, <span class="hljs-number">26</span>, <span class="hljs-number">26</span>])<br><span class="hljs-comment"># nn.Conv2d(96, 256, kernel_size=5, padding=2)</span><br>Conv2d output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">26</span>, <span class="hljs-number">26</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">26</span>, <span class="hljs-number">26</span>])<br><span class="hljs-comment"># nn.MaxPool2d(kernel_size=3, stride=2)</span><br>MaxPool2d output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>])\<br><span class="hljs-comment"># nn.Conv2d(256, 384, kernel_size=3, padding=1)</span><br>Conv2d output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">384</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">384</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>])<br><span class="hljs-comment"># nn.Conv2d(384, 384, kernel_size=3, padding=1)</span><br>Conv2d output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">384</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">384</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>])<br><span class="hljs-comment"># nn.Conv2d(384, 256, kernel_size=3, padding=1)</span><br>Conv2d output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>])<br><span class="hljs-comment"># nn.MaxPool2d(kernel_size=3, stride=2)</span><br>MaxPool2d output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>])<br>Flatten output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">6400</span>])<br><span class="hljs-comment"># nn.Linear(6400, 4096)</span><br>Linear output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>Dropout output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br><span class="hljs-comment"># nn.Linear(4096, 4096)</span><br>Linear output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br><span class="hljs-comment"># nn.Linear(4096, 10)</span><br>Dropout output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>Linear output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br></code></pre></td></tr></table></figure><h2 id="vgg-使用块的网络">VGG 使用块的网络</h2><h3 id="特点-1">特点</h3><p><strong>更深更窄</strong></p><ul><li>堆更多的<code>3 x 3</code>的卷积核</li></ul><p><strong>VGG块</strong></p><ul><li><code>n</code>层，<code>m</code>通道的卷积层</li><li>最后加个<code>2 x 2</code>的最大池化层</li></ul><p><strong>VGG架构</strong></p><ul><li><code>AlexNet</code>整个卷积层的架构替换为<code>n</code>个<code>VGG</code>块，<strong>VGG-16</strong>，<strong>VGG-19</strong></li><li>块可重复使用，不同的卷积块个数和超参数可以得到不同复杂程度的变种</li></ul><figure><img src="/img/nn_Sequential.png" alt="nn.Sequential()" /><figcaption aria-hidden="true">nn.Sequential()</figcaption></figure><h3 id="代码-2">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vgg_block</span>(<span class="hljs-params">num_convs,in_channels,out_channels</span>):<br>    layers = []<br>    <span class="hljs-comment"># 单纯用个for循环，不需要循环变量</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_convs):<br>        layers.append(nn.Conv2d(<br>        in_channels,out_channels,kernel_size=<span class="hljs-number">3</span>,padding=<span class="hljs-number">1</span>))<br>        layers.append(nn.ReLU())<br>        in_channels = out_channels<br>    layers.append(nn.MaxPool2d(kernel_size=<span class="hljs-number">2</span>,stride=<span class="hljs-number">2</span>))<br>        <span class="hljs-comment"># nn.Sequential() 接受orderDict或者Module数据</span><br>        <span class="hljs-comment"># layers为 List类型数据 前面加上*表示将List中内容解包</span><br>        <span class="hljs-comment"># 相当于把一个一个模型拿出来，放到Sequential中</span><br>    <span class="hljs-keyword">return</span> nn.Sequential(*layers)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">conv_arch = ((<span class="hljs-number">1</span>,<span class="hljs-number">64</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">128</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">256</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">512</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">512</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">vgg</span>(<span class="hljs-params">conv_arch</span>):<br>    conv_blks = []<br>    in_channels = <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 卷积层部分</span><br>    <span class="hljs-keyword">for</span> (num_convs, out_channels) <span class="hljs-keyword">in</span> conv_arch:<br>        conv_blks.append(vgg_block(num_convs, in_channels, out_channels))<br>        in_channels = out_channels<br><br>    <span class="hljs-keyword">return</span> nn.Sequential(<br>        *conv_blks, nn.Flatten(),<br>        <span class="hljs-comment"># 全连接层部分</span><br>        nn.Linear(out_channels * <span class="hljs-number">7</span> * <span class="hljs-number">7</span>, <span class="hljs-number">4096</span>), nn.ReLU(), nn.Dropout(<span class="hljs-number">0.5</span>),<br>        nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">4096</span>), nn.ReLU(), nn.Dropout(<span class="hljs-number">0.5</span>),<br>        nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>))<br><br>net = vgg(conv_arch)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.randn(size=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">224</span>,<span class="hljs-number">224</span>))<br><span class="hljs-keyword">for</span> blk <span class="hljs-keyword">in</span> net:<br>    X = blk(X)<br>    <span class="hljs-built_in">print</span>(blk.__class__.__name__,<span class="hljs-string">&#x27;output shape:\t&#x27;</span>,X.shape)<br><br><span class="hljs-comment"># 每个Sequential VGG块的作用，通道数加倍，高宽减半 </span><br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">64</span>, <span class="hljs-number">112</span>, <span class="hljs-number">112</span>])<br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">128</span>, <span class="hljs-number">56</span>, <span class="hljs-number">56</span>])<br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">256</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>])<br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">512</span>, <span class="hljs-number">14</span>, <span class="hljs-number">14</span>])<br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">512</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>])<br>Flatten output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">25088</span>])<br>Linear output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>Dropout output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>Linear output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>ReLU output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>Dropout output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">4096</span>])<br>Linear output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 减小批次</span><br>ratio = <span class="hljs-number">4</span><br>small_conv_arch = [(pair[<span class="hljs-number">0</span>], pair[<span class="hljs-number">1</span>] // ratio) <span class="hljs-keyword">for</span> pair <span class="hljs-keyword">in</span> conv_arch]<br>net = vgg(small_conv_arch)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lr, num_epochs, batch_size = <span class="hljs-number">0.05</span>, <span class="hljs-number">10</span>, <span class="hljs-number">128</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, resize=<span class="hljs-number">224</span>)<br>d2l.train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())<br></code></pre></td></tr></table></figure><h2 id="nin-神经网络">NiN 神经网络</h2><h3 id="原因-2">原因</h3><ul><li>卷积层参数个数: <span class="math inline">\(c_i \times c_o \timesk^2\)</span></li><li>卷积层后第一个全连接层参数个数:<ul><li>相当于用<code>output_channels</code>个<spanclass="math inline">\(1\times1\)</span>的卷积核进行卷积计算</li><li><span class="math inline">\(c_i \times c_o \times k^2\)</span></li></ul></li></ul><h3 id="块架构">块架构</h3><figure><img src="/img/VGGvsNiN.png" alt="VGG vs NiN" /><figcaption aria-hidden="true">VGG vs NiN</figcaption></figure><ul><li>一个卷积层后跟两个全连接层<ul><li>步幅为1，无填充，输出形状跟卷积层输出一样</li><li>起到全连接层的作用</li></ul></li></ul><h3 id="特点-2">特点</h3><ul><li>无全连接层</li><li>交替使用NiN块和步幅为2的最大池化层<ul><li>逐步减少高宽(减半)和增大通道数(加倍)</li></ul></li><li>最后使用全局平均池化层得到输出<ul><li>输入通道数是类别数</li><li>池化层的高宽=原始输入的高宽</li></ul></li></ul><h3 id="代码-3">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-comment"># 定义NiN块结构</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">nin_block</span>(<span class="hljs-params">in_channels,out_channels,kernel_size,stride,padding</span>):<br>    <span class="hljs-keyword">return</span> nn.Sequential(<br>    nn.Conv2d(in_channels,out_channels,kernel_size,stride,padding),nn.ReLU(),<br>    nn.Conv2d(out_channels,out_channels,kernel_size=<span class="hljs-number">1</span>),nn.ReLU(),<br>    nn.Conv2d(out_channels,out_channels,kernel_size=<span class="hljs-number">1</span>),nn.ReLU(),<br>    )<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 构建网络序列</span><br>net  = nn.Sequential(<br>    nin_block(<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,kernel_size=<span class="hljs-number">11</span>,stride=<span class="hljs-number">4</span>,padding=<span class="hljs-number">0</span>),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    nin_block(<span class="hljs-number">96</span>,<span class="hljs-number">256</span>,kernel_size=<span class="hljs-number">5</span>,stride=<span class="hljs-number">1</span>,padding=<span class="hljs-number">2</span>),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    nin_block(<span class="hljs-number">256</span>,<span class="hljs-number">384</span>,kernel_size=<span class="hljs-number">3</span>,stride=<span class="hljs-number">1</span>,padding=<span class="hljs-number">1</span>),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    nn.Dropout(<span class="hljs-number">0.5</span>),<br>    nin_block(<span class="hljs-number">384</span>,<span class="hljs-number">10</span>,kernel_size=<span class="hljs-number">3</span>,stride=<span class="hljs-number">1</span>,padding=<span class="hljs-number">1</span>),<br>    nn.AdaptiveAvgPool2d((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<br>    <span class="hljs-comment"># 把数据拉成 batch_size x 10 </span><br>    nn.Flatten()<br>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 批次 1 大小 1 x 224 x 224</span><br>X = torch.rand(size=(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">224</span>,<span class="hljs-number">224</span>))<br><span class="hljs-comment"># 打印网络信息</span><br><span class="hljs-keyword">for</span> layer <span class="hljs-keyword">in</span> net:<br>    X = layer(X)<br>    <span class="hljs-built_in">print</span>(layer.__class__.__name__,<span class="hljs-string">&#x27;output:\t&#x27;</span>,X.shape)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 训练</span><br>lr, num_epochs, batch_size = <span class="hljs-number">0.1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">128</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, resize=<span class="hljs-number">224</span>)<br>d2l.train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())<br></code></pre></td></tr></table></figure><h2 id="googlenet-网络">GoogLeNet 网络</h2><h3 id="特点-3">特点</h3><ul><li><p>引入了<code>Inception</code>块</p><figure><img src="/img/googLeNet_Inception.png" alt="Inception Block" /><figcaption aria-hidden="true">Inception Block</figcaption></figure><p><code>Inception</code>块由四条并行路径组成。前三条路径使用窗口大小为1×1、3×3和5×5的卷积层，从不同空间大小中提取信息。中间的两条路径在输入上执行1×1卷积，以减少通道数，从而降低模型的复杂性。第四条路径使用3×3最大汇聚层，然后使用1×1卷积层来改变通道数。这四条路径都使用合适的填充来使输入与输出的高和宽一致，最后我们将每条线路的输出在通道维度上连结，并构成<code>Inception</code>块的输出。在<code>Inception</code>块中，通常调整的超参数是每层输出通道数。</p></li><li><p>基于<code>Inception</code>块，构建了网络</p><figure><img src="/img/inception-full.svg" alt="GooLeNet架构" /><figcaption aria-hidden="true">GooLeNet架构</figcaption></figure></li></ul><h3 id="代码-4">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><br><span class="hljs-comment"># 定义Inception块</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Inception</span>(nn.Module):<br>    <span class="hljs-comment"># c1--c4是每条路径的输出通道数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, in_channels, c1, c2, c3, c4, **kwargs</span>):<br>        <span class="hljs-built_in">super</span>(Inception, self).__init__(**kwargs)<br>        <span class="hljs-comment"># 线路1，单1x1卷积层</span><br>        self.p1_1 = nn.Conv2d(in_channels, c1, kernel_size=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 线路2，1x1卷积层后接3x3卷积层</span><br>        self.p2_1 = nn.Conv2d(in_channels, c2[<span class="hljs-number">0</span>], kernel_size=<span class="hljs-number">1</span>)<br>        self.p2_2 = nn.Conv2d(c2[<span class="hljs-number">0</span>], c2[<span class="hljs-number">1</span>], kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 线路3，1x1卷积层后接5x5卷积层</span><br>        self.p3_1 = nn.Conv2d(in_channels, c3[<span class="hljs-number">0</span>], kernel_size=<span class="hljs-number">1</span>)<br>        self.p3_2 = nn.Conv2d(c3[<span class="hljs-number">0</span>], c3[<span class="hljs-number">1</span>], kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># 线路4，3x3最大汇聚层后接1x1卷积层</span><br>        self.p4_1 = nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br>        self.p4_2 = nn.Conv2d(in_channels, c4, kernel_size=<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        p1 = F.relu(self.p1_1(x))<br>        p2 = F.relu(self.p2_2(F.relu(self.p2_1(x))))<br>        p3 = F.relu(self.p3_2(F.relu(self.p3_1(x))))<br>        p4 = F.relu(self.p4_2(self.p4_1(x)))<br>        <span class="hljs-comment"># 在通道维度上连结输出</span><br>        <span class="hljs-keyword">return</span> torch.cat((p1, p2, p3, p4), dim=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义网络的各个部分</span><br>b1 = nn.Sequential(<br>    nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>,kernel_size=<span class="hljs-number">7</span>,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">3</span>),<br>    nn.ReLU(),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">1</span>)<br>)<br><br>b2 = nn.Sequential(nn.Conv2d(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">1</span>),<br>                   nn.ReLU(),<br>                   nn.Conv2d(<span class="hljs-number">64</span>, <span class="hljs-number">192</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>                   nn.ReLU(),<br>                   nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>))<br><br>b3 = nn.Sequential(Inception(<span class="hljs-number">192</span>, <span class="hljs-number">64</span>, (<span class="hljs-number">96</span>, <span class="hljs-number">128</span>), (<span class="hljs-number">16</span>, <span class="hljs-number">32</span>), <span class="hljs-number">32</span>),<br>                   Inception(<span class="hljs-number">256</span>, <span class="hljs-number">128</span>, (<span class="hljs-number">128</span>, <span class="hljs-number">192</span>), (<span class="hljs-number">32</span>, <span class="hljs-number">96</span>), <span class="hljs-number">64</span>),<br>                   nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>))<br><br>b4 = nn.Sequential(Inception(<span class="hljs-number">480</span>, <span class="hljs-number">192</span>, (<span class="hljs-number">96</span>, <span class="hljs-number">208</span>), (<span class="hljs-number">16</span>, <span class="hljs-number">48</span>), <span class="hljs-number">64</span>),<br>                   Inception(<span class="hljs-number">512</span>, <span class="hljs-number">160</span>, (<span class="hljs-number">112</span>, <span class="hljs-number">224</span>), (<span class="hljs-number">24</span>, <span class="hljs-number">64</span>), <span class="hljs-number">64</span>),<br>                   Inception(<span class="hljs-number">512</span>, <span class="hljs-number">128</span>, (<span class="hljs-number">128</span>, <span class="hljs-number">256</span>), (<span class="hljs-number">24</span>, <span class="hljs-number">64</span>), <span class="hljs-number">64</span>),<br>                   Inception(<span class="hljs-number">512</span>, <span class="hljs-number">112</span>, (<span class="hljs-number">144</span>, <span class="hljs-number">288</span>), (<span class="hljs-number">32</span>, <span class="hljs-number">64</span>), <span class="hljs-number">64</span>),<br>                   Inception(<span class="hljs-number">528</span>, <span class="hljs-number">256</span>, (<span class="hljs-number">160</span>, <span class="hljs-number">320</span>), (<span class="hljs-number">32</span>, <span class="hljs-number">128</span>), <span class="hljs-number">128</span>),<br>                   nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>))<br><br>b5 = nn.Sequential(Inception(<span class="hljs-number">832</span>, <span class="hljs-number">256</span>, (<span class="hljs-number">160</span>, <span class="hljs-number">320</span>), (<span class="hljs-number">32</span>, <span class="hljs-number">128</span>), <span class="hljs-number">128</span>),<br>                   Inception(<span class="hljs-number">832</span>, <span class="hljs-number">384</span>, (<span class="hljs-number">192</span>, <span class="hljs-number">384</span>), (<span class="hljs-number">48</span>, <span class="hljs-number">128</span>), <span class="hljs-number">128</span>),<br>                   nn.AdaptiveAvgPool2d((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<br>                   nn.Flatten())<br><br>net = nn.Sequential(b1, b2, b3, b4, b5, nn.Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用小批量数据打印网络信息</span><br>X = torch.rand(size=(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">96</span>, <span class="hljs-number">96</span>))<br><span class="hljs-keyword">for</span> layer <span class="hljs-keyword">in</span> net:<br>    X = layer(X)<br>    <span class="hljs-built_in">print</span>(layer.__class__.__name__,<span class="hljs-string">&#x27;output shape:\t&#x27;</span>, X.shape)<br><br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">64</span>, <span class="hljs-number">24</span>, <span class="hljs-number">24</span>])<br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">192</span>, <span class="hljs-number">12</span>, <span class="hljs-number">12</span>])<br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">480</span>, <span class="hljs-number">6</span>, <span class="hljs-number">6</span>])<br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">832</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>])<br>Sequential output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">1024</span>])<br>Linear output shape: torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">10</span>])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#训练</span><br>lr, num_epochs, batch_size = <span class="hljs-number">0.1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">128</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, resize=<span class="hljs-number">96</span>)<br>d2l.train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())<br></code></pre></td></tr></table></figure><h2 id="resnet-残差网络">ResNet 残差网络</h2><h3 id="特点-4">特点</h3><p>保证新加入的层的使得效果至少不会变差</p><h3 id="残差块">残差块</h3><ul><li>串联一个层改变函数类，扩大函数类</li><li>残差块加入快速通道得到<span class="math inline">\(f(x) = x +g(x)\)</span>的结构</li></ul><figure><img src="/img/resnet-block.svg" alt="resnet-block" /><figcaption aria-hidden="true">resnet-block</figcaption></figure><p>原来的向后传播，或者加入一个1x1卷积层来变换通道数量使得能够继续向后</p><ul><li>即使中间的块什么都没有学到，之前的层的结果还是能够继续向后传播</li><li>类似VGG和GoogLeNet的总体架构，但是替换成了ResNet块</li></ul><h4 id="种类">种类</h4><ul><li>高宽减半<code>ResNet</code>块（步幅为2）</li><li>后接多个高宽不变<code>ResNet</code>块</li></ul><h3 id="代码-5">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><br><br><span class="hljs-comment"># 定义Residual块</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Residual</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,input_channels,num_channels,use_1x1conv=<span class="hljs-literal">False</span>,strides=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.conv1 = nn.Conv2d(input_channels,num_channels,kernel_size=<span class="hljs-number">3</span>,padding=<span class="hljs-number">1</span>,stride=strides)<br>        self.conv2 = nn.Conv2d(num_channels,num_channels,kernel_size=<span class="hljs-number">3</span>,padding=<span class="hljs-number">1</span>)<br>        <br>        <span class="hljs-keyword">if</span> use_1x1conv:<br>            self.conv3 = nn.Conv2d(input_channels,num_channels,kernel_size=<span class="hljs-number">1</span>,stride=strides)<br>        <span class="hljs-keyword">else</span>:<br>            self.conv3 = <span class="hljs-literal">None</span><br>        self.bn1 = nn.BatchNorm2d(num_channels)<br>        self.bn2 = nn.BatchNorm2d(num_channels)<br>        <span class="hljs-comment"># inplace直接操作input，不另外开辟内存进ReLU操作</span><br>        <span class="hljs-comment"># 原地更新</span><br>        self.relu = nn.ReLU(inplace=<span class="hljs-literal">True</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>        Y = F.relu(self.bn1(self.conv1(X)))<br>        Y = self.bn2(self.conv2(Y))<br>        <span class="hljs-keyword">if</span> self.conv3:<br>            X = self.conv3(X)<br>        Y += X<br>        <br>        <span class="hljs-keyword">return</span> F.relu(Y)<br>    <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#将块组成模块，各个模块构成ResNet</span><br><br>b1 = nn.Sequential(<br>    nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">64</span>,kernel_size=<span class="hljs-number">7</span>,stride=<span class="hljs-number">2</span>),<br>    nn.BatchNorm2d(<span class="hljs-number">64</span>),nn.ReLU(),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>,stride=<span class="hljs-number">2</span>,padding=<span class="hljs-number">1</span>)<br>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">resnet_block</span>(<span class="hljs-params">input_channels,num_channels,num_residuals,first_block=<span class="hljs-literal">False</span></span>):<br>    blk = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_residuals):<br>        <span class="hljs-keyword">if</span> i==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> first_block:<br>            blk.append(Residual(input_channels,num_channels,use_1x1conv=<span class="hljs-literal">True</span>,strides=<span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">else</span>:<br>            blk.append(Residual(num_channels,num_channels))<br>    <span class="hljs-keyword">return</span> blk<br><br><span class="hljs-comment"># *字典解包</span><br>b2 = nn.Sequential(*resnet_block(<span class="hljs-number">64</span>,<span class="hljs-number">64</span>,<span class="hljs-number">2</span>,first_block=<span class="hljs-literal">True</span>))<br>b3 = nn.Sequential(*resnet_block(<span class="hljs-number">64</span>,<span class="hljs-number">128</span>,<span class="hljs-number">2</span>))<br>b4 = nn.Sequential(*resnet_block(<span class="hljs-number">128</span>,<span class="hljs-number">256</span>,<span class="hljs-number">2</span>))<br>b5 = nn.Sequential(*resnet_block(<span class="hljs-number">256</span>,<span class="hljs-number">512</span>,<span class="hljs-number">2</span>))<br><br>net = nn.Sequential(b1,b2,b3,b4,b5,<br>                    nn.AdaptiveAvgPool2d((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<br>                    nn.Flatten(),nn.Linear(<span class="hljs-number">512</span>,<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lr, num_epochs, batch_size = <span class="hljs-number">0.05</span>, <span class="hljs-number">10</span>, <span class="hljs-number">256</span><br>train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, resize=<span class="hljs-number">96</span>)<br>d2l.train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())<br></code></pre></td></tr></table></figure><h3 id="总结-4">总结</h3><ul><li>残差块使得很深的网络更加容易训练</li><li>后面的网络或多或少都有残差块的思想</li><li>下面小的先训练好，再训练深的，因为有跳转层</li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习 神经网络基础 笔记</title>
    <link href="/2023/06/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%20%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/02/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%20%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="模型构造">模型构造</h2><h3 id="预备知识">预备知识</h3><ul><li><p>模型</p><ul><li></li></ul></li><li><p>损失函数</p><ul><li>因为需要计算损失函数的梯度，所以我们应该先定义损失函数。</li></ul></li><li><p>优化算法</p><ul><li>在每一步中，使用从数据集中随机抽取的一个小批量，然后根据参数计算损失的梯度。</li><li>接下来，朝着减少损失的方向更新我们的参数。</li><li>该函数接受模型参数集合、学习速率和批量大小作为输入。每一步更新的大小由学习速率<code>lr</code>决定。</li></ul></li><li><p>训练</p><ul><li>在每次迭代中，我们读取一小批量训练样本，并通过我们的模型来获得一组预测，并计算损失</li><li>计算完损失后，我们开始反向传播，存储每个参数的梯度。最后，我们调用优化算法<code>sgd</code>来更新模型参数</li><li>概括<ol type="1"><li>初始化参数<ul><li><code>net.apply(init_func())</code></li><li><code>nn.inti.X_()</code></li></ul></li><li>重复以下训练<ol type="1"><li>计算梯度 <span class="math inline">\(\mathbf{g} \leftarrow\partial_{(\mathbf{w},b)} \frac{1}{|\mathcal{B}|} \sum_{i \in\mathcal{B}} l(\mathbf{x}^{(i)}, y^{(i)}, \mathbf{w}, b)\)</span><ul><li>计算损失,<code>loss = nn.CorssEntropyLoss()</code>，<code>l = loss(net(X),y)</code></li><li>计算梯度,<code>l.sum().backward()</code></li></ul></li><li>更新参数<span class="math inline">\((\mathbf{w}, b) \leftarrow(\mathbf{w}, b) - \eta \mathbf{g}\)</span><ul><li>常写为<code>trainer</code>，或者<code>optimizer</code></li><li><code>optimizer/trianer = torch.optim.SGD(net.parameters(), lr=lr)</code></li></ul></li></ol></li></ol></li></ul></li><li><p>总结：</p></li></ul><p><strong>实现流程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br> <br><span class="hljs-comment"># 线性回归的简洁实现</span><br> <br><span class="hljs-comment"># 通过使用深度学习框架来简洁地实现线性回归模型，生成数据集</span><br>true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span><br>features, labels = d2l.synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_array</span>(<span class="hljs-params">data_arrays, batch_size, is_train=<span class="hljs-literal">True</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;构造一个PyTorch数据迭代器&quot;&quot;&quot;</span><br>    dataset = data.TensorDataset(*data_arrays)  <span class="hljs-comment"># dataset拿到数据集</span><br>    <span class="hljs-keyword">return</span> data.DataLoader(dataset, batch_size, shuffle=is_train)  <span class="hljs-comment"># DataLoader从中挑选样本出来</span><br> <br> <br>batch_size = <span class="hljs-number">10</span><br>data_iter = load_array((features, labels), batch_size)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(data_iter)))  <span class="hljs-comment"># 通过next得到X和y</span><br> <br> <br><span class="hljs-comment"># 使用框架的预定义好的层</span><br><span class="hljs-comment"># nn是神经网络的缩写</span><br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br>net = nn.Sequential(nn.Linear(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># 2，1分别指的是输入维度和输出维度；Sequential是一个list of layers，是一个容器</span><br> <br> <br><span class="hljs-comment"># 初始化模型参数</span><br>net[<span class="hljs-number">0</span>].weight.data.normal_(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>)  <span class="hljs-comment"># 使用正态分布来替换掉data的值</span><br>net[<span class="hljs-number">0</span>].bias.data.fill_(<span class="hljs-number">0</span>)<br><span class="hljs-comment"># 计算局方误差使用的是MSELoss类，也称为平方范数</span><br>loss = nn.MSELoss()<br><span class="hljs-comment"># 实例化SGD实例</span><br>trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.03</span>)  <span class="hljs-comment"># SGD在名为optimizer的module里面；net.parameters()包括了w和b</span><br> <br> <br><span class="hljs-comment"># 训练过程</span><br>num_epochs = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>        l = loss(net(X), y)<br>        trainer.zero_grad()  <span class="hljs-comment"># 先把梯度清零，否则会在之前的梯度上做累加</span><br>        l.backward()<br>        trainer.step()  <span class="hljs-comment"># step进行模型的更新，即分别更新权重和偏差</span><br>    l = loss(net(features), labels)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;l:f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>实现流程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch6</span>(<span class="hljs-params">net, train_iter, test_iter, num_epochs, lr, device</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Train a model with a GPU (defined in Chapter 6).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Defined in :numref:`sec_lenet`&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear <span class="hljs-keyword">or</span> <span class="hljs-built_in">type</span>(m) == nn.Conv2d:<br>            nn.init.xavier_uniform_(m.weight)<br>    net.apply(init_weights)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;training on&#x27;</span>, device)<br>    net.to(device)<br>    <span class="hljs-comment"># 定义优化器</span><br>    optimizer = torch.optim.SGD(net.parameters(), lr=lr)<br>    <span class="hljs-comment"># 定义损失函数</span><br>    loss = nn.CrossEntropyLoss()<br>    animator = d2l.Animator(xlabel=<span class="hljs-string">&#x27;epoch&#x27;</span>, xlim=[<span class="hljs-number">1</span>, num_epochs],<br>                            legend=[<span class="hljs-string">&#x27;train loss&#x27;</span>, <span class="hljs-string">&#x27;train acc&#x27;</span>, <span class="hljs-string">&#x27;test acc&#x27;</span>])<br>    timer, num_batches = d2l.Timer(), <span class="hljs-built_in">len</span>(train_iter)<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        <span class="hljs-comment"># Sum of training loss, sum of training accuracy, no. of examples</span><br>        metric = d2l.Accumulator(<span class="hljs-number">3</span>)<br>        net.train()<br>        <span class="hljs-keyword">for</span> i, (X, y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_iter):<br>            timer.start()<br>            <span class="hljs-comment"># 计算优化器</span><br>            optimizer.zero_grad()<br>            X, y = X.to(device), y.to(device)<br>            y_hat = net(X)<br>            <span class="hljs-comment"># 计算loss</span><br>            l = loss(y_hat, y)<br>            <span class="hljs-comment"># 梯度反向传播的计算过程</span><br>            l.backward()<br>            <span class="hljs-comment"># 更新模型参数</span><br>            optimizer.step()<br>            <span class="hljs-comment"># 计算误差</span><br>            <span class="hljs-keyword">with</span> torch.no_grad():<br>                metric.add(l * X.shape[<span class="hljs-number">0</span>], d2l.accuracy(y_hat, y), X.shape[<span class="hljs-number">0</span>])<br>            timer.stop()<br>            train_l = metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>]<br>            train_acc = metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br>            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span>) % (num_batches // <span class="hljs-number">5</span>) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> i == num_batches - <span class="hljs-number">1</span>:<br>                animator.add(epoch + (i + <span class="hljs-number">1</span>) / num_batches,<br>                             (train_l, train_acc, <span class="hljs-literal">None</span>))<br>        test_acc = evaluate_accuracy_gpu(net, test_iter)<br>        animator.add(epoch + <span class="hljs-number">1</span>, (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, test_acc))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;loss <span class="hljs-subst">&#123;train_l:<span class="hljs-number">.3</span>f&#125;</span>, train acc <span class="hljs-subst">&#123;train_acc:<span class="hljs-number">.3</span>f&#125;</span>, &#x27;</span><br>          <span class="hljs-string">f&#x27;test acc <span class="hljs-subst">&#123;test_acc:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;metric[<span class="hljs-number">2</span>] * num_epochs / timer.<span class="hljs-built_in">sum</span>():<span class="hljs-number">.1</span>f&#125;</span> examples/sec &#x27;</span><br>          <span class="hljs-string">f&#x27;on <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(device)&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="模型构造-1">模型构造</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MLP</span>(nn.Module):<br>    <span class="hljs-comment"># init函数中 包括了你所有网络需要用到的层</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init()__<br>        self.hidden = nn.Linear(<span class="hljs-number">20</span>,<span class="hljs-number">256</span>)<br>        self.out = nn.Linear(<span class="hljs-number">256</span>,<span class="hljs-number">10</span>)<br>    <span class="hljs-comment"># 定义前向函数 </span><br>    <span class="hljs-comment"># 把输入放入到hidden层中 使用 relu函数激活 再放到输出层中进行输出</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>        <span class="hljs-keyword">return</span> self.out(F.relu(self.hidden(X)))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">net = MLP()<br>net(X) <br><span class="hljs-comment"># net.forward(X) 已经在Module父类中做了一次映射 可以直接写为net(X)</span><br></code></pre></td></tr></table></figure><h4 id="嵌套块">嵌套块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">block1</span>():<br>    <span class="hljs-keyword">return</span> nn.Sequential(nn.Linear(<span class="hljs-number">4</span>,<span class="hljs-number">8</span>),nn.ReLU(),nn.Linear(<span class="hljs-number">8</span>,<span class="hljs-number">4</span>),nn.ReLU())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">block2</span>():<br>    net = nn.Sequential()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-comment"># 把层添加进去</span><br>        net.add_module(<span class="hljs-string">f&#x27;block<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>,block1())<br>    <span class="hljs-keyword">return</span> net<br><br>rgnet = nn.Sequential(block2(),nn.Linear(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h4 id="nn.sequential类注释"><code>nn.Sequential()</code>类注释</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 手动实现</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySequential</span>(nn.Module):<br>    <span class="hljs-comment"># *args  list of input arguments </span><br>    <span class="hljs-comment"># 多个输入被打包成一个变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,*args</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-comment"># 放入_modules变量中</span><br>       <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> args:<br>            self._modules[block] = block<br>      <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>      <span class="hljs-comment"># 按层调用，最后返回X</span><br>    <span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> self._modeles.values():<br>            X = block(X)<br>        <span class="hljs-keyword">return</span> X<br><br><span class="hljs-comment"># 按顺序传入层 被*args参数接收</span><br>net = MySequential(nn.Linear(<span class="hljs-number">20</span>,<span class="hljs-number">256</span>),nn.ReLU(),nn.Linear(<span class="hljs-number">256</span>,<span class="hljs-number">10</span>))<br><br>net(X)<br>    <br></code></pre></td></tr></table></figure><h3 id="参数管理">参数管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MLP</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init()__<br>        self.hidden = nn.Linear(<span class="hljs-number">20</span>,<span class="hljs-number">256</span>)<br>        self.out = nn.Linear(<span class="hljs-number">256</span>,<span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>        <span class="hljs-keyword">return</span> self.out(F.relu(self.hidden(X)))<br><br><span class="hljs-comment">#打印 hidden层 的参数    </span><br> net.hidden.state_dict() <br>       <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">shared = nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>)<br>net = nn.Sequential(nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>), nn.ReLU(),<br>                    shared, nn.ReLU(),<br>                    shared, nn.ReLU(),<br>                    nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>))<br>net(X)<br><span class="hljs-comment"># nn.Linear(4,8)的参数</span><br>net[<span class="hljs-number">0</span>].state_dict()  <br><span class="hljs-comment"># nn.Linear(8,1)的参数</span><br>net[<span class="hljs-number">6</span>].state_dict()<br></code></pre></td></tr></table></figure><h4 id="内置初始化">内置初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">EG1：<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_normal</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-comment"># 常用来放实现一些对Net进行初始化的函数</span><br>   <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        <span class="hljs-comment"># 如果传入的Module是个线性层</span><br>        <span class="hljs-comment"># 下划线表示normal_是个inplace函数，直接会对输入的参数进行操作</span><br>        <br>        nn.init.normal_(m.weight,mean=<span class="hljs-number">0</span>,std=<span class="hljs-number">0.01</span>)<br>        <span class="hljs-comment"># 对weights进行权重为0，方差为0.01的初始化</span><br>        nn.init.zeros_(m.bias)<br><br><span class="hljs-comment">#对所有Net里的Layer进行遍历，应用init_normal规则</span><br><span class="hljs-comment">#给你一个方式让你遍历整个神经网络（net[0]~net[n]），做一些修改</span><br>net.apply(init_normal)<br><br><span class="hljs-comment"># 正态分布，偏移为0 </span><br>net[<span class="hljs-number">0</span>].weight.data[<span class="hljs-number">0</span>],net[<span class="hljs-number">0</span>].bias.data[<span class="hljs-number">0</span>]<br><br><br>EG2：<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_constant</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        <span class="hljs-comment"># 把 类型为Linear的Module中的权重全赋值为1</span><br>        nn.init.constant_(m.weight,<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 把 类型为Linear的Module中的偏差全赋值为0</span><br>        nn.init.zeros_(m.bias)<br><br>net.apply(init_constant)<br><br><br>EG3：<br><span class="hljs-comment">#可以对不同的层应用不同的事情</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xavir</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>nn.init.xavier_uniform_(m.weight)<br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_42</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        nn.init.constant_(m.weight<span class="hljs-number">.42</span>)<br><br><span class="hljs-comment">#网络的不同层用不同的方法初始化</span><br>net[<span class="hljs-number">0</span>].apply(xavier)<br>net[<span class="hljs-number">2</span>].apply(init_42)<br><br><span class="hljs-built_in">print</span>(net[<span class="hljs-number">0</span>].weight.data[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(net[<span class="hljs-number">2</span>].weight.data)<br></code></pre></td></tr></table></figure><h4 id="参数绑定">参数绑定</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#第三层和第五层参数绑定</span><br><span class="hljs-comment">#无论怎么边，第三层和第五层的参数是一样的</span><br>shared = nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>)<br>net = nn.Sequential(nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>), nn.ReLU(),<br>                    shared, nn.ReLU(),<br>                    shared, nn.ReLU(),<br>                    nn.Linear(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>))<br>net(X)<br></code></pre></td></tr></table></figure><h3 id="自定义层">自定义层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CenteredLayer</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>        <span class="hljs-keyword">return</span> X-X.mean()<br><br>layer = CenteredLayer()<br>layer(torch.FloatTensor([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]))<br><br></code></pre></td></tr></table></figure><h4 id="nn.parameter-模型参数的初始化"><code>nn.Parameter()</code>模型参数的初始化</h4><p><ahref="https://blog.csdn.net/weixin_49371288/article/details/120223507?ydreferer=aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BhbmJhb3JhbjkxMy9hcnRpY2xlL2RldGFpbHMvMTI1MDY5Mzc1">Python的torch.nn.Parameter初始化方法_nn.parameter初始化</a></p><h4 id="自定义带参数的层">自定义带参数的层</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义一个全连接层</span><br><span class="hljs-comment"># 该层输入大小为in_units，输出为units</span><br><span class="hljs-comment"># 权重为 randn(in_units,units)</span><br><span class="hljs-comment"># 偏置为 randn(units,)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinear</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,in_units,units</span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-comment">#  添加权重和参数</span><br>        <span class="hljs-comment">#  并且自动计算梯度，requires_gard = True</span><br>        self.weight = nn.Parameter(torch.randn(in_units,units))<br>        self.bias = nn.Parameter(torch.randn(units,))<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>        linear = torch.matmul(X,self.weight.data) + self.bias.data<br>        <span class="hljs-keyword">return</span> F.relu(linear)<br><br>dense = MyLinear(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<br>demse.weight<br></code></pre></td></tr></table></figure><h3 id="读写文件">读写文件</h3><h4 id="张量">张量</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">y = torch.zeros(<span class="hljs-number">4</span>)<br>torch.save([x,y],<span class="hljs-string">&#x27;x-files&#x27;</span>)<br>x2,y2 = torch.load(<span class="hljs-string">&#x27;x-files&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="从字符串映射到张量的字典">从字符串映射到张量的字典</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mydict = &#123;<span class="hljs-string">&#x27;x&#x27;</span>:x,<span class="hljs-string">&#x27;y&#x27;</span>:y&#125;<br>torch.save(mydict,<span class="hljs-string">&#x27;mydict&#x27;</span>)<br>mydict2 = torch.load(<span class="hljs-string">&#x27;mydict&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="加载和保存模型参数">加载和保存模型参数</h4><ul><li>存的是模型的权重，不存计算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MLP</span>(nn.Module):<br>    <span class="hljs-comment"># init函数中 包括了你所有网络需要用到的层</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init()__<br>        self.hidden = nn.Linear(<span class="hljs-number">20</span>,<span class="hljs-number">256</span>)<br>        self.out = nn.Linear(<span class="hljs-number">256</span>,<span class="hljs-number">10</span>)<br>    <span class="hljs-comment"># 定义前向函数 </span><br>    <span class="hljs-comment"># 把输入放入到hidden层中 使用 relu函数激活 再放到输出层中进行输出</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,X</span>):<br>        <span class="hljs-keyword">return</span> self.out(F.relu(self.hidden(X)))<br>    <br>net = MLP()<br>X = torch.randn(size=(<span class="hljs-number">2</span>,<span class="hljs-number">20</span>))<br>Y = net(X)<br><br><span class="hljs-comment"># 把MLP中的所有参数存为一个字典，参数名字到后面的映射</span><br>torch.save(net.state_dict(),<span class="hljs-string">&#x27;mlp.params&#x27;</span>)<br><br><br><span class="hljs-comment"># 复制、读取保存的状态</span><br><span class="hljs-comment"># 声明一个网络，通过load_state_dict加载之前保存的状态</span><br><span class="hljs-comment"># 达到备份的效果</span><br>clone = MLP()<br>clone.load_state_dict(torch.load(<span class="hljs-string">&#x27;mlp.params&#x27;</span>))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自己的学习环境搭建</title>
    <link href="/2023/05/10/%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/05/10/%E8%87%AA%E5%B7%B1%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="买矿卡p104-100">1、买矿卡P104-100。</h4><h6 id="矿卡介绍">矿卡介绍</h6><p>​P10x系列是矿潮的时候Nvidia专门推出的Miner显卡，或多或少阉割了Pcie通道和显存带宽。而且没有视频输出接口，得走核显输出。</p><p>​ P104-100，核心和1070一样，阉割了Pcie通道，没有视频接口，其他都差不多。</p><h6 id="买的原因">买的原因</h6><p>​便宜，130块钱质保三个月，8G显存，作为一个调试深度学习的环境足够。避免了每次打断点调试都要送到服务器上，占用一块或者几块显卡。</p><h6 id="特点">特点</h6><p>​ 便宜</p><h5 id="矿卡驱动的安装">2、矿卡驱动的安装</h5><h6 id="主板设置">主板设置</h6><p>​铭瑄H610i主板，真的坑。我先更新了官网最新的BIOS，遇到的第一个问题，BIOS刷不上。居然自己找不到自己BIOS的路径！</p><p>​ 还需要我手动找BIOS文件的路径，然后cd过去再敲命令，真的太离谱了。</p><p>​<code>.nsh</code>脚本在<code>fs6</code>分区跑，但是实际上BIOS文件在<code>fs5</code>分区。</p><figure><img src="/img/铭瑄BIOS1.jpg" alt="铭瑄BIOS找不到路径" /><figcaption aria-hidden="true">铭瑄BIOS找不到路径</figcaption></figure><figure><img src="/img/铭瑄BIOS2.jpg" alt="自己手动cd到目录文件刷BIOS" /><figcaption aria-hidden="true">自己手动cd到目录文件刷BIOS</figcaption></figure><p>遇到的第二个问题就是主板输出接口的设置，前面提到了，P104-100并没有输出接口，视频信号还是得通过核显从主板输出出去。因为Pcie插槽插上显卡后，主板会默认走Pcie输出视频信号，不走核显了，所以得在主板里设置优先走核显输出。</p><p>主要显示设备：<code>IGFX</code>，代表核显。</p><p>板载显卡：<code>Enabled</code>，在有独显的情况下还是会有核显选项供你选择。</p><p>开启4GB以上MMIOBIOS分配：<code>Enabled</code>，不懂，但如果不开，就算上面步骤设置好了，开机还是黑屏，核显无输出。开了，插上显卡就能正常进系统。</p><p>启动选项中：关闭CSM。</p><figure><img src="/img/铭瑄BIOS3.jpg" alt="铭瑄BIOS3" /><figcaption aria-hidden="true">铭瑄BIOS3</figcaption></figure><h6id="安全模式使用ddu清除之前的n卡驱动">安全模式使用ddu清除之前的N卡驱动</h6><p>​ 我之前没有装过N卡，这步就跳过。</p><h6 id="证书安装">证书安装</h6><p>​这里又有个很坑的情况，就是证书安装位置得手动选择受信任的根证书颁发机构，不然驱动死活打不上。</p><p>​ <img src="/img/P104驱动证书安装位置.png"alt="证书安装位置的选择" /></p><figure><img src="/img/P104驱动安装失败—证书位置错误.jpg"alt="证书安装位置不对，打驱动报错" /><figcaption aria-hidden="true">证书安装位置不对，打驱动报错</figcaption></figure><h6 id="驱动安装">驱动安装</h6><p>​ 在证书安装正确的前提下，安装526.47魔改驱动，全部功能基本都有。</p><h6 id="烤鸡测试">烤鸡测试</h6><p>​ 双烤三个小时，CPU66度，GPU69度。</p><p>​ <img src="/img/P104_100GPUZ.png" alt="P104-100驱动成功后GPUZ" /></p><h5id="windows环境下cudacudann安装">3、Windows环境下cuda、cudann安装</h5><p>​ 查看你的驱动对应的版本，然后下载合适的版本，一路安装就行。</p><p>​ <img src="/img/查看驱动版本和合适的CUDA版本.png"alt="查看驱动版本和合适的CUDA版本" /></p><p>​CUDAnn也是，下载注册好后，把文件夹复制粘贴到CUDA文件夹中，因为CUDAnn可以理解为CUDA的一个插件。</p><h5 id="选取合适的pytorch版本">4、选取合适的pytorch版本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install torch==<span class="hljs-number">1.13</span><span class="hljs-number">.1</span>+cu117 torchvision==<span class="hljs-number">0.14</span><span class="hljs-number">.1</span>+cu117 torchaudio==<span class="hljs-number">0.13</span><span class="hljs-number">.1</span> --extra-index-url https://download.pytorch.org/whl/cu117<br></code></pre></td></tr></table></figure><figure><img src="/img/CUDA安装成功cmd.png" alt="CUDA安装成功" /><figcaption aria-hidden="true">CUDA安装成功</figcaption></figure><h5id="虚拟机ubuntu环境下cudacudann安装">4、虚拟机Ubuntu环境下cuda、cudann安装</h5><p>​ 这边又是一个大坑，差点一度放弃，后面看到方法5。</p><p>​因为vM虚拟机下创建的Ubuntu环境，显卡直通很难，虽然宿主机有显卡，但是虚拟机里看不见。要设置的话很麻烦，性能也会有损耗。</p><p>​ 中间想到了用vSphere的Esxi虚拟化实现，但是太占用资源了。</p><h5 id="wsl虚拟环境下ubuntu">5、wsl虚拟环境下ubuntu</h5><p>​WSL是Windows下运行Ubuntu虚拟机的一个方法，而且方便快捷。甚至显卡驱动都不用装。</p><p>​ <a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">安装WSL | Microsoft Learn</a></p><figure><img src="/img/WSL下Nvidia驱动.png" alt="WSL下Nvidia驱动" /><figcaption aria-hidden="true">WSL下Nvidia驱动</figcaption></figure><h5 id="section"></h5><h5 id="wsl-cudacudann安装">6、WSL cuda、cudann安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin<br>sudo <span class="hljs-built_in">mv</span> cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600<br>wget https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda-repo-wsl-ubuntu-11-7-local_11.7.0-1_amd64.deb<br>sudo dpkg -i cuda-repo-wsl-ubuntu-11-7-local_11.7.0-1_amd64.deb<br>sudo <span class="hljs-built_in">cp</span> /var/cuda-repo-wsl-ubuntu-11-7-<span class="hljs-built_in">local</span>/cuda-*-keyring.gpg /usr/share/keyrings/<br>sudo apt-get update<br>sudo apt-get -y install cuda<br></code></pre></td></tr></table></figure><p>参考：<ahref="https://developer.nvidia.com/cuda-11-7-0-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=WSL-Ubuntu&amp;target_version=2.0&amp;target_type=deb_local">CUDAToolkit 11.7 Downloads | NVIDIA Developer</a></p><p>至此WSL上有了完整的CUDA环境。</p><h5id="云服务器frp中转设置实现远程">7、云服务器frp中转设置，实现远程</h5><p>这步的前提是你得有一个公网IP的云服务器。</p><p>因为跑机器学习的需求，很多时候都是在Linux环境下运行代码，所以在宿舍机是Windows的情况下，我构建了WSL的Ubuntu虚拟机，在虚拟机上搭建CUDA环境，然后宿主机Pycharm再ssh到WSL上的Interpreter运行和调试代码。注：实验室有自己的深度学习服务器。但是我远程ssh上用服务器调试的话有点资源浪费。</p><p>而且在晚上回去之后，我只能通过远程连实验室Windows宿主机然后才能用WSL，比较麻烦。而且本身我WSL装的UbuntuServer对网络带宽要求不高，所以我干脆把WLS通过frp做了一个内网穿透，通过公网IP的服务器做中转，这样我在宿舍的电脑上可以不用远程连接WIndows宿主机而直接调用Windows上的WSL。</p><p>WSL中frpc.ini设置如下：</p><figure><img src="/img/WSL中frpc_ini设置.png" alt="WLS中frpc.ini设置" /><figcaption aria-hidden="true">WLS中frpc.ini设置</figcaption></figure><p>云服务器中frps.ini设置如下</p><figure><img src="/img/云服务器中frps.ini设置.png"alt="云服务器中frps.ini设置" /><figcaption aria-hidden="true">云服务器中frps.ini设置</figcaption></figure><p>参考：https://blog.csdn.net/zhengshaolin128/article/details/126795036</p><figure><img src="/img/WSL下frpc配置成功.png" alt="WSL frpc配置成功" /><figcaption aria-hidden="true">WSL frpc配置成功</figcaption></figure><p>至此，我的所有设备都能够使用实验室虚拟化WSL下的Conda和CUDA环境来调试代码。</p><p>至于白天写的代码晚上回去不同电脑上就不一样了，我还是基于云服务器和Gitea的docker，搭建了一个代码托管服务，晚上回去Pull一下就可以了。</p><figure><img src="/img/远程SSH到Windows下WSL.png" alt="远程ssh到Window下WSL" /><figcaption aria-hidden="true">远程ssh到Window下WSL</figcaption></figure><figure><img src="/img/远程ssh到WSL下Interpreter.png"alt="远程ssh到WSL下Interpreter" /><figcaption aria-hidden="true">远程ssh到WSL下Interpreter</figcaption></figure><h5 id="结束语">8、结束语</h5><p>​配置全套过程大概花费了两天时间。其实以后有个自己的公网IP或者学校开放了个端口或者域名给你会方便很多，不用我这样折腾。</p><p>​也完全可以把WSL映射到Windows一个端口，然后在宿舍挂VPN再ssh这端口就行，不用frp，据说会带来安全问题。</p><p>​但我也只是映射了一个虚拟环境出去。现在终于整套都用上自己的环境了，舒服~</p><p>处于网络安全考虑，本人只是走通了以上路线，实际并未使用。</p><p>​ <img src="/img/云服务器的作用.png" alt="云服务器的作用" /></p>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NeRF-pytorch源码注释</title>
    <link href="/2023/05/05/NeRF-pytorch%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/"/>
    <url>/2023/05/05/NeRF-pytorch%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h4 id="主要函数调用栈">主要函数调用栈</h4><figure><img src="/img/NeRF-pytorch函数调用栈.png"alt="NeRF-pytorch函数调用栈" /><figcaption aria-hidden="true">NeRF-pytorch函数调用栈</figcaption></figure><h4 id="fern.txt">fern.txt</h4><p>配置文件</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tex">expname = fern<span class="hljs-built_in">_</span>test<br>basedir = ./logs<br>datadir = ../NeRF<span class="hljs-built_in">_</span>data/llff/fern<br>dataset<span class="hljs-built_in">_</span>type = llff<br><br>factor = 8<br>llffhold = 8<br><br>N<span class="hljs-built_in">_</span>rand = 1024<br>N<span class="hljs-built_in">_</span>coarse<span class="hljs-built_in">_</span>samples = 64<br>N<span class="hljs-built_in">_</span>fine<span class="hljs-built_in">_</span>samples = 64<br><br>use<span class="hljs-built_in">_</span>viewdirs = True<br>raw<span class="hljs-built_in">_</span>noise<span class="hljs-built_in">_</span>std = 1e0<br><br></code></pre></td></tr></table></figure><h4 id="run_nerf.py">run_nerf.py</h4><p><strong>主函数，内部集成了<code>Train</code>训练函数</strong></p><p><em>train:</em> 训练的主函数</p><p><em>create_log_files:</em> 创建log文件</p><p><em>create_nerf:</em> 按论文的结构构造神经网络</p><p><em>run_network:</em> 位置编码完送，调用<em>batchify</em></p><p><em>batchify:</em> 把光线分批，再调用神经网络，再拼起来</p><p><em>run_render_only:</em> 只进行渲染</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> imageio<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span>  tqdm,trange<br><span class="hljs-keyword">from</span> opts <span class="hljs-keyword">import</span> config_parser<br><br><span class="hljs-keyword">from</span> load_llff_data <span class="hljs-keyword">import</span> load_llff_data<br><br><span class="hljs-keyword">from</span> embed <span class="hljs-keyword">import</span> get_embedder<br><span class="hljs-keyword">from</span> NeRF_model <span class="hljs-keyword">import</span>  NeRF<br><span class="hljs-keyword">from</span> render <span class="hljs-keyword">import</span> render,render_path,to8b<br><span class="hljs-keyword">from</span> rays <span class="hljs-keyword">import</span> get_rays_np<br><span class="hljs-comment">#定义训练用的device</span><br>device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><br><span class="hljs-comment">#定义计算loss误差的函数</span><br>img2mse = <span class="hljs-keyword">lambda</span> x, y: torch.mean((x - y) ** <span class="hljs-number">2</span>)<br><span class="hljs-comment">#定义由mse计算psnr的函数</span><br>mse2psnr = <span class="hljs-keyword">lambda</span> x: -<span class="hljs-number">10.</span> * torch.log(x) / torch.log(torch.Tensor([<span class="hljs-number">10.</span>]))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_render_only</span>(<span class="hljs-params">args,images,i_test,basedir,expname,render_poses,hwf,K,render_kwargs_test,start</span>):<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">if</span> args.render_test():<br>            <span class="hljs-comment"># 渲染测试集</span><br>            images = images[i_test]<br>        <span class="hljs-keyword">else</span>:<br>            images=<span class="hljs-literal">None</span><br><br>        test_save_dir = os.path.join(basedir,expname,<br>                                     <span class="hljs-string">&#x27;renderonly_&#123;&#125;_&#123;:06d&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;test&#x27;</span> <span class="hljs-keyword">if</span> args.render_test <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;path&#x27;</span>,start))<br>        os.makedirs(test_save_dir,exist_ok=<span class="hljs-literal">True</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test pose shape:&#x27;</span>,render_poses.shape)<br><br>        rgbs,_ = render_path(render_poses, hwf, K, args.chunk, render_kwargs_test,gt_images=images,<br>                             savedir=test_save_dir, render_factor=args.render_factor)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done Rendering&quot;</span>,test_save_dir)<br>        imageio.mimwrite(os.path.join(test_save_dir),<span class="hljs-string">&#x27;video.mp4&#x27;</span>,to8b(rgbs),fps=<span class="hljs-number">30</span>,quality=<span class="hljs-number">8</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">batchify</span>(<span class="hljs-params">fn,chunk</span>):<br>    <span class="hljs-comment"># 如果指定了chunk分批的大小 返回分块的函数</span><br>    <span class="hljs-comment"># 否则直接返回神经网络</span><br>    <span class="hljs-keyword">if</span> chunk <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> fn<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ret</span>(<span class="hljs-params">inputs</span>):<br>        <span class="hljs-comment">#将输入分为大小为chunk的块，送到网络fn中计算结果，然后把结果拼接起来</span><br>        <span class="hljs-keyword">return</span> torch.cat([fn(inputs[i:i + chunk]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,inputs.shape[<span class="hljs-number">0</span>],  chunk)], <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> ret<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_network</span>(<span class="hljs-params">inputs,viewdirs,fn,embed_fn,embeddirs_fn,netchunk=<span class="hljs-number">1024</span>*<span class="hljs-number">64</span></span>):<br>    <span class="hljs-comment"># [N_rand * 64,3]</span><br>    inputs_flat = torch.reshape(inputs,[-<span class="hljs-number">1</span>,inputs.shape[-<span class="hljs-number">1</span>]])<br>    <span class="hljs-comment"># x y z 位置编码 [N_rand * 64,63]</span><br>    embedded = embed_fn(inputs_flat)<br><br>    <span class="hljs-keyword">if</span> viewdirs <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        input_dirs = viewdirs[:,<span class="hljs-literal">None</span>].expand(inputs.shape)<br>        input_dirs_flat = torch.reshape(input_dirs,[-<span class="hljs-number">1</span>,input_dirs.shape[-<span class="hljs-number">1</span>]])<br>        <span class="hljs-comment"># Theta phi 位置编码</span><br>        <span class="hljs-comment"># [N_rand * 64 , 27]</span><br>        embedded_dirs = embeddirs_fn(input_dirs_flat)<br>        <span class="hljs-comment"># 把所有编码完成的拼接起来 [N_rand * 64,63 + 27]</span><br>        embedded = torch.cat([embedded,embedded_dirs],-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># chunk=netchunk = 1024 * 64</span><br>    <span class="hljs-comment"># outputs_flat = torch.cat([fn(embedded[i,i+chunk]) for i in range(0,embedded.shape[0],chunk)],0)</span><br>    outputs_flat = batchify(fn,netchunk)(embedded)<br><br>    outputs = torch.reshape(outputs_flat,<span class="hljs-built_in">list</span>(inputs.shape[:-<span class="hljs-number">1</span>])+[outputs_flat.shape[-<span class="hljs-number">1</span>]])<br>    <span class="hljs-keyword">return</span> outputs<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_nerf</span>(<span class="hljs-params">args</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这里，input_embedding是通过常规embedding层，将每一个token的向量维度从vocab_size映射到d_model.</span><br><span class="hljs-string">    由于是相加关系，自然而然地，这里的positional_encoding也是一个d_model维度的向量。（在原论文里，d_model = 512）</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Input embedding 是一种常用的将离散的输入转换成连续向量的方式。 ！！！长度不一样的转换为长度一样的！！！</span><br><span class="hljs-string">    例如，在自然语言处理任务中，输入可以是一个单词或一个字符，而输入嵌入可以将其转换成一个固定长度的向量，以便更好地在神经网络中处理。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    而位置编码则是一种将位置信息嵌入到输入中的方式。在一些场景中，输入的位置信息往往与输出结果密切相关。 ！！！长度一样的编码编程独特的位置码方便识别！！！</span><br><span class="hljs-string">    例如，在机器翻译任务中，输入句子中单词的位置和输出句子中单词的位置往往是对应的。为了更好地利用位置信息，可以使用位置编码来为每个输入位置分配一个特定的编码向量。</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    在 NeRF 中，位置编码的作用是为每个采样点的位置分配一个编码向量，以便更好地利用位置信息。</span><br><span class="hljs-string">    而输入嵌入则用于将其他信息，如视角信息，编码成向量。这两种编码方式的作用不同，但都可以帮助模型更好地利用输入信息。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    multires = args.multires<br>    multires_views = args.multires_views<br>    i_embed = args.i_embed<br>    use_viewdirs = args.use_viewdirs<br>    N_fine_samples = args.N_fine_samples<br>    netdepth_fine = args.netdepth_fine<br>    netwidth_fine = args.netwidth_fine<br>    netchunk = args.netchunk<br>    lr = args.lrate<br>    basedir = args.basedir<br>    expname = args.expname<br><br><br>    <span class="hljs-comment"># 创建高频、低频 Sin() cos()编码</span><br><br>    <span class="hljs-comment">#Input: layer = 0,Position Encoding 后的长度为 63 的vector</span><br>    embed_fn,input_channel = get_embedder(multires,i_embed)<br><br><br>    input_views_channel = <span class="hljs-number">0</span><br>    embeddirs_fn = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> use_viewdirs:<br>        <span class="hljs-comment">#use full 5D input instead of 3D  对 x,y,z ,theta , phi 都输入，都编码</span><br>        embeddirs_fn,input_views_channel = get_embedder(multires_views,i_embed)<br><br>    <span class="hljs-comment"># 当精细网络每条光线上的采样点数量不为0的时候，输出channel数量为5</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    当不采用精细采样时，只需要预测四个通道：三个用于表示 RGB 颜色值，一个用于表示透明度。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    output_channel = <span class="hljs-number">5</span> <span class="hljs-keyword">if</span> N_fine_samples&gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">4</span><br>    skips = [<span class="hljs-number">4</span>]<br><br>    <span class="hljs-comment"># model = NeRF()</span><br>    model = NeRF(D=args.netdepth, W=args.netwidth,<br>                 input_channel=input_channel, output_channel=output_channel, skips=skips,<br>                 input_views_channel=input_views_channel, use_viewdirs=use_viewdirs)<br>    <span class="hljs-comment"># 存储粗网络中的参数</span><br>    grad_vars = <span class="hljs-built_in">list</span>(model.parameters())<br><br><br>    model_fine = <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># 精细网络</span><br>    <span class="hljs-keyword">if</span> N_fine_samples&gt;<span class="hljs-number">0</span>:<br>        model_fine =NeRF(D=netdepth_fine,W=netwidth_fine,<br>                         input_channel=input_channel,output_channel=output_channel,skips=skips,<br>                         input_views_channel=input_views_channel,use_viewdirs=use_viewdirs)<br>        <span class="hljs-comment"># 存储精细网络中的参数</span><br>        grad_vars+=<span class="hljs-built_in">list</span>(model_fine.parameters())<br><br><br>    <span class="hljs-comment"># todo runnetwork 是不是真正跑神经网络的地方？</span><br>    network_query_fn = <span class="hljs-keyword">lambda</span> inputs,viewdirs,network_fn:run_network(inputs,viewdirs,network_fn,<br>                                                                     embed_fn=embed_fn,<br>                                                                     embeddirs_fn=embeddirs_fn,<br>                                                                     netchunk=netchunk)<br>    <span class="hljs-comment"># 创建优化器</span><br>    optimizer =torch.optim.Adam(params=grad_vars,lr=lr,betas=(<span class="hljs-number">0.9</span>,<span class="hljs-number">0.999</span>))<br><br>    start = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment">##########################</span><br><br>    <span class="hljs-comment"># Load checkpoints</span><br>    <span class="hljs-keyword">if</span> args.ft_path <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> args.ft_path != <span class="hljs-string">&#x27;None&#x27;</span>:<br>        ckpts = [args.ft_path]<br>    <span class="hljs-keyword">else</span>:<br>        ckpts = [os.path.join(basedir, expname, f) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(os.listdir(os.path.join(basedir, expname))) <span class="hljs-keyword">if</span><br>                 <span class="hljs-string">&#x27;tar&#x27;</span> <span class="hljs-keyword">in</span> f]<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Found ckpts&#x27;</span>, ckpts)<br><br>    <span class="hljs-comment"># load参数 如果检测到跑到一半的结果或者模型</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(ckpts) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> args.no_reload:<br>        ckpt_path = ckpts[-<span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Reloading from&#x27;</span>, ckpt_path)<br>        ckpt = torch.load(ckpt_path)<br><br>        start = ckpt[<span class="hljs-string">&#x27;global_step&#x27;</span>]<br>        optimizer.load_state_dict(ckpt[<span class="hljs-string">&#x27;optimizer_state_dict&#x27;</span>])<br><br>        <span class="hljs-comment"># Load model</span><br>        model.load_state_dict(ckpt[<span class="hljs-string">&#x27;network_fn_state_dict&#x27;</span>])<br>        <span class="hljs-keyword">if</span> model_fine <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            model_fine.load_state_dict(ckpt[<span class="hljs-string">&#x27;network_fine_state_dict&#x27;</span>])<br><br>    <span class="hljs-comment">##########################</span><br><br>    <span class="hljs-comment"># 存放训练神经网络、渲染结果的函数和参数的元组</span><br>    render_kwargs_train = &#123;<br>        <span class="hljs-string">&#x27;network_query_fn&#x27;</span>: network_query_fn,<br>        <span class="hljs-string">&#x27;perturb&#x27;</span>: args.perturb,<br>        <span class="hljs-string">&#x27;N_fine_samples&#x27;</span>: args.N_fine_samples,<br>        <span class="hljs-comment"># 精细网络</span><br>        <span class="hljs-string">&#x27;network_fine&#x27;</span>: model_fine,<br>        <span class="hljs-string">&#x27;N_coarse_samples&#x27;</span>: args.N_coarse_samples,<br>        <span class="hljs-comment"># 粗网络</span><br>        <span class="hljs-string">&#x27;network_fn&#x27;</span>: model,<br>        <span class="hljs-string">&#x27;use_viewdirs&#x27;</span>: args.use_viewdirs,<br>        <span class="hljs-string">&#x27;white_bkgd&#x27;</span>: args.white_bkgd,<br>        <span class="hljs-string">&#x27;raw_noise_std&#x27;</span>: args.raw_noise_std,<br>    &#125;<br><br>    <span class="hljs-built_in">print</span>(model_fine)<br><br>    <span class="hljs-comment"># NDC only good for LLFF-style forward facing data</span><br>    <span class="hljs-comment"># 非LLFF数据，ndc设为False</span><br>    <span class="hljs-keyword">if</span> args.dataset_type != <span class="hljs-string">&#x27;llff&#x27;</span> <span class="hljs-keyword">or</span> args.no_ndc:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Not ndc!&#x27;</span>)<br>        render_kwargs_train[<span class="hljs-string">&#x27;ndc&#x27;</span>] = <span class="hljs-literal">False</span><br>        render_kwargs_train[<span class="hljs-string">&#x27;lindisp&#x27;</span>] = args.lindisp<br><br>    render_kwargs_test = &#123;k: render_kwargs_train[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> render_kwargs_train&#125;<br>    render_kwargs_test[<span class="hljs-string">&#x27;perturb&#x27;</span>] = <span class="hljs-literal">False</span><br>    render_kwargs_test[<span class="hljs-string">&#x27;raw_noise_std&#x27;</span>] = <span class="hljs-number">0.</span><br><br>    <span class="hljs-keyword">return</span> render_kwargs_train, render_kwargs_test, start, grad_vars, optimizer<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_log_files</span>(<span class="hljs-params">basedir,expname,args</span>):<br>    os.makedirs(os.path.join(basedir,expname),exist_ok=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 保存参数文件</span><br>    f = os.path.join(basedir,expname,<span class="hljs-string">&#x27;args.txt&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(f,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">vars</span>(args)):<br>            attr = <span class="hljs-built_in">getattr</span>(args,arg)<br>            file.write(<span class="hljs-string">&#x27;&#123;&#125;=&#123;&#125;\n&#x27;</span>.<span class="hljs-built_in">format</span>(arg,attr))<br><br>    <span class="hljs-keyword">if</span> args.config <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        f = os.path.join(basedir,expname,<span class="hljs-string">&#x27;config.txt&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(f,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            file.write(<span class="hljs-built_in">open</span>(args.config,<span class="hljs-string">&#x27;r&#x27;</span>).read())<br><br>    <span class="hljs-keyword">return</span> basedir,expname<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>():<br>    parser = config_parser()<br>    args = parser.parse_args()<br><br>    <span class="hljs-comment"># 数据文件夹</span><br>    datadir = args.datadir<br>    <span class="hljs-comment"># 根目录文件夹</span><br>    basedir = args.basedir<br>    <span class="hljs-comment"># 本次测试的名称</span><br>    expname = args.expname<br>    <span class="hljs-comment"># 数据类型</span><br>    datatype  = args.dataset_type<br>    <span class="hljs-comment"># 缩放因子</span><br>    factor = args.factor<br>    <span class="hljs-comment"># 360°视频 球形化相机位置</span><br>    spherify = args.spherify<br>    <span class="hljs-comment"># llff 测试集抽取间隔</span><br>    llffhold = args.llffhold<br>    <span class="hljs-comment"># bool值 表示是否定义了边界</span><br>    no_ndc = args.no_ndc<br>    <span class="hljs-comment"># bool值 表示当前是否是渲染测试集</span><br>    render_test = args.render_test<br>    <span class="hljs-comment">#设定相机的内参矩阵为None</span><br>    K = <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 如果是LLFF数据集</span><br>    <span class="hljs-keyword">if</span> datatype== <span class="hljs-string">&quot;llff&quot;</span>:<br>        <span class="hljs-comment"># images 20 x 378 x 504 x 3  N H W RGB</span><br>        <span class="hljs-comment"># poses 20 x 3 x 5 N R T HWF</span><br>        <span class="hljs-comment"># bds 20 x 2 N near far</span><br>        <span class="hljs-comment"># render_poses 120 x 3 x 5  render_pose R T HWF</span><br>        <span class="hljs-comment"># i_test 12 20张里面抽样12张</span><br>        images,\<br>        poses,\<br>        bds,\<br>        render_poses,\<br>        i_test = load_llff_data(datadir,<br>                                factor,<br>                                recenter=<span class="hljs-literal">True</span>,<br>                                bd_factor = <span class="hljs-number">0.75</span>,<br>                                spherify = spherify)<br>    <span class="hljs-comment"># images</span><br>        <span class="hljs-comment"># 获取照片的高度、宽度、焦距</span><br>        hwf = poses[<span class="hljs-number">0</span>,:<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>]<br>        <span class="hljs-comment"># 获取所有照片的位姿信息 c2w 20 x 3 x 4</span><br>        poses = poses[:,:<span class="hljs-number">3</span>,:<span class="hljs-number">4</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;load llff&quot;</span>,images.shape,render_poses.shape,hwf,datadir)<br>        <span class="hljs-comment"># # i_test 测试所用的照片的下标 转为字典 方便后面存储抽样的下标</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(i_test,<span class="hljs-built_in">list</span>):<br>            i_test=[i_test]<br>        <span class="hljs-comment"># 按llffhold的采样间隔抽取照片 [0.。。20] -&gt; [0 8 16]</span><br>        <span class="hljs-keyword">if</span>  llffhold&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Auto LLFF holdout&quot;</span>,llffhold)<br>            i_test = np.arange(images.shape[<span class="hljs-number">0</span>])[::llffhold]<br>        <span class="hljs-comment"># 设置测试集标签</span><br>        i_val = i_test<br>        <span class="hljs-comment"># 剩下的作为训练集标签</span><br>        i_train = np.array([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> np.arange(<span class="hljs-built_in">int</span>(images.shape[<span class="hljs-number">0</span>])) <span class="hljs-keyword">if</span><br>                            (i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> i_test <span class="hljs-keyword">and</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> i_val )])<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DEFINING BOUNDS&quot;</span>)<br>        <span class="hljs-comment"># 定义照片的near和far 分别代表光线采样区间内最近的点和最远的点</span><br>        <span class="hljs-keyword">if</span> no_ndc:<br>            near = np.ndarray.<span class="hljs-built_in">min</span>(bds)*<span class="hljs-number">0.9</span><br>            far = np.ndarray.<span class="hljs-built_in">max</span>(bds)*<span class="hljs-number">1.0</span><br>        <span class="hljs-keyword">else</span>:<br>            near = <span class="hljs-number">0.0</span><br>            far = <span class="hljs-number">1.0</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Near:&quot;</span>,near,<span class="hljs-string">&quot;Far&quot;</span>,far)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Unknown dataset type&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># H W 转为Int类型</span><br>    H,W,focal = hwf<br>    H,W = <span class="hljs-built_in">int</span>(H),<span class="hljs-built_in">int</span>(W)<br>    hwf = [H,W,focal]<br><br>    <span class="hljs-comment">#定义相机的内参矩阵</span><br>    <span class="hljs-keyword">if</span> K <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        K = np.array([<br>            [focal,<span class="hljs-number">0</span>,<span class="hljs-number">0.5</span>*W],<br>            [<span class="hljs-number">0</span>,focal,<span class="hljs-number">0.5</span>*H],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>        ])<br><br>    <span class="hljs-comment">###</span><br>    <span class="hljs-comment">#这一部分定义相机最后的渲染 渲染测试集</span><br>    <span class="hljs-keyword">if</span> render_test:<br>        render_poses = np.array(poses[i_test])<br><br>    <span class="hljs-comment"># 不是渲染测试集的话，把最后渲染视频的相机位姿送到GPU</span><br>    render_poses = torch.Tensor(render_poses).to(device)<br><br>    <span class="hljs-comment">###</span><br>    <span class="hljs-comment"># 这一部分创建最后的输出文件和保存此次训练所用的参数</span><br>    create_log_files(basedir,expname,args)<br><br>    <span class="hljs-comment"># ---------------------------------------------------------------------------------------------------</span><br><br>    <span class="hljs-comment"># 构建NeRF模型</span><br>    <span class="hljs-comment"># 网络参数 开始计数 梯度参数 优化器</span><br>    render_kwargs_train,render_kwargs_test,start,grad_vars,optimizer = create_nerf(args)<br><br>    <span class="hljs-comment">#</span><br>    global_setp = start<br><br>    <span class="hljs-comment"># 设置采样的边界 near far</span><br>    bds_dict=&#123;<br>        <span class="hljs-string">&#x27;near&#x27;</span>:near,<br>        <span class="hljs-string">&#x27;far&#x27;</span>:far,<br>    &#125;<br>    <span class="hljs-comment"># 更新 near far参数</span><br>    render_kwargs_train.update(bds_dict)<br>    render_kwargs_test.update(bds_dict)<br><br>    <span class="hljs-comment"># —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— —— ——</span><br>    <span class="hljs-comment"># 仅仅渲染之前的训练好的模型</span><br>    <span class="hljs-keyword">if</span> args.render_only:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Render Only&quot;</span>)<br>        <span class="hljs-comment"># 仅仅进行渲染，不进行训练</span><br>        run_render_only(args,images,i_test,basedir,expname,render_poses,hwf,K,render_kwargs_test,start)<br>        <span class="hljs-keyword">return</span><br><br><br>    N_rand= args.N_rand<br>    use_batching = <span class="hljs-keyword">not</span> args.no_batching<br><br>    <span class="hljs-keyword">if</span> use_batching:<br>        <span class="hljs-comment">#打乱光线</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;getting rays&quot;</span>)<br>        <span class="hljs-comment"># 每张照片的位姿是p 每张照片由H*w个像素 每个像素生成一个光线(ro+rd)</span><br>        <span class="hljs-comment"># [N,ro+rd,H,W,3]</span><br>        rays = np.stack([get_rays_np(H,W,K,p) <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> poses[:,:<span class="hljs-number">3</span>,:<span class="hljs-number">4</span>]],<span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># 将光线与实际照片对应的像素结合在一起</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;concats&#x27;</span>)<br>        <span class="hljs-comment"># 在第二个维度拼接</span><br>        <span class="hljs-comment"># images[:,None] images:[217,1,120,160,3]</span><br>        <span class="hljs-comment"># [N, ro + rd + imgRGB, H, W, 3]</span><br>        rays_rgb = np.concatenate([rays,images[:,<span class="hljs-literal">None</span>]],<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 变换坐标轴顺序 [N,H,W,ro+rd+imgRGB,3]</span><br>        rays_rgb = np.transpose(rays_rgb,[<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>])<br>        <span class="hljs-comment"># 使用训练集数据</span><br>        rays_rgb = np.stack([rays_rgb[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> i_train],<span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># reshape数据 [(N-1) x H x W ,3,3]</span><br>        rays_rgb = np.reshape(rays_rgb,[-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>])<br>        rays_rgb = rays_rgb.astype(np.float32)<br>        <span class="hljs-comment"># todo 打乱光线数据  比较费时</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;shuffle rays&quot;</span>)<br>        np.random.shuffle(rays_rgb)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;shuffle rays done&quot;</span>)<br><br>        i_batch = <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 放入Cuda</span><br>    <span class="hljs-keyword">if</span> use_batching:<br>        images = torch.Tensor(images).to(device)<br>        rays_rgb = torch.Tensor(rays_rgb).to(device)<br><br>    poses = torch.Tensor(poses).to(device)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Begin&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Trains views are&#x27;</span>,i_train)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Test views are&#x27;</span>, i_test)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Val views are&#x27;</span>, i_val)<br><br>    <span class="hljs-comment">## 开始训练</span><br>    <span class="hljs-comment">## 20W次迭代</span><br><br><br>    N_iters = <span class="hljs-number">200000</span>+<span class="hljs-number">1</span><br>    start = start+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(start,N_iters):<br>        time0 = time.time()<br>        <span class="hljs-comment"># 是否将随机的光线分批放入神经网络,分批的大小为N_rand(1024)</span><br>        <span class="hljs-comment"># 如果是的话，每个iter 选 N_rand个光线送去算</span><br>        <span class="hljs-comment"># 所有的都选过一遍之后再i_batch置0</span><br>        <span class="hljs-keyword">if</span> use_batching:<br>            <span class="hljs-comment"># [x:x+1024, ro+rd+rgb, 3]</span><br>            <span class="hljs-comment"># [1024,3,3]</span><br>            batch = rays_rgb[i_batch:i_batch+N_rand]<br>            <span class="hljs-comment"># [ro+rd+rgb,1024,3]</span><br>            <span class="hljs-comment"># [3,1024,3]</span><br>            batch = torch.transpose(batch,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># batch_rays: ro+rd [2,1024,3]</span><br>            <span class="hljs-comment"># target_rgb: imgRGB [1,1024,3]</span><br>            batch_rays,traget_rgb = batch[:<span class="hljs-number">2</span>],batch[<span class="hljs-number">2</span>]<br><br>            i_batch+=N_rand<br>            <span class="hljs-comment"># 判断是否都选过</span><br>            <span class="hljs-keyword">if</span> i_batch&gt;=rays_rgb.shape[<span class="hljs-number">0</span>]:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Shuffle data after an epoch&quot;</span>)<br>                rand_idx = torch.randperm(rays_rgb.shape[<span class="hljs-number">0</span>])<br>                rays_rgb = rays_rgb[rand_idx]<br>                i_batch = <span class="hljs-number">0</span><br><br>        <span class="hljs-comment"># todo 用一张图片计算？暂时先不写了</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">pass</span><br>            <span class="hljs-comment"># 选一个训练的下标作为训练图片的下标</span><br>            <span class="hljs-comment"># img_idx = np.random.choice(i_train)</span><br>            <span class="hljs-comment"># target_img = images[img_idx]</span><br><br>        <span class="hljs-comment"># 核心优化的循环</span><br>        <span class="hljs-comment"># 输出精细神经网络内容</span><br>        <span class="hljs-comment"># etxras里存储粗网络的内容</span><br>        <span class="hljs-comment"># 返回的list 前三个是 [&#x27;rgb_fine_map&#x27;,&#x27;disp_fine_map&#x27;,&#x27;acc_fine_map&#x27;]</span><br>        <span class="hljs-comment"># 后四个是 [rgb_corse_map disp_corse_map acc_corse_map z_std]</span><br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            源代码写的太乱了</span><br><span class="hljs-string">            render(render_kwargs_train存放要调用的神经网络)--&gt;</span><br><span class="hljs-string">            batchify_rays--&gt;</span><br><span class="hljs-string">            render_rays(在里面经过神经网络)--&gt;</span><br><span class="hljs-string">            network_query_fn(调用神经网络)--&gt;</span><br><span class="hljs-string">            run_network(真正跑神经网络的地方)--&gt;</span><br><span class="hljs-string">            batchify(network_fn,netchunk)(embedded)--&gt;</span><br><span class="hljs-string">            # render_kwargs_train里存放的 network_fn:model</span><br><span class="hljs-string">            torch.cat([network_fn(inputs[i,i+chunk]) for i in range(0,inputs.shape[0],chunk)],0)</span><br><span class="hljs-string">            </span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        rgb_fine_map, disp_fine_map, acc_fine_map, extras = render(H,W,K,<br>                                        chunk=args.chunk,<br>                                        rays=batch_rays,<br>                                        verbose=i&lt;<span class="hljs-number">10</span>,<br>                                        retraw=<span class="hljs-literal">True</span>,<br>                                        **render_kwargs_train)<br><br>        <span class="hljs-comment"># 初始化优化器</span><br>        optimizer.zero_grad()<br>        <span class="hljs-comment">#计算loss MSE 误差</span><br>        img_loss = img2mse(rgb_fine_map,traget_rgb)<br>        <span class="hljs-comment"># 计算PSNR</span><br>        loss = img_loss<br>        psnr_fine = mse2psnr(img_loss)<br><br>        <span class="hljs-comment"># 这个dist在 render&lt;--all_ret&lt;--render_rays里生成</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rgb_coarse_map&#x27;</span> <span class="hljs-keyword">in</span> extras:<br>            <span class="hljs-comment"># 如果用了粗网络，把粗网络的</span><br>            img_loss_coarse = img2mse(extras[<span class="hljs-string">&#x27;rgb_coarse_map&#x27;</span>],traget_rgb)<br>            loss = loss + img_loss_coarse<br>            psnr_coarse = mse2psnr(img_loss_coarse)<br><br>        <span class="hljs-comment"># 误差的反向传播</span><br>        loss.backward()<br>        optimizer.step()<br><br>        <span class="hljs-comment"># 学习率衰减</span><br>        decay_rate =<span class="hljs-number">0.1</span><br>        decay_steps = args.lrate_decay*<span class="hljs-number">1000</span><br>        <span class="hljs-comment"># 按步长衰减</span><br>        new_lrate= args.lrate * (decay_rate**(global_setp/decay_steps))<br>        <span class="hljs-comment"># 更新学习率</span><br>        <span class="hljs-keyword">for</span> param_group <span class="hljs-keyword">in</span> optimizer.param_groups:<br>            param_group[<span class="hljs-string">&#x27;lr&#x27;</span>] = new_lrate<br><br>        <span class="hljs-comment"># 保存模型</span><br>        <span class="hljs-comment"># i_weights 10000 每隔1w次保存一次</span><br>        <span class="hljs-keyword">if</span> i % args.i_weights ==<span class="hljs-number">0</span>:<br>            path = os.path.join(basedir,expname,<span class="hljs-string">&#x27;&#123;:06d&#125;.tar&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br>            torch.save(&#123;<br>                <span class="hljs-comment"># 运行的轮数</span><br>                <span class="hljs-string">&quot;global_step&quot;</span>:global_setp,<br>                <span class="hljs-string">&quot;network_fn_state_dict&quot;</span>:render_kwargs_train[<span class="hljs-string">&#x27;network_fn&#x27;</span>].state_dict(),<br>                <span class="hljs-string">&quot;network_fine_state_dict&quot;</span>:render_kwargs_train[<span class="hljs-string">&#x27;network_fine&#x27;</span>].state_dict(),<br>                <span class="hljs-string">&quot;optimizer_state_dict&quot;</span>:optimizer.state_dict()<br>            &#125;,path)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Saving checkpoints at &quot;</span>,path,<span class="hljs-string">&quot;Num. &quot;</span>,i)<br><br>        <span class="hljs-comment"># 生成测试视频</span><br>        <span class="hljs-keyword">if</span> i % args.i_video ==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># 用测试数据生成视频 不是训练数据的视频</span><br>            <span class="hljs-comment"># 下面的不记录梯度</span><br>            <span class="hljs-keyword">with</span> torch.no_grad():<br>                rgbs,disps = render_path(render_poses,hwf,K,args.chunk,render_kwargs_test)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done, Saving&quot;</span>,rgbs.shape,disps.shape)<br>            <span class="hljs-comment"># 视频渲染的路径</span><br>            moviebase = os.path.join(basedir,expname,<span class="hljs-string">&#x27;&#123;&#125;_sprial&#123;:06d&#125;_&#x27;</span>.<span class="hljs-built_in">format</span>(expname,i))<br>            <span class="hljs-comment"># 360度环绕一圈的视频</span><br>            imageio.mimwrite(moviebase+<span class="hljs-string">&#x27;rgb.mp4&#x27;</span>,to8b(rgbs),fps=<span class="hljs-number">30</span>,quality=<span class="hljs-number">8</span>)<br>            <span class="hljs-comment"># 深度视频</span><br>            imageio.mimwrite(moviebase+<span class="hljs-string">&#x27;disp.mp4&#x27;</span>,to8b(disps/np.<span class="hljs-built_in">max</span>(disps)),fps=<span class="hljs-number">30</span>,quality=<span class="hljs-number">8</span>)<br><br>        <span class="hljs-comment"># 执行测试，使用测试数据</span><br>        <span class="hljs-keyword">if</span> i % args.i_testset ==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i &gt; <span class="hljs-number">0</span>:<br>            testsavedir = os.path.join(basedir,expname,<span class="hljs-string">&quot;testset_&#123;:06d&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i))<br>            os.makedirs(testsavedir,exist_ok=<span class="hljs-literal">True</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test poses shape&quot;</span>,poses[i_test].shape)<br>            <span class="hljs-keyword">with</span> torch.no_grad():<br>                render_path(torch.Tensor(poses[i_test]).to(device),hwf,K,args.chunk,render_kwargs_test,<br>                            gt_images=images[i_test],savedir=testsavedir)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Save test set&quot;</span>)<br><br>        <span class="hljs-comment"># 计算用时</span><br>        dt = time.time() - time0<br><br>        <span class="hljs-comment"># 打印log信息</span><br>        <span class="hljs-keyword">if</span> i % args.i_print == <span class="hljs-number">0</span>:<br>            tqdm.write(<span class="hljs-string">f&quot;[Train] Iter:<span class="hljs-subst">&#123;i&#125;</span> Loss: <span class="hljs-subst">&#123;loss.item()&#125;</span> PSNR:<span class="hljs-subst">&#123;psnr_fine.item()&#125;</span> Time: <span class="hljs-subst">&#123;dt&#125;</span>&quot;</span>)<br><br>        global_setp += <span class="hljs-number">1</span><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>        torch.set_default_tensor_type(<span class="hljs-string">&quot;torch.cuda.FloatTensor&quot;</span>)<br>    train()<br><br></code></pre></td></tr></table></figure><h4 id="render.py">render.py</h4><p><em>render_path：</em>调用<em>render</em>函数，将结果保存为图像(一般只进行渲染的时候会用到)</p><p><em>render：</em>渲染前的准备工作以及渲染，调用<em>batchify_rays</em></p><p><em>batchify_rays：</em>光线分批次chunk,调用<em>render_rays</em>,返回全部神经网络计算完经过raw2outputs的结果(<code>all_ret</code>)</p><p><em>render_rays：</em>按批次大小chunk渲染光线，通过调用<em>network_query_fn</em>使用神经网络，得到神经网络的输出，再调用<em>raw2outputs返回一个chunk神经网络计算完经过raw2outputs的结果</em></p><p><em>raw2outputs：</em>神经网络的原始数据数据转化为具体的rgb、depth等输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> imageio<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> rays <span class="hljs-keyword">import</span> get_rays,ndc_rays<br><span class="hljs-keyword">from</span> sample_pdf <span class="hljs-keyword">import</span> sample_pdf<br><br>DEBUG = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to8b</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">255</span>*np.clip(x,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)).astype(np.uint8)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">raw2outputs</span>(<span class="hljs-params">raw,z_vals,rays_d,raw_noise_std=<span class="hljs-number">0</span>,white_bkgd=<span class="hljs-literal">False</span>,pytest=<span class="hljs-literal">False</span></span>):<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    由原始数据计算 rgb_map, disp_map, acc_map, weights, depth_map</span><br><span class="hljs-string">    :param raw: 神经网络的输出值  batch_size x 4 [R G B , alpha]</span><br><span class="hljs-string">    :param z_vals: 采样点</span><br><span class="hljs-string">    :param rays_d: 光线的方向</span><br><span class="hljs-string">    :param raw_noise_std: 噪声</span><br><span class="hljs-string">    :param white_bkgd: bool 是否随机背景</span><br><span class="hljs-string">    :param pytest: todo 不知道</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 等同于def raw2rgb(raw,dist,act_fn=F.relu):&#123;</span><br>    <span class="hljs-comment">#   return 1-torch.exp(-F.relu(raw)*dist)</span><br>    <span class="hljs-comment"># &#125;</span><br><br>    <span class="hljs-comment"># 返回表示alpha的张量 act_fn 默认情况下为F.relu()函数</span><br>    <span class="hljs-comment"># 看公式3</span><br><br>    raw2alpha = <span class="hljs-keyword">lambda</span> raw, dists, act_fn=F.relu: <span class="hljs-number">1.</span> - torch.exp(-act_fn(raw) * dists)<br><br>    <span class="hljs-comment"># 计算光线上两点之间的距离 错项做差  1024 x 63</span><br>    dists = z_vals[...,<span class="hljs-number">1</span>:]-z_vals[...,:-<span class="hljs-number">1</span>]<br>    <span class="hljs-comment">#  1024 x 63 --&gt; 1024 x 64 把 1024 x 1 的 1e10张量拼接到 dists张量最后</span><br>    <span class="hljs-comment">#  表示最后一个点到第一个点的距离为无穷远</span><br>    dists = torch.cat([dists, torch.Tensor([<span class="hljs-number">1e10</span>]).expand(dists[..., :<span class="hljs-number">1</span>].shape)], -<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">#  计算相邻两点间的距离 todo 再乘以dist纠正？</span><br>    dists = dists * torch.norm(rays_d[...,<span class="hljs-literal">None</span>,:],dim=-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># raw 前三列代表rgb值 用sigmod函数将rgb值映射到0~1之间</span><br>    rgb = torch.sigmoid(raw[...,:<span class="hljs-number">3</span>])<br><br>    <span class="hljs-comment"># 制造噪声</span><br>    noise = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">if</span> raw_noise_std&gt;<span class="hljs-number">0</span>:<br>        noise = torch.randn(raw[...,<span class="hljs-number">3</span>].shape)*raw_noise_std<br>        <span class="hljs-keyword">if</span> pytest:<br>            np.random.seed(<span class="hljs-number">0</span>)<br>            <span class="hljs-comment"># todo 不知道什么意思</span><br>            noise = np.random.rand(*<span class="hljs-built_in">list</span>(raw[...,<span class="hljs-number">3</span>].shape))*raw_noise_std<br>            noise = torch.Tensor(noise)<br><br>    <span class="hljs-comment"># 计算透明度</span><br>    alpha = raw2alpha(raw[...,<span class="hljs-number">3</span>]+noise,dists)<br><br>    <span class="hljs-comment"># 计算权重T 累积透过率 表面透明度的衰减</span><br>    <span class="hljs-comment"># torch.cumprod 返回尺寸为 dim 的 input 元素的累积积。</span><br>    <span class="hljs-comment"># ones 作为第一列 cat (ones,alpha) --&gt; 1024 x 65  cumpord --&gt; 1024 x 65 --&gt;[:,:-1]  1024 x 64</span><br>    weights = alpha * torch.cumprod(torch.cat([torch.ones((alpha.shape[<span class="hljs-number">0</span>],<span class="hljs-number">1</span>)),<span class="hljs-number">1.0</span>-alpha+<span class="hljs-number">1e-10</span>],-<span class="hljs-number">1</span>),-<span class="hljs-number">1</span>)[:,:-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-comment"># 计算公式3  C(r) 预期颜色</span><br>    rgb_map = torch.<span class="hljs-built_in">sum</span>(weights[...,<span class="hljs-literal">None</span>]*rgb,-<span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># 计算深度图</span><br>    depth_map = torch.<span class="hljs-built_in">sum</span>(weights*z_vals,-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 视差图</span><br>    <span class="hljs-comment"># Disparity map is inverse depth.</span><br>    disp_map = <span class="hljs-number">1.</span> / torch.<span class="hljs-built_in">max</span>(<span class="hljs-number">1e-10</span> * torch.ones_like(depth_map), depth_map / torch.<span class="hljs-built_in">sum</span>(weights, -<span class="hljs-number">1</span>))<br><br><br>    <span class="hljs-comment"># 权重和</span><br>    <span class="hljs-comment"># 这个值仅做了输出用，后续并无使用</span><br>    acc_map = torch.<span class="hljs-built_in">sum</span>(weights, -<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">if</span> white_bkgd:<br>        rgb_map = rgb_map + (<span class="hljs-number">1.</span> - acc_map[..., <span class="hljs-literal">None</span>])<br><br>    <span class="hljs-keyword">return</span> rgb_map, disp_map, acc_map, weights, depth_map<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">batchify_rays</span>(<span class="hljs-params">rays_flat,chunk=<span class="hljs-number">1024</span>*<span class="hljs-number">32</span>,**kwargs</span>):<br><br>    all_ret=&#123;&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,rays_flat.shape[<span class="hljs-number">0</span>],chunk):<br>        <span class="hljs-comment"># ret 一个chunksize量的光线</span><br>        <span class="hljs-comment"># rgb_fine_map, disp_fine_map, acc_fine_map, rgb_coarse_map, disp_coarse_map, acc_coarse_map, z_std</span><br>        <span class="hljs-comment"># chunk x 3 chunk x 1 chunk x 1 chunk x 3 chunk x 3 chunk x 1 chunk x 1</span><br>        ret = render_rays(rays_flat[i:i+chunk,:],**kwargs)<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> ret:<br>            <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> all_ret:<br>                all_ret[k] = []<br>            all_ret[k].append(ret[k])<br>    all_ret = &#123;k:torch.cat(all_ret[k],<span class="hljs-number">0</span>)<span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> all_ret&#125;<br>    <span class="hljs-comment"># 所有的rays_flat的量 / chunsize 组 ret 拼接到一起</span><br>    <span class="hljs-comment"># 在all_ret中用 i 提取 第 i 组 大小为 chunsize 的ret</span><br>    <span class="hljs-keyword">return</span> all_ret<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_rays</span>(<span class="hljs-params">ray_batch,</span><br><span class="hljs-params">                network_fn,</span><br><span class="hljs-params">                network_query_fn,</span><br><span class="hljs-params">                N_coarse_samples,</span><br><span class="hljs-params">                retraw=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">                lindisp=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">                perturb=<span class="hljs-number">0</span>,</span><br><span class="hljs-params">                N_fine_samples=<span class="hljs-number">0</span>,</span><br><span class="hljs-params">                network_fine=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                white_bkgd=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">                raw_noise_std=<span class="hljs-number">0</span>,</span><br><span class="hljs-params">                verbose=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">                pytest=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    输入光线</span><br><span class="hljs-string">    经过神经网络--&gt;raw</span><br><span class="hljs-string">    raw 经过raw2outputs函数 --&gt; rgb_map, disp_map, acc_map, weights, depth_map</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param ray_batch: 光线</span><br><span class="hljs-string">    :param network_fn: 放神经网络的函数</span><br><span class="hljs-string">    :param network_query_fn:</span><br><span class="hljs-string">    :param N_coarse_samples: 粗网格采样点个数64</span><br><span class="hljs-string">    :param retraw:</span><br><span class="hljs-string">    :param lindisp: 间隔</span><br><span class="hljs-string">    :param perturb:</span><br><span class="hljs-string">    :param N_fine_samples: 精细网格采样点个数</span><br><span class="hljs-string">    :param network_fine:  精细神经网络</span><br><span class="hljs-string">    :param white_bkgd: 白色背景</span><br><span class="hljs-string">    :param raw_noise_std:</span><br><span class="hljs-string">    :param verbose:</span><br><span class="hljs-string">    :param pytest:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># batch_size 1024</span><br>    N_rays = ray_batch.shape[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># rays_o N_rays * 3</span><br>    <span class="hljs-comment"># rays_d N_rays * 3</span><br>    rays_o, rays_d = ray_batch[:, <span class="hljs-number">0</span>:<span class="hljs-number">3</span>], ray_batch[:, <span class="hljs-number">3</span>:<span class="hljs-number">6</span>]<br><br>    <span class="hljs-comment"># 视角的单位向量</span><br>    <span class="hljs-comment"># 1024 x 3</span><br>    viewsdirs = ray_batch[:, -<span class="hljs-number">3</span>:] <span class="hljs-keyword">if</span> ray_batch.shape[-<span class="hljs-number">1</span>] &gt; <span class="hljs-number">8</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-comment"># 1024 x 1 x 2  near far</span><br>    bounds = torch.reshape(ray_batch[..., <span class="hljs-number">6</span>:<span class="hljs-number">8</span>], [-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>])<br>    near, far = bounds[..., <span class="hljs-number">0</span>], bounds[..., <span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 光线中的采样点</span><br>    t_vals = torch.linspace(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, steps=N_coarse_samples)<br><br>    <span class="hljs-comment"># lindisp</span><br>    <span class="hljs-comment"># sampling linearly in disparity rather than depth</span><br>    <span class="hljs-comment"># 以视差而非深度进行线性采样</span><br>    <span class="hljs-comment"># z_vals 是t_vals中插值采样出来的结果 可以看作粗采样，后面的精细采样基于z_vals</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> lindisp:<br>        z_vals = near * (<span class="hljs-number">1.0</span> - t_vals) + far * (t_vals)<br>    <span class="hljs-keyword">else</span>:<br>        z_vals = <span class="hljs-number">1.</span> / (<span class="hljs-number">1.0</span> / near * (<span class="hljs-number">1.0</span> - t_vals) + <span class="hljs-number">1.0</span> / far * (t_vals))<br>    z_vals = z_vals.expand([N_rays, N_coarse_samples])<br><br>    <span class="hljs-comment"># todo 不懂</span><br>    <span class="hljs-keyword">if</span> perturb &gt; <span class="hljs-number">0.</span>:<br>        <span class="hljs-comment"># get intervals between samples，64个采样点的中点</span><br>        mids = <span class="hljs-number">.5</span> * (z_vals[..., <span class="hljs-number">1</span>:] + z_vals[..., :-<span class="hljs-number">1</span>])<br>        upper = torch.cat([mids, z_vals[..., -<span class="hljs-number">1</span>:]], -<span class="hljs-number">1</span>)<br>        lower = torch.cat([z_vals[..., :<span class="hljs-number">1</span>], mids], -<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># stratified samples in those intervals</span><br>        t_rand = torch.rand(z_vals.shape)<br><br>        <span class="hljs-comment"># Pytest, overwrite u with numpy&#x27;s fixed random numbers</span><br>        <span class="hljs-keyword">if</span> pytest:<br>            np.random.seed(<span class="hljs-number">0</span>)<br>            t_rand = np.random.rand(*<span class="hljs-built_in">list</span>(z_vals.shape))<br>            t_rand = torch.Tensor(t_rand)<br>        <span class="hljs-comment"># [bs,64] 加上随机的噪声</span><br><br>        z_vals = lower + (upper - lower) * t_rand<br><br>    <span class="hljs-comment"># 计算光线上的采样点的具体情况 采样点的坐标：出发点+距离*方向</span><br>    <span class="hljs-comment">#  1024 |  1 x 3 * 64 x 1 --&gt; 64 x 3 --&gt; 1024 x 64 x 3</span><br>    pts = rays_o[..., <span class="hljs-literal">None</span>, :] + rays_d[..., <span class="hljs-literal">None</span>, :] * z_vals[...,:,<span class="hljs-literal">None</span>]<br><br>    <span class="hljs-comment"># 1024 x 64 x 3</span><br>    <span class="hljs-comment"># 把pts带入到粗网络中计算</span><br>    raw = network_query_fn(pts, viewsdirs, network_fn)<br><br>    <span class="hljs-comment"># 粗网络计算结果</span><br>    rgb_map, disp_map, acc_map, weights, depth_map = raw2outputs(raw, z_vals, rays_d, raw_noise_std, white_bkgd,<br>                                                                 pytest=pytest)<br>    <span class="hljs-comment">#精细网络</span><br>    <span class="hljs-keyword">if</span> N_fine_samples&gt;<span class="hljs-number">0</span>:<br>        <span class="hljs-comment">#先保存粗网络的计算结果</span><br>        rgb_coarse_map, disp_coarse_map, acc_coarse_map = rgb_map, disp_map, acc_map<br>        <span class="hljs-comment"># 从粗采样的64个点中计算精采样的64个点</span><br>        z_fine_vals_mid = <span class="hljs-number">0.5</span>*(z_vals[...,<span class="hljs-number">1</span>:]+z_vals[...,:-<span class="hljs-number">1</span>])<br>        <span class="hljs-comment"># todo 精采样的点在粗采样的区域 按概率密度精采样 Hierarchical Sampling 别的采样的方法，更高效的采样方法？</span><br>        z_fine_vals = sample_pdf(z_fine_vals_mid,weights[...,<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>],N_fine_samples,det=(perturb==<span class="hljs-number">0.0</span>),pytest=pytest)<br>        <span class="hljs-comment"># z_fine_vals 不计算梯度</span><br>        z_fine_vals = z_fine_vals.detach()<br>        <span class="hljs-comment"># 粗采样点和精细采样点合并 共128个采样点 从大到小排序</span><br>        z_fine_vals,_ = torch.sort(torch.cat([z_vals,z_fine_vals],-<span class="hljs-number">1</span>),-<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 计算采样点在光纤中具体的值 pts_fine 精采样的采样点的值</span><br>        pts_fine = rays_o[...,<span class="hljs-literal">None</span>,:]+rays_d[...,<span class="hljs-literal">None</span>,:]*z_fine_vals[...,:,<span class="hljs-literal">None</span>]<br>        <span class="hljs-comment"># 精细神经网络</span><br>        run_fine_fn = network_fn <span class="hljs-keyword">if</span> network_fine <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> network_fine<br><br>        <span class="hljs-comment">#代入神经网络中计算</span><br>        raw_fine = network_query_fn(pts_fine,viewsdirs,run_fine_fn)<br>        <span class="hljs-comment"># 计算精细神经网络的 rgb_fine_map, disp_fine_map, acc_fine_map, weights_fine, depth_fine_map</span><br>        rgb_fine_map, disp_fine_map, acc_fine_map, weights_fine, depth_fine_map, = raw2outputs(raw_fine,z_fine_vals,rays_d,raw_noise_std,white_bkgd,pytest=pytest)<br><br>        <span class="hljs-comment">#存储</span><br>        ret = &#123;<span class="hljs-string">&#x27;rgb_fine_map&#x27;</span>:rgb_fine_map,<span class="hljs-string">&#x27;disp_fine_map&#x27;</span>:disp_fine_map,<span class="hljs-string">&#x27;acc_fine_map&#x27;</span>:acc_fine_map&#125;<br><br>        <span class="hljs-keyword">if</span> retraw:<br>            <span class="hljs-comment">#存储精细网络的输出</span><br>            ret[<span class="hljs-string">&#x27;raw_fine&#x27;</span>]=raw_fine<br>        <span class="hljs-keyword">if</span> N_fine_samples&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-comment">#如果有精细网络，也要存粗网络的值，不然只有精细网络的值</span><br>            ret[<span class="hljs-string">&#x27;rgb_coarse_map&#x27;</span>]=rgb_coarse_map<br>            ret[<span class="hljs-string">&#x27;disp_coarse_map&#x27;</span>] = disp_coarse_map<br>            ret[<span class="hljs-string">&#x27;acc_coarse_map&#x27;</span>] = acc_coarse_map<br>            ret[<span class="hljs-string">&#x27;z_std&#x27;</span>] = torch.std(z_fine_vals,dim=-<span class="hljs-number">1</span>,unbiased=<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-comment">#检测是否有异常值</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> ret:<br>        <span class="hljs-keyword">if</span>(torch.isnan(ret[k]).<span class="hljs-built_in">any</span>())<span class="hljs-keyword">or</span> torch.isinf(ret[k].<span class="hljs-built_in">any</span>()) <span class="hljs-keyword">and</span> DEBUG:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;! [Numerical Error] <span class="hljs-subst">&#123;k&#125;</span> contains nan or inf.&quot;</span>)<br><br>    <span class="hljs-keyword">return</span> ret<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">H, W, K,</span><br><span class="hljs-params">           chunk=<span class="hljs-number">1024</span>, <span class="hljs-comment">#原来的代码里默认值是1024*32 但光线才19200个 所以chunk改小一点</span></span><br><span class="hljs-params">           rays=<span class="hljs-literal">None</span>, c2w=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">           ndc=<span class="hljs-literal">True</span>,</span><br><span class="hljs-params">           near=<span class="hljs-number">0.0</span>,far=<span class="hljs-number">1.0</span>,</span><br><span class="hljs-params">           use_viewdirs=<span class="hljs-literal">False</span>,</span><br><span class="hljs-params">           c2w_staticcam=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">           **kwargs</span>):<br>    <span class="hljs-keyword">if</span> c2w <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 根据c2w矩阵计算光线的起点和方向</span><br>        rays_o,rays_d = get_rays(H,W,K,c2w)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 否则默认光线为输入的光线 一般不会用到</span><br>        rays_o,rays_d = rays<br><br>    <span class="hljs-keyword">if</span> use_viewdirs:<br>        <span class="hljs-comment"># views方向和光线方向一直 可以认为是从theta、phi转化而来的</span><br>        viewsdirs = rays_d<br>        <span class="hljs-keyword">if</span> c2w_staticcam <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            rays_o,rays_d = get_rays(H,W,K,c2w_staticcam)<br>        <span class="hljs-comment"># 光线方向向量单位化</span><br>        viewsdirs = viewsdirs/torch.norm(viewsdirs,dim=-<span class="hljs-number">1</span>,keepdim=<span class="hljs-literal">True</span>)<br>        viewsdirs = torch.reshape(viewsdirs,[-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]).<span class="hljs-built_in">float</span>()<br><br>    sh = rays_d.shape<br>    <span class="hljs-keyword">if</span> ndc:<br>        <span class="hljs-comment"># use normalized device coordinates</span><br>        <span class="hljs-comment"># Shift ray origins to near plane</span><br>        <span class="hljs-comment"># focal设为1 计算rays_</span><br>        rays_o,rays_d = ndc_rays(H,W,K[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],<span class="hljs-number">1.0</span>,rays_o,rays_d)<br><br>    <span class="hljs-comment"># 创建batch大小的光线组</span><br>    <span class="hljs-comment"># batch_size x 3</span><br>    rays_o = torch.reshape(rays_o,[-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]).<span class="hljs-built_in">float</span>()<br>    rays_d = torch.reshape(rays_d,[-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]).<span class="hljs-built_in">float</span>()<br>    <span class="hljs-comment"># batch_szie x 1</span><br>    near , far = near * torch.ones_like(rays_d[...,:<span class="hljs-number">1</span>]) , far * torch.ones_like(rays_d[...,:<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># batch_size x (3+3+1+1) = batch_size x 8</span><br>    rays = torch.cat([rays_o,rays_d,near,far],-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> use_viewdirs:<br>        <span class="hljs-comment"># batch_size * (3+3+1+1+3)</span><br>        rays =  torch.cat([rays,viewsdirs],-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 渲染</span><br>    <span class="hljs-comment"># 再分一个小批次，防止爆显存</span><br>    <span class="hljs-comment"># rgb_fine_map, disp_fine_map, acc_fine_map, rgb_coarse_map, disp_coarse_map, acc_coarse_map, z_std</span><br>    all_ret = batchify_rays(rays,chunk,**kwargs)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> all_ret:<br>        <span class="hljs-comment"># rgb_fine_map, disp_fine_map, acc_fine_map, rgb_coarse_map, disp_coarse_map, acc_coarse_map, z_std</span><br>        <span class="hljs-comment"># 都从</span><br>        <span class="hljs-comment"># [120 160] [3] --&gt; [120,160,3]</span><br>        k_sh = <span class="hljs-built_in">list</span>(sh[:-<span class="hljs-number">1</span>])+<span class="hljs-built_in">list</span>(all_ret[k].shape[<span class="hljs-number">1</span>:])<br>        <span class="hljs-comment"># [19200 3] --&gt; [120 160 3]</span><br>        all_ret[k]=torch.reshape(all_ret[k],k_sh)<br><br>    <span class="hljs-comment"># 所有的输出存到一个字典里</span><br>    k_extract = [<span class="hljs-string">&#x27;rgb_fine_map&#x27;</span>,<span class="hljs-string">&#x27;disp_fine_map&#x27;</span>,<span class="hljs-string">&#x27;acc_fine_map&#x27;</span>]<br>    ret_list = [all_ret[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> k_extract]<br>    ret_dict = &#123;k:all_ret[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> all_ret <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> k_extract&#125;<br>    <span class="hljs-comment"># 返回的list 前三个是 [&#x27;rgb_fine_map&#x27;,&#x27;disp_fine_map&#x27;,&#x27;acc_fine_map&#x27;]</span><br>    <span class="hljs-comment"># 后四个是 [rgb_corse_map disp_corse_map acc_corse_map z_std]</span><br>    <span class="hljs-keyword">return</span> ret_list+[ret_dict]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_path</span>(<span class="hljs-params">render_poses,hwf,K,chunk,render_kwargs,gt_images=<span class="hljs-literal">None</span>,savedir=<span class="hljs-literal">None</span>,render_factor=<span class="hljs-number">0</span></span>):<br>   H, W, focal = hwf<br><br>   <span class="hljs-keyword">if</span> render_factor!=<span class="hljs-number">0</span>:<br>       <span class="hljs-comment">#下采样加速</span><br>       H = H //render_factor<br>       W = W //render_factor<br>       focal = focal / render_factor<br><br>   rgbs = []<br>   disps = []<br><br>   t = time.time()<br>   <span class="hljs-keyword">for</span> i, c2w <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tqdm(render_poses)):<br>       <span class="hljs-built_in">print</span>(i,time.time()-t)<br>       t = time.time()<br>       <span class="hljs-comment"># rgb, disp, acc, _ = render(H,W,K,chunk=chunk,c)</span><br>       rgb, disp, acc, _ = render(H, W, K, chunk=chunk, c2w=c2w[:<span class="hljs-number">3</span>, :<span class="hljs-number">4</span>], **render_kwargs)<br>       rgbs.append(rgb.cpu().numpy())<br>       disps.append(disp.cpu().numpy())<br>       <span class="hljs-keyword">if</span> i==<span class="hljs-number">0</span>:<br>           <span class="hljs-built_in">print</span>(rgb.shape,disp.shape)<br><br>       <span class="hljs-keyword">if</span> savedir <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>           rgb8 = to8b(rgbs[-<span class="hljs-number">1</span>])<br>           filename = os.path.join(savedir,<span class="hljs-string">&#x27;&#123;:03d&#125;.png&#x27;</span>.<span class="hljs-built_in">format</span>(i))<br>           imageio.imwrite(filename,rgb8)<br><br>   rgbs = np.stack(rgbs,<span class="hljs-number">0</span>)<br>   disps = np.stack(disps,<span class="hljs-number">0</span>)<br><br>   <span class="hljs-keyword">return</span> rgbs,disps<br><br></code></pre></td></tr></table></figure><h4 id="nerf_model.py">NeRF_model.py</h4><p>创建NeRF神经网络模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NeRF</span>(nn.Module):<br><br>    <span class="hljs-comment"># https://img-blog.csdnimg.cn/0380480cfc524f5e8d2df0bf19c9468a.png</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,D=<span class="hljs-number">8</span>,W=<span class="hljs-number">256</span>,input_channel=<span class="hljs-number">3</span>,input_views_channel=<span class="hljs-number">3</span>,output_channel=<span class="hljs-number">4</span>,skips=[<span class="hljs-number">4</span>],use_viewdirs=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        D: 深度，多少层网络</span><br><span class="hljs-string">        W: 网络内的channel 宽度</span><br><span class="hljs-string">        input_ch: xyz的宽度</span><br><span class="hljs-string">        input_ch_views: direction的宽度</span><br><span class="hljs-string">        output_ch: 这个参数尽在 use_viewdirs=False的时候会被使用</span><br><span class="hljs-string">        skips: 类似resnet的残差连接，表明在第几层进行连接</span><br><span class="hljs-string">        use_viewdirs:use full 5D input instead of 3D  对 x,y,z ,theta , phi 都输入，都编码</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>(NeRF,self).__init__()<br>        <span class="hljs-comment"># 网络的深度(层数) 一共8层</span><br>        self.D = D<br>        <span class="hljs-comment"># 网络的宽度</span><br>        self.W = W<br>        <span class="hljs-comment"># x y z 位置</span><br>        self.input_channel = input_channel<br>        <span class="hljs-comment"># theta phi 角度</span><br>        self.input_views_channel = input_views_channel<br>        <span class="hljs-comment"># 在4层有跳跃连接</span><br>        self.skips = skips<br>        <span class="hljs-comment">#</span><br>        self.use_viewdirs = use_viewdirs<br><br>        <span class="hljs-comment">#构建MLP</span><br>        <span class="hljs-comment"># todo 这个网络的构造还要再去看一下</span><br>        <span class="hljs-comment"># 看完了</span><br>        self.pts_linears = nn.ModuleList(<br>            [nn.Linear(input_channel,W)]+[nn.Linear(W,W) <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.skips <span class="hljs-keyword">else</span> nn.Linear(W+input_channel,W) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(D-<span class="hljs-number">1</span>)]<br>        )<br><br>        self.views_linears = nn.ModuleList(<br>            [nn.Linear(input_views_channel+W,W//<span class="hljs-number">2</span>)]<br>        )<br><br>        <span class="hljs-keyword">if</span> use_viewdirs:<br>            <span class="hljs-comment"># 特征 256 in 256 out</span><br>            self.feature_linear = nn.Linear(W,W)<br>            <span class="hljs-comment"># 透明度 256 in 1 out</span><br>            self.alpha_linear = nn.Linear(W,<span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># rgb 128 in 3 out</span><br>            self.rgb_linear = nn.Linear(W//<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>        <span class="hljs-keyword">else</span>:<br>            self.output_linear = nn.Linear(W,output_channel)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        这段代码实现了一个神经网络模型的前向传播过程，用于对输入数据进行处理并输出预测结果。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        该模型接受一个大小为 x 的输入张量，其中 input_channel 表示输入点云的通道数，input_views_channel 表示输入视角的通道数。</span><br><span class="hljs-string">        首先，使用 torch.split 函数将输入张量分为两部分，分别表示点云和视角。其中 dim=-1 表示沿着最后一个维度进行分割。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        接下来，将点云数据输入到一个由多个全连接层组成的神经网络中。</span><br><span class="hljs-string">        在每一层中，将先将点云数据传递到一个全连接层 self.pts_linears[i] 中，然后使用 ReLU 激活函数 F.relu() 对其进行非线性变换。</span><br><span class="hljs-string">        如果当前层的索引值在 self.skips 集合中，则会在经过非线性变换之后将原始的输入点云数据 input_pts 与变换后的结果进行拼接。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        如果模型使用视角数据，则将该数据与点云数据经过一系列的全连接层和非线性激活函数进行处理。</span><br><span class="hljs-string">        具体来说，将点云数据 h 输入到一个全连接层 self.alpha_linear 和 self.feature_linear 中，得到相应的特征向量 alpha 和 feature。</span><br><span class="hljs-string">        然后将特征向量和视角数据 input_views 进行拼接，并经过多个全连接层和非线性激活函数的变换，最终得到预测的输出结果。</span><br><span class="hljs-string">        如果模型不使用视角数据，则直接将点云数据经过一系列的全连接层和非线性激活函数处理，得到预测的输出结果。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        最后，将输出结果 outputs 返回。</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        这段代码使用了 PyTorch 中的 torch.split() 函数将输入张量 x 按照指定的维度进行切分。</span><br><span class="hljs-string">        具体来说，x 被切分成两部分，分别被赋值给变量 input_pts 和 input_views。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        函数的第一个参数 x 是要被切分的张量。第二个参数 [63, 27] 是一个长度为 2 的列表，用于指定切分后每个小张量在切分维度上的大小。</span><br><span class="hljs-string">        在这个例子中，dim=-1 表示沿着最后一个维度进行切分，也就是将 x 张量在最后一个维度上切分成两个小张量，</span><br><span class="hljs-string">        其中 input_pts 张量大小为 63，在最后一个维度上的索引范围为 0-62，而 input_views 张量大小为 27，在最后一个维度上的索引范围为 63-89。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        因此，在这段代码中，input_pts 和 input_views 分别表示输入张量 x 的前 63 个元素和后 27 个元素，可以用于分别处理点云和视角数据。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        input_pts,input_views = torch.split(x,[self.input_channel,self.input_views_channel],dim=-<span class="hljs-number">1</span>)<br><br>        h = input_pts<br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        在这段代码中，变量 l 是一个占位符，用于表示当前迭代的循环层。</span><br><span class="hljs-string">        由于在这个循环中，只使用了 i 变量，而没有使用 l 变量，所以可以省略它而不影响代码的功能。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        具体来说，在这段代码中，enumerate(self.pts_linears) 返回了一个由 (index, element) 组成的元组序列，</span><br><span class="hljs-string">        其中 index 表示当前元素在序列中的索引位置，element 表示序列中的当前元素。</span><br><span class="hljs-string">        在每次迭代中，变量 i 被赋值为当前元素的索引位置，而变量 l 被赋值为当前元素。</span><br><span class="hljs-string">        但是由于这段代码中没有使用 l 变量，因此在代码实现中可以将其省略掉，只保留 i 变量的使用。</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i ,l <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.pts_linears):<br>            h = self.pts_linears[i](h)<br>            h = F.relu(h)<br><br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> self.skips:<br>                h = torch.cat([input_pts,h],-<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> self.use_viewdirs:<br>            alpha = self.alpha_linear(h)<br>            feature = self.feature_linear(h)<br>            h=torch.cat([feature,input_views],-<span class="hljs-number">1</span>)<br><br>            <span class="hljs-keyword">for</span> i,l <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.views_linears):<br>                h = self.views_linears[i](h)<br>                h = F.relu(h)<br><br>            rgb = self.rgb_linear(h)<br>            outputs = torch.cat([rgb,alpha],-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            outputs = self.output_linear(h)<br><br><br>        <span class="hljs-keyword">return</span> outputs<br></code></pre></td></tr></table></figure><h4 id="rays.py">rays.py</h4><p><em>ndc_rays：</em>看不懂</p><p><em>get_rays：</em>将<code>H、W、K、focal</code>转为<code>rays_o、rays_d</code></p><p><em>get_rays_np：</em>将<code>H、W、K、focal</code>转为<code>rays_o、rays_d</code>，<code>numpy</code>库实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ndc_rays</span>(<span class="hljs-params">H,W,focal,near,rays_o,rays_d</span>):<br>    <span class="hljs-comment">#这个函数没有好好理解</span><br>    <span class="hljs-comment"># Shift ray origins to near plane</span><br>    t = -(near + rays_o[..., <span class="hljs-number">2</span>]) / rays_d[..., <span class="hljs-number">2</span>]<br>    rays_o = rays_o + t[..., <span class="hljs-literal">None</span>] * rays_d<br><br>    <span class="hljs-comment"># Projection</span><br>    o0 = -<span class="hljs-number">1.</span> / (W / (<span class="hljs-number">2.</span> * focal)) * rays_o[..., <span class="hljs-number">0</span>] / rays_o[..., <span class="hljs-number">2</span>]<br>    o1 = -<span class="hljs-number">1.</span> / (H / (<span class="hljs-number">2.</span> * focal)) * rays_o[..., <span class="hljs-number">1</span>] / rays_o[..., <span class="hljs-number">2</span>]<br>    o2 = <span class="hljs-number">1.</span> + <span class="hljs-number">2.</span> * near / rays_o[..., <span class="hljs-number">2</span>]<br><br>    d0 = -<span class="hljs-number">1.</span> / (W / (<span class="hljs-number">2.</span> * focal)) * (rays_d[..., <span class="hljs-number">0</span>] / rays_d[..., <span class="hljs-number">2</span>] - rays_o[..., <span class="hljs-number">0</span>] / rays_o[..., <span class="hljs-number">2</span>])<br>    d1 = -<span class="hljs-number">1.</span> / (H / (<span class="hljs-number">2.</span> * focal)) * (rays_d[..., <span class="hljs-number">1</span>] / rays_d[..., <span class="hljs-number">2</span>] - rays_o[..., <span class="hljs-number">1</span>] / rays_o[..., <span class="hljs-number">2</span>])<br>    d2 = -<span class="hljs-number">2.</span> * near / rays_o[..., <span class="hljs-number">2</span>]<br><br>    rays_o = torch.stack([o0, o1, o2], -<span class="hljs-number">1</span>)<br>    rays_d = torch.stack([d0, d1, d2], -<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> rays_o, rays_d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_rays</span>(<span class="hljs-params">H,W,K,c2w</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param H: 高</span><br><span class="hljs-string">    :param W: 宽</span><br><span class="hljs-string">    :param K: 内参矩阵</span><br><span class="hljs-string">    :param c2w: 相机坐标系到世界坐标系转换矩阵， 相机位姿</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    torch.linspace(start, end, steps=100, out=None) → Tensor</span><br><span class="hljs-string">    返回一个1维张量，包含在区间start和end上均匀间隔的step个点。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    i,j = torch.meshgrid(torch.linspace(<span class="hljs-number">0</span>,W-<span class="hljs-number">1</span>,W),torch.linspace(<span class="hljs-number">0</span>,H-<span class="hljs-number">1</span>,H),indexing=<span class="hljs-string">&#x27;ij&#x27;</span>)<br><br>    i = i.t()<br>    j = j.t()<br>    <span class="hljs-comment"># [378,504,3]</span><br>    <span class="hljs-comment"># 射线方向的计算公式</span><br>    dirs = torch.stack([(i-K[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])/K[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],-(j-K[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])/K[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],-torch.ones_like(i)],-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># dirs[...,np.newaxis,:]  378 x 504 x 1 x 3</span><br>    <span class="hljs-comment"># c2w[:3,:3] 3 x 3</span><br>    <span class="hljs-comment"># dirs[...,np.newaxis,:]*c2w[:3,:3] 378 x 504 x 3 x 3</span><br>    <span class="hljs-comment"># 3x3 按列压缩 为 rays_d 378 x 504 x 3</span><br>    rays_d = torch.<span class="hljs-built_in">sum</span>(dirs[...,np.newaxis,:]*c2w[:<span class="hljs-number">3</span>,:<span class="hljs-number">3</span>],-<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 3 -&gt; 378 x 504 x 3</span><br>    rays_o = c2w[:<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>].expand(rays_d.shape)<br>    <span class="hljs-keyword">return</span> rays_o,rays_d<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_rays_np</span>(<span class="hljs-params">H,W,K,c2w</span>):<br>    <span class="hljs-comment"># get_rays方法的numpy实现</span><br>    i,j = np.meshgrid(np.arange(W,dtype=np.float32),np.arange(H,dtype=np.float32),indexing=<span class="hljs-string">&#x27;xy&#x27;</span>)<br><br>    dirs = np.stack([(i-K[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>])/K[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],-(j-K[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])/K[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],-np.ones_like(i)],-<span class="hljs-number">1</span>)<br>    rays_d = np.<span class="hljs-built_in">sum</span>(dirs[...,np.newaxis,:]*c2w[:<span class="hljs-number">3</span>,:<span class="hljs-number">3</span>],-<span class="hljs-number">1</span>)<br>    rays_o = np.broadcast_to(c2w[:<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>],np.shape(rays_d))<br>    <span class="hljs-keyword">return</span> rays_o,rays_d<br></code></pre></td></tr></table></figure><h4 id="embed.py">embed.py</h4><p>对输入的<span class="math inline">\(x,y,z,\theta,\phi\)</span>进行高频位置编码</p><p><span class="math inline">\(x\quad y\quad z : 3 \times 2 \times 10 +3 = 63\)</span></p><p><span class="math inline">\(\theta \quad \phi: 3 \times 2 \times 4 +3 = 27\)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-comment"># 结合神经网络结构的图来看</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Embedder</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,**kwargs</span>):<br>        self.kwargs = kwargs<br>        self.create_embedding_fn()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_embedding_fn</span>(<span class="hljs-params">self</span>):<br>        embed_fns = []<br>        d = self.kwargs[<span class="hljs-string">&#x27;input_dims&#x27;</span>]<br>        out_dim = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> self.kwargs[<span class="hljs-string">&#x27;include_input&#x27;</span>]:<br>        <span class="hljs-comment"># 包含输入的话 60+3 就是加的这个3</span><br>            embed_fns.append(<span class="hljs-keyword">lambda</span> x:x)<br>            out_dim +=d<br><br>        <span class="hljs-comment"># 2 ** 0 ~ 2 ** 9</span><br>        max_freq = self.kwargs[<span class="hljs-string">&#x27;max_freq_log2&#x27;</span>]<br>        N_freqs = self.kwargs[<span class="hljs-string">&#x27;num_freqs&#x27;</span>]<br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        线性编码是将位置坐标与一个频率向量进行点积得到的，其中频率向量中的每个元素都是等间距的。</span><br><span class="hljs-string">        例如，在一维情况下，频率向量可以是 [1, 2, 3, ..., N]，其中 N 是编码的维度。</span><br><span class="hljs-string">        这种线性编码在表示位置信息时，对不同尺度的特征没有明显的区分。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        对数编码是将位置坐标与一个频率向量进行点积得到的，其中频率向量中的每个元素都是通过对数函数计算得到的。</span><br><span class="hljs-string">        例如，在一维情况下，频率向量可以是 [2^0, 2^1, 2^2, ..., 2^(N-1)]，其中 N 是编码的维度。</span><br><span class="hljs-string">        这种对数编码可以将不同尺度的变化映射到编码向量的不同维度，从而使得位置编码能够更好地表示不同尺度的特征。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        因此，对数编码与线性编码的区别在于编码向量中元素的间隔不同，对数编码能够更好地表示不同尺度的特征，而线性编码则无法明显地区分不同尺度的特征。</span><br><span class="hljs-string">        在 NeRF 中使用对数编码的位置编码，可以更好地处理从不同角度观察的场景，并减少渲染中的混淆。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment">#是否采用对数编码</span><br>        <span class="hljs-comment"># torch.linspace(start, end, steps=100, out=None) → Tensor</span><br>        <span class="hljs-comment"># 返回一个1维张量，包含在区间start和end上均匀间隔的step个点。</span><br>        <span class="hljs-keyword">if</span> self.kwargs[<span class="hljs-string">&#x27;log_sampling&#x27;</span>]:<br>            <span class="hljs-comment">#对数编码</span><br>            <span class="hljs-comment"># 2 ** 0~9之间10个点</span><br>            freq_bands = <span class="hljs-number">2.0</span> ** torch.linspace(<span class="hljs-number">0.0</span>,max_freq,steps=N_freqs)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 线性编码</span><br>            freq_bands = torch.linspace(<span class="hljs-number">2.0</span>**<span class="hljs-number">0.0</span>,<span class="hljs-number">2</span>** max_freq,steps=N_freqs)<br><br>        <span class="hljs-keyword">for</span> freq <span class="hljs-keyword">in</span> freq_bands:<br>            <span class="hljs-keyword">for</span> p_fn <span class="hljs-keyword">in</span> self.kwargs[<span class="hljs-string">&#x27;periodic_fns&#x27;</span>]:<br>                <span class="hljs-comment"># p_fn [sin(),cos()]</span><br>                <span class="hljs-comment"># embed_fns [sinx sin2x ...sin512x; cosx,cos2x...cos512x]</span><br>                embed_fns.append(<span class="hljs-keyword">lambda</span> x,p_fn=p_fn,freq=freq:p_fn(x*freq))<br>                out_dim+=d<br><br>        self.embed_fns =embed_fns<br>        self.out_dim = out_dim<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">embed</span>(<span class="hljs-params">self,inputs</span>):<br>        <span class="hljs-comment"># 把位置编码的变化拼接起来</span><br>        <span class="hljs-keyword">return</span> torch.cat([fn(inputs) <span class="hljs-keyword">for</span> fn <span class="hljs-keyword">in</span> self.embed_fns],-<span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_embedder</span>(<span class="hljs-params">multires,i=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span> i==-<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> nn.Identity(),<span class="hljs-number">3</span><br><br>    <span class="hljs-comment"># 设置位置编码的参数</span><br>    embed_kwargs=&#123;<br>        <span class="hljs-string">&#x27;include_input&#x27;</span>:<span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;input_dims&#x27;</span>:<span class="hljs-number">3</span>,<br>        <span class="hljs-string">&#x27;max_freq_log2&#x27;</span>:multires-<span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;num_freqs&#x27;</span>:multires,<br>        <span class="hljs-string">&#x27;log_sampling&#x27;</span>:<span class="hljs-literal">False</span>,<br>        <span class="hljs-string">&#x27;periodic_fns&#x27;</span>:[torch.sin,torch.cos],<br>    &#125;<br><br>    embedder_obj = Embedder(**embed_kwargs)<br>    embed = <span class="hljs-keyword">lambda</span> x,eo=embedder_obj:eo.embed(x)<br><br>    <span class="hljs-keyword">return</span> embed,embedder_obj.out_dim<br></code></pre></td></tr></table></figure><h4 id="sample_pdf.py">sample_pdf.py</h4><p><em>sample_pdf：</em>精细采样，再粗采样的基础上根据概率密度函数<code>pdf</code>计算精细的采样点的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-comment"># Hierarchical sampling (section 5.2)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample_pdf</span>(<span class="hljs-params">bins, weights, N_samples, det=<span class="hljs-literal">False</span>, pytest=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    bins: z_vals_mid</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># Get pdf</span><br>    weights = weights + <span class="hljs-number">1e-5</span>  <span class="hljs-comment"># prevent nans</span><br>    <span class="hljs-comment"># 归一化 [bs, 62]</span><br>    <span class="hljs-comment"># 概率密度函数</span><br>    pdf = weights / torch.<span class="hljs-built_in">sum</span>(weights, -<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 累积分布函数</span><br>    cdf = torch.cumsum(pdf, -<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 在第一个位置补0</span><br>    cdf = torch.cat([torch.zeros_like(cdf[..., :<span class="hljs-number">1</span>]), cdf], -<span class="hljs-number">1</span>)  <span class="hljs-comment"># (batch, len(bins))</span><br><br>    <span class="hljs-comment"># Take uniform samples</span><br>    <span class="hljs-keyword">if</span> det:<br>        u = torch.linspace(<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, steps=N_samples)<br>        u = u.expand(<span class="hljs-built_in">list</span>(cdf.shape[:-<span class="hljs-number">1</span>]) + [N_samples])<br>    <span class="hljs-keyword">else</span>:<br>        u = torch.rand(<span class="hljs-built_in">list</span>(cdf.shape[:-<span class="hljs-number">1</span>]) + [N_samples])  <span class="hljs-comment"># [bs,128]</span><br><br>    <span class="hljs-comment"># Pytest, overwrite u with numpy&#x27;s fixed random numbers</span><br>    <span class="hljs-keyword">if</span> pytest:<br>        np.random.seed(<span class="hljs-number">0</span>)<br>        new_shape = <span class="hljs-built_in">list</span>(cdf.shape[:-<span class="hljs-number">1</span>]) + [N_samples]<br>        <span class="hljs-keyword">if</span> det:<br>            u = np.linspace(<span class="hljs-number">0.</span>, <span class="hljs-number">1.</span>, N_samples)<br>            u = np.broadcast_to(u, new_shape)<br>        <span class="hljs-keyword">else</span>:<br>            u = np.random.rand(*new_shape)<br>        u = torch.Tensor(u)<br><br>    <span class="hljs-comment"># Invert CDF</span><br><br>    u = u.contiguous()<br>    <span class="hljs-comment"># u 是随机生成的</span><br>    <span class="hljs-comment"># 找到对应的插入的位置</span><br>    inds = torch.searchsorted(cdf, u, right=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 前一个位置，为了防止inds中的0的前一个是-1，这里就还是0</span><br>    below = torch.<span class="hljs-built_in">max</span>(torch.zeros_like(inds - <span class="hljs-number">1</span>), inds - <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 最大的位置就是cdf的上限位置，防止过头，跟上面的意义相同</span><br>    above = torch.<span class="hljs-built_in">min</span>((cdf.shape[-<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>) * torch.ones_like(inds), inds)<br>    <span class="hljs-comment"># (batch, N_samples, 2)</span><br>    inds_g = torch.stack([below, above], -<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># cdf_g = tf.gather(cdf, inds_g, axis=-1, batch_dims=len(inds_g.shape)-2)</span><br>    <span class="hljs-comment"># bins_g = tf.gather(bins, inds_g, axis=-1, batch_dims=len(inds_g.shape)-2)</span><br>    <span class="hljs-comment"># (batch, N_samples, 63)</span><br>    matched_shape = [inds_g.shape[<span class="hljs-number">0</span>], inds_g.shape[<span class="hljs-number">1</span>], cdf.shape[-<span class="hljs-number">1</span>]]<br>    <span class="hljs-comment"># 如[1024,128,63] 提取 根据 inds_g[i][j][0] inds_g[i][j][1]</span><br>    <span class="hljs-comment"># cdf_g [1024,128,2]</span><br>    cdf_g = torch.gather(cdf.unsqueeze(<span class="hljs-number">1</span>).expand(matched_shape), <span class="hljs-number">2</span>, inds_g)<br>    <span class="hljs-comment"># 如上, bins 是从2到6的采样点，是64个点的中间值</span><br>    bins_g = torch.gather(bins.unsqueeze(<span class="hljs-number">1</span>).expand(matched_shape), <span class="hljs-number">2</span>, inds_g)<br>    <span class="hljs-comment"># 差值</span><br>    denom = (cdf_g[..., <span class="hljs-number">1</span>] - cdf_g[..., <span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># 防止过小</span><br>    denom = torch.where(denom &lt; <span class="hljs-number">1e-5</span>, torch.ones_like(denom), denom)<br><br>    t = (u - cdf_g[..., <span class="hljs-number">0</span>]) / denom<br><br>    <span class="hljs-comment"># lower+线性插值</span><br>    samples = bins_g[..., <span class="hljs-number">0</span>] + t * (bins_g[..., <span class="hljs-number">1</span>] - bins_g[..., <span class="hljs-number">0</span>])<br><br>    <span class="hljs-keyword">return</span> samples<br></code></pre></td></tr></table></figure><h4 id="load_llff_data.py">load_llff_data.py</h4><p><strong>不写了，总的来说就是从llff的位姿文件中解算pose数据</strong></p><p><em>load_llff_data</em></p><p><em>get_poses_bds_imgs</em></p><p>*_minify*</p><p><em>imread</em></p><p><em>recenter_poses</em></p><p><em>poses_average</em></p><p><em>normalize</em></p><p><em>normalize_c2w_matrix</em></p><p><em>spherify_poses</em></p><p><em>render_path_spiral</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os,imageio<br><span class="hljs-keyword">from</span> subprocess <span class="hljs-keyword">import</span> check_output<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_path_spiral</span>(<span class="hljs-params">c2w, up, rads, focal, zdelta, zrate, rots, N</span>):<br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># 这个函数没有详细理解</span><br>    render_poses = []<br>    rads = np.array(<span class="hljs-built_in">list</span>(rads) + [<span class="hljs-number">1.</span>])<br>    hwf = c2w[:, <span class="hljs-number">4</span>:<span class="hljs-number">5</span>]<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    c是当前迭代的相机在世界坐标系的位置， </span><br><span class="hljs-string">    np.dot(c2w[:3, :4], np.array([0, 0, -focal, 1.])是焦点在世界坐标系的位置</span><br><span class="hljs-string">    z是相机z轴在世界坐标系的朝向。</span><br><span class="hljs-string">    normalize_c2w_matrix(z, up, c)构造当前相机的参数矩阵。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> theta <span class="hljs-keyword">in</span> np.linspace(<span class="hljs-number">0.</span>, <span class="hljs-number">2.</span> * np.pi * rots, N + <span class="hljs-number">1</span>)[:-<span class="hljs-number">1</span>]:<br>        c = np.dot(c2w[:<span class="hljs-number">3</span>, :<span class="hljs-number">4</span>], np.array([np.cos(theta), -np.sin(theta), -np.sin(theta * zrate), <span class="hljs-number">1.</span>]) * rads)<br>        z = normalize(c - np.dot(c2w[:<span class="hljs-number">3</span>, :<span class="hljs-number">4</span>], np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -focal, <span class="hljs-number">1.</span>])))<br>        render_poses.append(np.concatenate([normalize_c2w_matrix(z, up, c), hwf], <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> render_poses<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">spherify_poses</span>(<span class="hljs-params">poses, bds</span>):<br>    <span class="hljs-comment"># 这个函数没有详细理解</span><br>    <span class="hljs-comment">#用于&quot;球面化&quot;相机分布并返回一个环绕的相机轨迹用于新视角合成</span><br>    p34_to_44 = <span class="hljs-keyword">lambda</span> p: np.concatenate([p, np.tile(np.reshape(np.eye(<span class="hljs-number">4</span>)[-<span class="hljs-number">1</span>, :], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>]), [p.shape[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])], <span class="hljs-number">1</span>)<br><br>    rays_d = poses[:, :<span class="hljs-number">3</span>, <span class="hljs-number">2</span>:<span class="hljs-number">3</span>]<br>    rays_o = poses[:, :<span class="hljs-number">3</span>, <span class="hljs-number">3</span>:<span class="hljs-number">4</span>]<br><br>    <span class="hljs-comment">#找到离所有相机中心射线距离之和最短的点（可以先简单理解成场景的中心位置）</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">min_line_dist</span>(<span class="hljs-params">rays_o, rays_d</span>):<br>        A_i = np.eye(<span class="hljs-number">3</span>) - rays_d * np.transpose(rays_d, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>])<br>        b_i = -A_i @ rays_o<br>        pt_mindist = np.squeeze(-np.linalg.inv((np.transpose(A_i, [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]) @ A_i).mean(<span class="hljs-number">0</span>)) @ (b_i).mean(<span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">return</span> pt_mindist<br><br>    pt_mindist = min_line_dist(rays_o, rays_d)<br><br>    <span class="hljs-comment">#将得到的场景中心位置移到世界坐标系的原点，同时将所有相机z轴的平均方向转到和世界坐标系的z轴相同</span><br>    center = pt_mindist<br>    up = (poses[:, :<span class="hljs-number">3</span>, <span class="hljs-number">3</span>] - center).mean(<span class="hljs-number">0</span>)<br><br>    vec0 = normalize(up)<br>    vec1 = normalize(np.cross([<span class="hljs-number">.1</span>, <span class="hljs-number">.2</span>, <span class="hljs-number">.3</span>], vec0))<br>    vec2 = normalize(np.cross(vec0, vec1))<br>    pos = center<br>    c2w = np.stack([vec1, vec2, vec0, pos], <span class="hljs-number">1</span>)<br><br>    poses_reset = np.linalg.inv(p34_to_44(c2w[<span class="hljs-literal">None</span>])) @ p34_to_44(poses[:, :<span class="hljs-number">3</span>, :<span class="hljs-number">4</span>])<br><br>    <span class="hljs-comment">#最后将相机的位置缩放到单位圆内</span><br>    rad = np.sqrt(np.mean(np.<span class="hljs-built_in">sum</span>(np.square(poses_reset[:, :<span class="hljs-number">3</span>, <span class="hljs-number">3</span>]), -<span class="hljs-number">1</span>)))<br><br>    sc = <span class="hljs-number">1.</span> / rad<br>    poses_reset[:, :<span class="hljs-number">3</span>, <span class="hljs-number">3</span>] *= sc<br>    bds *= sc<br>    rad *= sc<br><br>    centroid = np.mean(poses_reset[:, :<span class="hljs-number">3</span>, <span class="hljs-number">3</span>], <span class="hljs-number">0</span>)<br>    zh = centroid[<span class="hljs-number">2</span>]<br>    radcircle = np.sqrt(rad ** <span class="hljs-number">2</span> - zh ** <span class="hljs-number">2</span>)<br>    new_poses = []<br><br>    <span class="hljs-keyword">for</span> th <span class="hljs-keyword">in</span> np.linspace(<span class="hljs-number">0.</span>, <span class="hljs-number">2.</span> * np.pi, <span class="hljs-number">120</span>):<br>        camorigin = np.array([radcircle * np.cos(th), radcircle * np.sin(th), zh])<br>        up = np.array([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1.</span>])<br><br>        vec2 = normalize(camorigin)<br>        vec0 = normalize(np.cross(vec2, up))<br>        vec1 = normalize(np.cross(vec2, vec0))<br>        pos = camorigin<br>        p = np.stack([vec0, vec1, vec2, pos], <span class="hljs-number">1</span>)<br><br>        new_poses.append(p)<br><br>    new_poses = np.stack(new_poses, <span class="hljs-number">0</span>)<br><br>    new_poses = np.concatenate([new_poses, np.broadcast_to(poses[<span class="hljs-number">0</span>, :<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>:], new_poses[:, :<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>:].shape)], -<span class="hljs-number">1</span>)<br>    poses_reset = np.concatenate(<br>        [poses_reset[:, :<span class="hljs-number">3</span>, :<span class="hljs-number">4</span>], np.broadcast_to(poses[<span class="hljs-number">0</span>, :<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>:], poses_reset[:, :<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>:].shape)], -<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> poses_reset, new_poses, bds<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">normalize_c2w_matrix</span>(<span class="hljs-params">norm_z,norm_y,mean_center</span>):<br>    <span class="hljs-comment"># [vec_X,vec_Y,vec_Z,center]</span><br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    原函数 里面有点看不懂</span><br><span class="hljs-string">    def viewmatrix(z, up, pos):</span><br><span class="hljs-string">    vec2 = normalize(z)</span><br><span class="hljs-string">    vec1_avg = up</span><br><span class="hljs-string">    vec0 = normalize(np.cross(vec1_avg, vec2))</span><br><span class="hljs-string">    vec1 = normalize(np.cross(vec2, vec0))</span><br><span class="hljs-string">    m = np.stack([vec0, vec1, vec2, pos], 1)</span><br><span class="hljs-string">    return m</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 拷贝一份</span><br>    norm_vec_z = nomailize(norm_z)<br>    norm_vec_y = norm_y<br>    norm_vec_x = normalize(np.cross(norm_vec_y,norm_vec_z))<br>    <span class="hljs-comment"># todo 为什么y还要再算一遍？</span><br>    norm_vec_y = normalize(np.cross(norm_vec_z,norm_vec_x))<br>    c2w = np.stack([norm_vec_x,norm_vec_y,norm_z,mean_center],<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> c2w<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">normalize</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x/np.linalg.norm(x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">poses_average</span>(<span class="hljs-params">poses</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param</span><br><span class="hljs-string">    poses: [vec_X,vec_Y,vec_Z,center,hwf] 也叫C2W矩阵</span><br><span class="hljs-string">    :return: c2w camera to world</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># 获取照片的 高、宽、焦距</span><br>    hwf = poses[<span class="hljs-number">0</span>,:<span class="hljs-number">3</span>,-<span class="hljs-number">1</span>:]<br>    <span class="hljs-comment"># 获取相机位置的center平均（中心） 相机位置 第四列 (x,y,z)</span><br>    mean_center = poses[:,:<span class="hljs-number">3</span>,<span class="hljs-number">3</span>].mean(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 对所有相机的Z轴的方向向量 归一化</span><br>    norm_z = normalize(poses[:,:<span class="hljs-number">3</span>,<span class="hljs-number">2</span>].<span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>))<br>    <span class="hljs-comment"># 对所有相机的Y轴的方向向量 归一化</span><br>    norm_y = poses[:,:<span class="hljs-number">3</span>,<span class="hljs-number">1</span>].<span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 相机坐标系X轴方向与X和Y方向垂直，所以不用计算</span><br>    poses = np.concatenate([normalize_c2w_matrix(norm_z,norm_y,mean_center),hwf],<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> poses<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recenter_poses</span>(<span class="hljs-params">poses</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param poses:  相机所有的位姿数据</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    首先我们要知道利用同一个旋转平移变换矩阵左乘所有的相机位姿是对所有的相机位姿做一个全局的旋转平移变换</span><br><span class="hljs-string">    我们可以用平均相机位姿作为支点理解，</span><br><span class="hljs-string">    如果把平均位姿的逆c2w^-1左乘平均相机位姿pose_avg，返回的相机位姿中旋转矩阵为单位矩阵，平移量为零向量。</span><br><span class="hljs-string">    也就是变换后的平均相机位姿的位置处在世界坐标系的原点，XYZ轴朝向和世界坐标系的向一致。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 拷贝一份</span><br>    poses_ = poses+<span class="hljs-number">0</span><br>    <span class="hljs-comment"># 创建 1 x 4 的ndarray</span><br>    bottom = np.reshape([<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1.0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>])<br>    <span class="hljs-comment"># 多个输入相机的归一化相机坐标轴、相机位置的均值 poses_avg 3 x 5</span><br>    poses_avg = poses_average(poses)<br>    <span class="hljs-comment"># 多个输入相机的平均位姿c2w_avg 4 x 4</span><br>    c2w_avg = np.concatenate([poses_avg[:<span class="hljs-number">3</span>,:<span class="hljs-number">4</span>],bottom],<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 将bottom从1x4 变为 20 x 4 方便拼到 poses里</span><br>    <span class="hljs-comment"># todo  np.tile函数</span><br>    bottom = np.tile(np.reshape(bottom, [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>]), [poses.shape[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># poses 20 x 3 x 5 --&gt; 20 x 4 x 4</span><br>    poses = np.concatenate([poses[:,:<span class="hljs-number">3</span>,:<span class="hljs-number">4</span>],bottom],-<span class="hljs-number">2</span>)<br>    <span class="hljs-comment"># c2w平均位姿的逆矩阵左乘所有的相机位姿</span><br>    <span class="hljs-comment"># 返回的相机位姿中旋转矩阵为单位矩阵，平移量为零向量</span><br>    <span class="hljs-comment"># 变换后的平均相机位姿的位置处在世界坐标系的原点，XYZ轴朝向和世界坐标系的向一致。</span><br>    poses = np.linalg.inv(c2w_avg) @ poses<br>    <span class="hljs-comment"># 把备份的poses_的位姿数据替换</span><br>    poses_[:, :<span class="hljs-number">3</span>, :<span class="hljs-number">4</span>] = poses[:, :<span class="hljs-number">3</span>, :<span class="hljs-number">4</span>]<br>    <span class="hljs-comment"># 把最后的HWF 第五列还原上</span><br>    poses = poses_<br>    <span class="hljs-keyword">return</span> poses<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">imread</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-keyword">if</span> file.endswith(<span class="hljs-string">&quot;png&quot;</span>):<br>        <span class="hljs-keyword">return</span> imageio.imread(file,ignoregamma=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> imageio.imread(file)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_minify</span>(<span class="hljs-params">datadir,factors=[],resolutions=[]</span>):<br>    <span class="hljs-comment"># 预先定义一个是否需要加载img文件夹的bool变量</span><br>    needtoload = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">for</span> factor <span class="hljs-keyword">in</span> factors:<br>        <span class="hljs-comment"># 拼接下采样的文件夹路径</span><br>        imgdir = os.path.join(datadir,<span class="hljs-string">&quot;images_&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(factor))<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(imgdir):<br>            needtoload = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> resolution <span class="hljs-keyword">in</span> resolutions:<br>        <span class="hljs-comment"># todo 不懂这个目录是什么目录</span><br>        imgdir = os.path.join(datadir,<span class="hljs-string">&quot;images_&#123;&#125;x&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(resolution[<span class="hljs-number">1</span>],resolution[<span class="hljs-number">0</span>]))<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(imgdir):<br>            needtoload = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 所有目录都有，直接返回</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> needtoload:<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 没有下采样数据，从原始数据里面采样</span><br>    <span class="hljs-comment"># 原始img数据目录</span><br>    imgdir = os.path.join(datadir,<span class="hljs-string">&quot;images&quot;</span>)<br>    <span class="hljs-comment"># 获取imgdir下所有的文件</span><br>    imgs =   [os.path.join(imgdir,file) <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(os.listdir(imgdir))]<br>    <span class="hljs-comment"># 筛选文件，选取后缀名为 [&quot;JPG&quot;,&quot;jpg&quot;,&quot;PNG&quot;,&quot;JPEG&quot;,&quot;PNG&quot;]的图片</span><br>    imgs = [file <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> imgs <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>([file.endswith(ex) <span class="hljs-keyword">for</span> ex <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;JPG&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;PNG&quot;</span>,<span class="hljs-string">&quot;JPEG&quot;</span>,<span class="hljs-string">&quot;PNG&quot;</span>]])]<br><br>    <span class="hljs-comment"># 拷贝一份原始img数据目录路径</span><br>    imgdir_original = imgdir<br><br>    img_workDir = os.getcwd()<br><br>    <span class="hljs-comment"># 创建下采样的工作目录</span><br>    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> factors+resolutions:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(r,<span class="hljs-built_in">int</span>):<br>            name = <span class="hljs-string">&quot;images_&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(r)<br>            resize_argument = <span class="hljs-string">&quot;&#123;&#125;%&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">100.</span>/r)<br>        <span class="hljs-keyword">else</span>:<br>            name = <span class="hljs-string">&quot;images_&#123;&#125;x&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(r[<span class="hljs-number">1</span>],r[<span class="hljs-number">0</span>])<br>            resize_argument = <span class="hljs-string">&quot;&#123;&#125;x&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(r[<span class="hljs-number">1</span>],r[<span class="hljs-number">0</span>])<br><br>        imgdir  = os.path.join(datadir,name)<br>        <span class="hljs-keyword">if</span> os.path.exists(imgdir):<br>            <span class="hljs-keyword">continue</span><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Minifying&quot;</span>,r,datadir)<br><br>        <span class="hljs-comment"># 使用subprocess 中 check_output执行shell命令</span><br>        <span class="hljs-comment"># 调用shell完成下采样图片的创建</span><br><br>        os.makedirs(imgdir)<br>        <span class="hljs-comment"># 复制 Imgdir下所有文件到 imgdir_original 备份</span><br>        check_output(<span class="hljs-string">&#x27;cp &#123;&#125;/*&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(imgdir_original,imgdir),shell=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment"># 获取所用数据集的数据的后缀</span><br>        img_extension = imgs[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;.&#x27;</span>)[-<span class="hljs-number">1</span>]<br><br>        <span class="hljs-comment"># mogrify -format png *.jpg 将文件夹里的所有jpg图片转换为png格式</span><br>        <span class="hljs-comment">#  shell_args 将文件夹里所有img_extension格式的图片转为Png格式并重采样resize为resize_argument里的大小</span><br>        shell_args = <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-string">&#x27;mogrify&#x27;</span>,<span class="hljs-string">&#x27;-resize&#x27;</span>,resize_argument,<span class="hljs-string">&#x27;-format&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;*.&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(img_extension)])<br>        <span class="hljs-built_in">print</span>(shell_args)<br>        os.chdir()<br>        <span class="hljs-comment">#改变当前工作目录到imgdir （新img文件夹的路径）</span><br>        os.chdir(imgdir)<br>        check_output(shell_args,shell=<span class="hljs-literal">True</span>)<br>        <span class="hljs-comment">#返回最初的IMG文件夹(未下采样、未创建新的)</span><br>        os.chdir(img_workDir)<br><br>        <span class="hljs-comment"># 上一步用mogrify变完之后，如果还有非png格式(img_extension不为png，img_extension格式)的图片，直接删除</span><br>        <span class="hljs-keyword">if</span> img_extension != <span class="hljs-string">&#x27;png&#x27;</span>:<br>            <span class="hljs-comment">#如果拓展不是png 就把所有后缀是png的删掉 因为命令默认是PNG的</span><br>            check_output(<span class="hljs-string">&#x27;rm &#123;&#125;/*.&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(imgdir,img_extension),shell=<span class="hljs-literal">True</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;removed duplicates which are not png&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done&quot;</span>)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_poses_bds_imgs</span>(<span class="hljs-params">datadir,</span><br><span class="hljs-params">                       factor=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                       width=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                       height=<span class="hljs-literal">None</span>,</span><br><span class="hljs-params">                       load_imgs = <span class="hljs-literal">True</span></span>):<br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    # 20 x 17 位姿前15个 near far 后两个</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    poses_bounds.npy 文件</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    [ r11 r12 r13 t1 H</span><br><span class="hljs-string">      r21 r22 r23 t2 W    3 x 5  在npy文件里压缩成 --&gt; 1 x 15    [r11 r12 r13 t1 H r21 r22 r23 t2 W r31 r32 r33 t3 f]</span><br><span class="hljs-string">      r31 r32 r33 t3 f]</span><br><span class="hljs-string"></span><br><span class="hljs-string">    相机外参的逆矩阵被称为camera-to-world (c2w)矩阵，其作用是把相机坐标系的点变换到世界坐标系。</span><br><span class="hljs-string">    r11~r33 c2w旋转矩阵</span><br><span class="hljs-string">    t1~t3 c2w平移向量</span><br><span class="hljs-string">    H 照片高度</span><br><span class="hljs-string">    W 照片宽度</span><br><span class="hljs-string">    f 相机焦距</span><br><span class="hljs-string">      </span><br><span class="hljs-string">    最后两个参数用于表示场景的范围Bounds (bds)，是该相机视角下场景点离相机中心最近(near)和最远(far)的距离。</span><br><span class="hljs-string">    [r11 r12 r13 t1 H r21 r22 r23 t2 W r31 r32 r33 t3 f near far]</span><br><span class="hljs-string"> </span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    poses_mat = np.load(os.path.join(datadir,<span class="hljs-string">&#x27;poses_bounds.npy&#x27;</span>))<br>    <span class="hljs-comment">#获取相机位姿参数 最后为 3 x 5 x 20 的矩阵</span><br>    <span class="hljs-comment"># 20 x 17 --&gt; 20 x 15 --&gt; 20 x 3 x 5 --&gt; 3 x 5 x 20</span><br>    c2w = poses_mat[:,:-<span class="hljs-number">2</span>].reshape([-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]).transpose([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># 获取最后两列 near far 数据 作为 bds</span><br>    <span class="hljs-comment"># 20 x 2 --&gt; 20 x 2</span><br>    bds  = poses_mat[:,-<span class="hljs-number">2</span>:].transpose([<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])<br><br>    <span class="hljs-comment"># 获取data目录下的images的第一张，用于计算img的shape</span><br>    img0 = [os.path.join(datadir,<span class="hljs-string">&#x27;images&#x27;</span>,f) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(os.listdir(os.path.join(datadir,<span class="hljs-string">&#x27;images&#x27;</span>)))<br>            <span class="hljs-keyword">if</span> f.endswith(<span class="hljs-string">&quot;JPG&quot;</span>) <span class="hljs-keyword">or</span> f.endswith(<span class="hljs-string">&quot;jpg&quot;</span>) <span class="hljs-keyword">or</span> f.endswith(<span class="hljs-string">&quot;png&quot;</span>)][<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 获取原始照片的大小</span><br>    raw_imageshape = imageio.imread(img0).shape<br><br>    <span class="hljs-comment"># 下采样的倍数 用来索引下采样的文件夹</span><br>    sfx = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> factor <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        sfx =<span class="hljs-string">&quot;_&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(factor)<br>        <span class="hljs-comment"># 下采样 函数里判断是否以及有了对于的文件夹</span><br>        _minify(datadir,factors=[factor])<br>        <span class="hljs-comment"># 备份factor</span><br>        factor = factor<br>    <span class="hljs-keyword">elif</span> height <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 如果提供下采样图片高度的话</span><br>        <span class="hljs-comment"># 用指定的高度计算缩放因子，然后计算宽度</span><br>        <span class="hljs-comment"># 然后用指定的高度和宽度进行下采样</span><br>        factor = raw_imageshape[<span class="hljs-number">0</span>]/<span class="hljs-built_in">float</span>[height]<br>        width  = <span class="hljs-built_in">int</span>(raw_imageshape[<span class="hljs-number">1</span>]/factor)<br>        <span class="hljs-comment"># 按指定</span><br>        _minify(datadir,resolutions=[[height,width]])<br>        sfx = <span class="hljs-string">&quot;_&#123;&#125;x&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(width,height)<br>    <span class="hljs-keyword">elif</span> width <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 如果提供下采样图片宽度的话</span><br>        <span class="hljs-comment"># 用指定的宽度计算缩放因子，然后计算高度</span><br>        <span class="hljs-comment"># 然后用指定的高度和宽度进行下采样</span><br>        factor = raw_imageshape[<span class="hljs-number">1</span>]/<span class="hljs-built_in">float</span>[width]<br>        height = <span class="hljs-built_in">int</span>(raw_imageshape[<span class="hljs-number">0</span>]/factor)<br>        _minify(datadir,resolutions=[[height,width]])<br>        sfx = <span class="hljs-string">&quot;_&#123;&#125;x&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(width,height)<br>    <span class="hljs-keyword">else</span>:<br>        factor = <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 判断存放下采样的 img的目录是否存在</span><br>    imgdir = os.path.join(datadir,<span class="hljs-string">&#x27;images&#x27;</span>+sfx)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(imgdir):<br>        <span class="hljs-built_in">print</span>(imgdir,<span class="hljs-string">&quot;does not exists,returning&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 获取下采样img文件夹下所有的img</span><br>    imgfiles =[os.path.join(imgdir,file) <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(os.listdir(imgdir)) <span class="hljs-keyword">if</span><br>               file.endswith(<span class="hljs-string">&quot;JPG&quot;</span>) <span class="hljs-keyword">or</span> file.endswith(<span class="hljs-string">&quot;jpg&quot;</span>) <span class="hljs-keyword">or</span> file.endswith(<span class="hljs-string">&quot;png&quot;</span>)]<br><br><br>    <span class="hljs-comment"># 判断位姿文件中所含的img个数与data文件夹中img个数是否相等</span><br>    <span class="hljs-keyword">if</span> c2w.shape[-<span class="hljs-number">1</span>] !=<span class="hljs-built_in">len</span>(imgfiles):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Mismatching between img&#123;&#125; and poses &#123;&#125; ！！！！ &quot;</span>.<span class="hljs-built_in">format</span>((<span class="hljs-built_in">len</span>(imgfiles)),c2w.shape[-<span class="hljs-number">1</span>]))<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 获取下采样完照片的尺寸</span><br>    shx_imageshape = imageio.imread(imgfiles[<span class="hljs-number">0</span>]).shape<br><br>    <span class="hljs-comment">#用c2w矩阵 [R T] 矩阵 拼接完整的poses矩阵 [R T hwf]</span><br>    poses = c2w<br>    <span class="hljs-comment"># 每张照片c2w矩阵最后一列放上H、W</span><br>    poses[:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,:] = np.array(shx_imageshape[:<span class="hljs-number">2</span>]).reshape([<span class="hljs-number">2</span>,<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># 完成对img的下采样</span><br>    poses[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,:] = c2w[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,:]*<span class="hljs-number">1.0</span>/factor<br><br><br>    <span class="hljs-comment"># 如果不需要加载图片，只返回处理完的poses和bds</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> load_imgs:<br>        <span class="hljs-keyword">return</span> poses,bds<br><br>    <span class="hljs-comment"># RGB通道归一化</span><br>    imgs = [imread(file)[...,:<span class="hljs-number">3</span>]/<span class="hljs-number">255</span> <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> imgfiles]<br>    imgs = np.stack(imgs,-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;load image data&quot;</span>,imgs.shape,poses[:,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> poses,bds,imgs<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_llff_data</span>(<span class="hljs-params"></span><br><span class="hljs-params">        datadir,</span><br><span class="hljs-params">        factor=<span class="hljs-number">8</span>,</span><br><span class="hljs-params">        recenter=<span class="hljs-literal">True</span>,</span><br><span class="hljs-params">        bd_factor=<span class="hljs-number">0.75</span>,</span><br><span class="hljs-params">        spherify = <span class="hljs-literal">False</span>,</span><br><span class="hljs-params">        path_zflat=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-comment"># poses 3 x 5 x 20 bds 2 x 20 imgs 378 x 504 x 3 x 20</span><br>    poses,bds,imgs = get_poses_bds_imgs(datadir,factor)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loaded&quot;</span>,datadir,bds.<span class="hljs-built_in">min</span>(),bds.<span class="hljs-built_in">max</span>())<br><br>    <span class="hljs-comment"># LLFF相机坐标系-&gt; OpenGL/NeRF坐标系</span><br>    <span class="hljs-comment"># x y z --&gt; y -x z  x变为y y变为-x z不动 按第一个维度N 拼接</span><br>    <span class="hljs-comment"># 3 x 5 x 20</span><br>    poses = np.concatenate([poses[:,<span class="hljs-number">1</span>:<span class="hljs-number">2</span>,:],-poses[:,<span class="hljs-number">0</span>:<span class="hljs-number">1</span>,:],poses[:,<span class="hljs-number">2</span>:,:]],<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 20 x 3 x 5</span><br>    poses = np.moveaxis(poses,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>).astype(np.float32)<br>    <span class="hljs-comment"># 374 x 504 x 3 x 20 --&gt;  20 x 374 x 504 x 3</span><br>    imgs = np.moveaxis(imgs,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>).astype(np.float32)<br>    images = imgs<br>    <span class="hljs-comment"># 20 x 2 --&gt; 2 x 20</span><br>    bds = np.moveaxis(bds,-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>).astype(np.float32)<br><br>    <span class="hljs-comment"># 场景的整体缩放 bd_factor用于调整整体的场景大小</span><br>    sc = <span class="hljs-number">1.0</span> <span class="hljs-keyword">if</span> bd_factor <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> <span class="hljs-number">1.0</span>/(bds.<span class="hljs-built_in">min</span>() *bd_factor)<br>    <span class="hljs-comment"># 相机位姿的平移向量 x sc 表示将相机的位姿进行缩放或者平移</span><br>    poses[:,:<span class="hljs-number">3</span>,<span class="hljs-number">3</span>] *= sc<br>    <span class="hljs-comment"># 边界缩放</span><br>    bds *= sc<br><br>    <span class="hljs-comment"># todo 重新调整相机的位姿</span><br>    <span class="hljs-keyword">if</span> recenter:<br>        <span class="hljs-comment"># 相机坐标系 -&gt; 世界坐标系</span><br>        <span class="hljs-comment"># 变换后的平均相机位姿的位置处在世界坐标系的原点，XYZ轴朝向和世界坐标系的向一致。</span><br>        poses = recenter_poses(poses)<br><br>    <span class="hljs-keyword">if</span> spherify:<br>        <span class="hljs-comment"># 针对全景360的场景</span><br>        <span class="hljs-comment"># 用于&quot;球面化&quot;相机分布并返回一个环绕的相机轨迹用于新视角合成</span><br>        <span class="hljs-comment"># pose的输 输入的相机参数归一化， render_poses生成一段360度环绕的相机轨迹用于合成新视角</span><br>        poses, render_poses,bds = spherify_poses(poses,bds)<br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 如果不spherify的话用下面的方法返回一个环绕的相机轨迹用于新视角合成</span><br>        <span class="hljs-comment">#生成渲染的相机姿态矩阵，其中传入中心化后的相机姿态矩阵、上方向向量、半径数组、焦距、zdelta、zrate、旋转次数和环视图数量等参数。</span><br><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        准备参数</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        c2w = poses_average(poses)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;recentered&quot;</span>,c2w.shape)<br>        <span class="hljs-built_in">print</span>(c2w[:<span class="hljs-number">3</span>,:<span class="hljs-number">4</span>])<br><br>        up = normalize(poses[:,:<span class="hljs-number">3</span>,<span class="hljs-number">1</span>].<span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span>))<br><br>        close_depth,inf_depth = bds.<span class="hljs-built_in">min</span>()*<span class="hljs-number">0.9</span>,bds.<span class="hljs-built_in">max</span>()*<span class="hljs-number">5.0</span><br>        dt = <span class="hljs-number">0.75</span><br>        mean_depth = <span class="hljs-number">1.0</span>/(((<span class="hljs-number">1.0</span>-dt)/close_depth+dt/inf_depth))<br>        focal = mean_depth<br><br>        <span class="hljs-comment"># 主要是用来生成一个相机轨迹用于新视角的合成（参数准备）</span><br>        <span class="hljs-comment"># Get radii for spiral path</span><br>        shrink_factor = <span class="hljs-number">.8</span><br>        zdelta = close_depth * <span class="hljs-number">.2</span><br>        tt = poses[:, :<span class="hljs-number">3</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># ptstocam(poses[:3,3,:].T, c2w).T</span><br>        rads = np.percentile(np.<span class="hljs-built_in">abs</span>(tt), <span class="hljs-number">90</span>, <span class="hljs-number">0</span>)<br>        c2w_path = c2w<br>        N_views = <span class="hljs-number">120</span><br>        N_rots = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> path_zflat:<br>            <span class="hljs-comment">#             zloc = np.percentile(tt, 10, 0)[2]</span><br>            zloc = -close_depth * <span class="hljs-number">.1</span><br>            c2w_path[:<span class="hljs-number">3</span>, <span class="hljs-number">3</span>] = c2w_path[:<span class="hljs-number">3</span>, <span class="hljs-number">3</span>] + zloc * c2w_path[:<span class="hljs-number">3</span>, <span class="hljs-number">2</span>]<br>            rads[<span class="hljs-number">2</span>] = <span class="hljs-number">0.</span><br>            N_rots = <span class="hljs-number">1</span><br>            N_views /= <span class="hljs-number">2</span><br><br>        <span class="hljs-comment"># Generate poses for spiral path</span><br>        <span class="hljs-comment"># 非渲染360环绕视频的情况下，假设所有相机都朝向某一个方向(faceforward场景)</span><br>        <span class="hljs-comment"># 生成一段螺旋式的相机轨迹，相机绕着一个轴旋转，其中相机始终注视着一个焦点，相机的up(y)轴保持不变</span><br>        render_poses = render_path_spiral(c2w_path, up, rads, focal, zdelta, zrate=<span class="hljs-number">.5</span>, rots=N_rots, N=N_views)<br><br>    render_poses = np.array(render_poses).astype(np.float32)<br>    c2w = poses_average(poses)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Data:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(poses.shape, images.shape, bds.shape)<br><br>    dists = np.<span class="hljs-built_in">sum</span>(np.square(c2w[:<span class="hljs-number">3</span>, <span class="hljs-number">3</span>] - poses[:, :<span class="hljs-number">3</span>, <span class="hljs-number">3</span>]), -<span class="hljs-number">1</span>)<br>    i_test = np.argmin(dists)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;HOLDOUT view is&#x27;</span>, i_test)<br><br>    images = images.astype(np.float32)<br>    poses = poses.astype(np.float32)<br><br>    <span class="hljs-keyword">return</span> images, poses, bds, render_poses, i_test<br><br></code></pre></td></tr></table></figure><h4 id="opts.py">opts.py</h4><p>定义输入的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> configargparse<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">config_parser</span>():<br>    parser = configargparse.ArgumentParser()<br><br>    <span class="hljs-comment"># 定义配置文件的位置</span><br>    parser.add_argument(<span class="hljs-string">&quot;--config&quot;</span>,<br>                        is_config_file=<span class="hljs-literal">True</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;config file path&quot;</span>);<br><br>    <span class="hljs-comment"># 定义本次测试的名称，默认为Test01</span><br>    parser.add_argument(<span class="hljs-string">&quot;--expname&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<br>                        default=<span class="hljs-string">&quot;Test01&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;experiment name&quot;</span>)<br><br>    <span class="hljs-comment"># 定义log文件的路径</span><br>    parser.add_argument(<span class="hljs-string">&quot;--basedir&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<br>                        default=<span class="hljs-string">&quot;./logs/&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;where to store ckpts and logs&quot;</span>)<br><br>    <span class="hljs-comment"># 定义数据文件的路径</span><br>    parser.add_argument(<span class="hljs-string">&quot;--datadir&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<br>                        default=<span class="hljs-string">&quot;./data/llff/fern&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;input data directory&quot;</span>)<br><br>    <span class="hljs-comment"># 定义粗网格的深度 全连接层的层数</span><br>    parser.add_argument(<span class="hljs-string">&quot;--netdepth&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">8</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;layers in network&quot;</span>)<br><br>    <span class="hljs-comment"># 定义粗网格的宽度</span><br>    parser.add_argument(<span class="hljs-string">&quot;--netwidth&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">256</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;channels per layer&quot;</span>)<br><br><br>    <span class="hljs-comment"># 定义精细网格的深度 精细网格的全连接层层数</span><br>    parser.add_argument(<span class="hljs-string">&quot;--netdepth_fine&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">8</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;layers in fine network&quot;</span>)<br>    <span class="hljs-comment"># 定义精细网格的宽度</span><br>    parser.add_argument(<span class="hljs-string">&quot;--netwidth_fine&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">256</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;channels per layer in fine network&quot;</span>)<br><br>    <span class="hljs-comment"># batch_size 送去训练的每批光线、像素点的数量</span><br>    parser.add_argument(<span class="hljs-string">&quot;--N_rand&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">32</span>*<span class="hljs-number">32</span>*<span class="hljs-number">4</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;batch size (number of random rays per each gradient step)&quot;</span>)<br><br>    <span class="hljs-comment"># 学习率 lr</span><br>    parser.add_argument(<span class="hljs-string">&quot;--lrate&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>,<br>                        default=<span class="hljs-number">5e-4</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;learnging rate&quot;</span>)<br><br>    <span class="hljs-comment"># 学习率衰减</span><br>    parser.add_argument(<span class="hljs-string">&quot;--lrate_decay&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">250</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;exponential learning decay (in 1000 steps)&quot;</span>)<br><br>    <span class="hljs-comment">#</span><br>    parser.add_argument(<span class="hljs-string">&quot;--chunk&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">1024</span>*<span class="hljs-number">32</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;number of rays processed in parallel , decrease if running out of memory&quot;</span>)<br><br>    <span class="hljs-comment"># 网络中处理的点的数量</span><br>    parser.add_argument(<span class="hljs-string">&quot;--netchunk&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">1024</span>*<span class="hljs-number">64</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;number of pts sent through in parallel,decrease if running out of memory&quot;</span>)<br><br>    <span class="hljs-comment"># 当no_batching设置为 true 时，在每次迭代期间，仅从单个图像中采样整批光线。</span><br>    <span class="hljs-comment"># 当它为 false 时，我们在每次迭代期间从所有图像中采样光线。</span><br>    parser.add_argument(<span class="hljs-string">&quot;--no_batching&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;only take random rays from 1 image at a time&quot;</span>)<br><br>    <span class="hljs-comment"># 不加载权重</span><br>    parser.add_argument(<span class="hljs-string">&quot;--no_reload&quot;</span>,action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;do not reload weights from saved ckpt&quot;</span>)<br>    <span class="hljs-comment"># 粗网络的权重文件</span><br>    parser.add_argument(<span class="hljs-string">&quot;--ft_path&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<br>                        default=<span class="hljs-literal">None</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;specific weights npy file to reload for coarse netword&quot;</span>)<br><br>    <span class="hljs-comment"># 渲染选项</span><br>    <span class="hljs-comment"># 粗网络中每条光线的采样点</span><br>    parser.add_argument(<span class="hljs-string">&quot;--N_coarse_samples&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">64</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;number of coarse samples per ray&quot;</span>)<br><br>    <span class="hljs-comment"># 精细网络中每条光线的采样点</span><br>    parser.add_argument(<span class="hljs-string">&quot;--N_fine_samples&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">0</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;精细网络中每条光线上采样点的数量&quot;</span>)<br><br>    <span class="hljs-comment"># 设置为 0. 无抖动，1. 抖动</span><br>    parser.add_argument(<span class="hljs-string">&quot;--perturb&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>,<br>                        default=<span class="hljs-number">1.</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;set to 0. for no jitter, 1. for jitter&#x27;</span>)<br><br>    <span class="hljs-comment"># 不使用视角数据</span><br>    parser.add_argument(<span class="hljs-string">&quot;--use_viewdirs&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;use full 5D input instead of 3D&quot;</span>)<br><br>    <span class="hljs-comment"># 0使用位置编码，-1不使用位置编码</span><br>    parser.add_argument(<span class="hljs-string">&quot;--i_embed&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">0</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;set 0 for default positional encoding,-1 for none&quot;</span>)<br><br>    <span class="hljs-comment"># 位置编码的层数</span><br>    parser.add_argument(<span class="hljs-string">&quot;--multires&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">10</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;log2 of max freq for positional encoding 3D locaiton&quot;</span>)<br>    <span class="hljs-comment"># todo 不知道</span><br>    parser.add_argument(<span class="hljs-string">&quot;--multires_views&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">4</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;log2 of max freq for positional encoding 2D direction&quot;</span>)<br><br>    <span class="hljs-comment"># 设置初始噪声</span><br>    parser.add_argument(<span class="hljs-string">&quot;--raw_noise_std&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>,<br>                        default=<span class="hljs-number">0</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;std dev of noise to regularise sigma_a output,1e0 recommended&quot;</span>)<br><br>    <span class="hljs-comment"># 仅对以及跑完的数据进行渲染 不用用数据优化网络</span><br>    parser.add_argument(<span class="hljs-string">&quot;--render_only&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;do not optimize,reload weights and render out render_poses path&quot;</span>)<br><br>    <span class="hljs-comment"># 渲染test数据集</span><br>    parser.add_argument(<span class="hljs-string">&quot;--render_test&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;render the test set instead of render_poses path&quot;</span>)<br>    <span class="hljs-comment"># 下采样的倍数</span><br>    parser.add_argument(<span class="hljs-string">&quot;--render_factor&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">0</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;downsampling factor to speed up rendering,set 4 or 8 for fast previes&quot;</span>)<br><br>    <span class="hljs-comment">#训练的参数</span><br>    <span class="hljs-comment"># 数据的格式</span><br>    parser.add_argument(<span class="hljs-string">&quot;--dataset_type&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<br>                        default=<span class="hljs-string">&quot;llff&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;options:llff/blender/deepvoxels&quot;</span>)<br><br>    <span class="hljs-comment"># 对于大的数据集，只使用其中一部分数据</span><br>    parser.add_argument(<span class="hljs-string">&quot;--test_skip&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">8</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;will load 1/N images from test/val set,useful for large datasets like deepvoxels&quot;</span>)<br><br>    <span class="hljs-comment"># deepvoxel flags deepvoxel的选项</span><br>    parser.add_argument(<span class="hljs-string">&quot;--shape&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>,<br>                        default=<span class="hljs-string">&quot;greek&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;options:armchair/cube/greek,vase&quot;</span>)<br><br>    <span class="hljs-comment">#blender flags Blender的选项</span><br>    <span class="hljs-comment">#白色背景</span><br>    parser.add_argument(<span class="hljs-string">&quot;--white_bkgd&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;set to render synthetic data on a white background (always use for dvoxels)&quot;</span>)<br><br>    <span class="hljs-comment">#使用一半分辨率</span><br>    parser.add_argument(<span class="hljs-string">&quot;--half_res&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;load blender synthetic data at 400*400 instead of 800*800&quot;</span>)<br><br>    <span class="hljs-comment">#llff flags llff的选项</span><br>    <span class="hljs-comment"># 下采样</span><br>    parser.add_argument(<span class="hljs-string">&quot;--factor&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">8</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;downsample factor for LLFF images&quot;</span>)<br><br>    <span class="hljs-comment">#不使用ndc坐标系</span><br>    parser.add_argument(<span class="hljs-string">&quot;--no_ndc&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;do not use normalized device coordinates (set for non-forward facing scenes)&quot;</span>)<br><br>    <span class="hljs-comment"># todo 不知道</span><br>    parser.add_argument(<span class="hljs-string">&quot;--lindisp&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;sampling linearly in disparity rather than depth&quot;</span>)<br><br>    <span class="hljs-comment"># 是否对相机位姿进行球形化</span><br>    parser.add_argument(<span class="hljs-string">&quot;--spherify&quot;</span>,<br>                        action=<span class="hljs-string">&quot;store_true&quot;</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;set for spherical 360 scenes&quot;</span>)<br><br>    <span class="hljs-comment"># 对于大的数据集，只使用其中一部分数据</span><br>    parser.add_argument(<span class="hljs-string">&quot;--llffhold&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">8</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;will take every 1/N images as LLFF data test set,paper uses 8&quot;</span>)<br><br>    <span class="hljs-comment"># logging/saving options</span><br>    <span class="hljs-comment"># log输出的频率</span><br>    parser.add_argument(<span class="hljs-string">&quot;--i_print&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">100</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;frequency of console printout and metric loggin&#x27;</span>)<br><br>    parser.add_argument(<span class="hljs-string">&quot;--i_img&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">500</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;frequency of tensorboard image logging&#x27;</span>)<br>    <span class="hljs-comment"># 保存模型的频率</span><br>    <span class="hljs-comment"># 每隔1w保存一个</span><br>    parser.add_argument(<span class="hljs-string">&quot;--i_weights&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">10000</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;frequency of weight ckpt saving&#x27;</span>)<br><br>    <span class="hljs-comment"># 执行测试集渲染的频率</span><br>    parser.add_argument(<span class="hljs-string">&quot;--i_testset&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">50000</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;frequency of testset saving&#x27;</span>)<br><br>    <span class="hljs-comment"># 执行渲染视频的频率</span><br>    parser.add_argument(<span class="hljs-string">&quot;--i_video&quot;</span>,<br>                        <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>,<br>                        default=<span class="hljs-number">50000</span>,<br>                        <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;frequency of render_poses video saving&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> parser<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>NeRF</tag>
      
      <tag>DeepLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 进阶笔记3</title>
    <link href="/2023/04/07/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B03/"/>
    <url>/2023/04/07/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="c进阶笔记3">C++进阶笔记3</h1><h2 id="类的继承">类的继承</h2><h3 id="定义">定义</h3><p>​类的继承，是新的类从已有的类那里得到已有的特性。从已有类产生新的类的过程就叫派生。原有的类称为<strong>基类</strong>或者<strong>父类</strong>，产生的新类称为派生类或者子类。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> 派生类名:继承方式 基类名<span class="hljs-number">1</span>,继承方式 基类名<span class="hljs-number">2</span>,...,继承方式 基类名n<br>&#123;<br>    派生类成员声明;<br>&#125;;<br></code></pre></td></tr></table></figure><p>​一个派生类可以同时有多个基类(多继承),也可以只有一个基类(单继承)。直接派生出某类的基类称为直接基类，基类的基类甚至更高层的基类称为间接基类。</p><p>​<strong>继承方式</strong>规定了如何访问<strong>从基类继承的成员</strong>，指定了派生类成员以及类外对象对于从基类继承来的成员的访问权限。<strong>派生类成员</strong>是指除了基类继承来的所有成员外，新增加的数据和函数成员。不显式的给出继承方式，默认为私有继承(<code>private</code>)。</p><h3 id="生成过程">生成过程</h3><h4 id="吸收">吸收</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CreditAccount</span>: <span class="hljs-keyword">public</span> Account&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>CreditAccount</code>继承了<code>Account</code>中<strong>除构造和析构函数之外的所有非静态成员</strong>。</p><h4 id="改造">改造</h4><p>​ 继承、<strong>同名隐藏</strong>。</p><p>​<strong>同名隐藏</strong>覆盖与隐藏，如果派生列声明了一个和某基类成员同名的新成员，派生的新成员就会隐藏外层的同名人员。</p><h4 id="添加">添加</h4><p>​ 添加新的数据成员、函数成员。</p><p>​ 添加构造函数与析构函数。</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 进阶笔记2</title>
    <link href="/2023/04/03/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B02/"/>
    <url>/2023/04/03/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h1 id="c-进阶笔记2">C++ 进阶笔记2</h1><h2 id="字符串">字符串</h2><p>​ C++中可以用<strong>字符型数组</strong>和<strong>标准string类</strong>来存放字符串。</p><h3 id="声明">声明</h3><h4 id="一般声明">一般声明</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;Program&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> str[<span class="hljs-number">8</span>] = &#123;<span class="hljs-string">&#x27;P&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> str[<span class="hljs-number">8</span>] = <span class="hljs-string">&quot;Program&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;Program&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="string类">string类</h4><h5 id="构造函数">构造函数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//默认构造函数 创建一个长度为0的字符串</span><br><span class="hljs-built_in">string</span>();<br><span class="hljs-comment">//复制构造函数</span><br><span class="hljs-built_in">string</span>(<span class="hljs-type">const</span> string&amp; rhs);<br><span class="hljs-comment">//用指针s所指向的字符串常量初始化string类的对象</span><br><span class="hljs-built_in">string</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s);<br><span class="hljs-comment">//将对象rhs中的串从位置pos开始取n个字符，用来初始化string类的对象</span><br><span class="hljs-built_in">string</span>(<span class="hljs-type">const</span> string&amp; rhs,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> pos,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n);<br><span class="hljs-comment">//用指针s所指向字符串中的前n个字符初始化string类的对象</span><br><span class="hljs-built_in">string</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span>*s ,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n);<br><span class="hljs-comment">//将参数c中的字符重复n次，用来初始化string类中的对象</span><br><span class="hljs-built_in">string</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n,<span class="hljs-type">char</span> c)<br></code></pre></td></tr></table></figure><p><em>注：string类具有接受<strong>const char*</strong>类型的构造函数，因此，<strong>字符串常量</strong>和<strong>字符数组</strong>表示的字符串变量都能隐含的转化为string对象</em>、</p><p><code>string str = "Hello world!";</code></p><h5 id="操作符">操作符</h5><figure><img src="/img/string类操作符.png" alt="string类操作符" /><figcaption aria-hidden="true">string类操作符</figcaption></figure><h5 id="常用成员函数">常用成员函数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//将字符串s添加在本串尾</span><br><span class="hljs-function">string <span class="hljs-title">append</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s)</span></span>;<br><span class="hljs-comment">//赋值，将s所指向的字符串赋值给本对象</span><br><span class="hljs-function">string <span class="hljs-title">assign</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s)</span></span>;<br><span class="hljs-comment">//比较本串与str串大小，本串小返回负数，相等返回0，大于返回正数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; str)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">//将s所指的字符串位置插入本串中位置p0之前</span><br><span class="hljs-function">string&amp; <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> p0,<span class="hljs-type">const</span> <span class="hljs-type">char</span>* s)</span></span>;<br><span class="hljs-comment">//去本串中位置pos开始的n个字符，构成新的string对象返回</span><br><span class="hljs-function">string <span class="hljs-title">substr</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> pos,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">//查找并返回str在本串中第一次出现的位置</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">fine</span><span class="hljs-params">(<span class="hljs-type">const</span> basic_string &amp;str)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">//返回字符串长度</span><br><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-comment">//将本串与str中的字符串进行交换</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(string&amp; str)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="getline函数">getline()函数</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//接受输入的一整行</span><br><span class="hljs-built_in">getline</span>(cin,s2);<br><span class="hljs-comment">//输入字符串时候以&quot;,&quot;作为分隔符</span><br><span class="hljs-built_in">getline</span>(cin,s2,<span class="hljs-string">&#x27;,&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="综合案例">综合案例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//date.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __DATE_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __DATE_H__</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Date</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> year;<br><span class="hljs-type">int</span> month;<br><span class="hljs-type">int</span> day;<br><span class="hljs-type">int</span> totalDays;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getYear</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> year; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMonth</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> month; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getDay</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> day; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMaxDay</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isLeapYear</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">distance</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date)</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> totalDays - date.totalDays;<br>&#125;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// !__DATE_H__</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//date.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;date.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">namespace</span> &#123;<br><span class="hljs-comment">//namespace使得下面的定义只在当前文件中有效</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> DAYS_BEFORE_MONTH[] = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">31</span>,<span class="hljs-number">59</span>,<span class="hljs-number">90</span>,<span class="hljs-number">120</span>,<span class="hljs-number">151</span>,<span class="hljs-number">181</span>,<span class="hljs-number">212</span>,<span class="hljs-number">243</span>,<span class="hljs-number">273</span>,<span class="hljs-number">304</span>,<span class="hljs-number">334</span>,<span class="hljs-number">365</span> &#125;;<br>&#125;<br><br>Date::<span class="hljs-built_in">Date</span>(<span class="hljs-type">int</span> year, <span class="hljs-type">int</span> month, <span class="hljs-type">int</span> day) :<span class="hljs-built_in">year</span>(year), <span class="hljs-built_in">month</span>(month), <span class="hljs-built_in">day</span>(day) &#123;<br><span class="hljs-keyword">if</span> (day&lt;<span class="hljs-number">0</span> || day&gt;<span class="hljs-built_in">getMaxDay</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Invalid date:&quot;</span>;<br><span class="hljs-built_in">show</span>();<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-type">int</span> years = year - <span class="hljs-number">1</span>;<br>totalDays = years * <span class="hljs-number">365</span> + years / <span class="hljs-number">4</span> - years / <span class="hljs-number">100</span> + years / <span class="hljs-number">400</span> + DAYS_BEFORE_MONTH[month - <span class="hljs-number">1</span>] + day;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isLeapYear</span>() &amp;&amp; month &gt; <span class="hljs-number">2</span>) &#123;<br>totalDays++;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Date::getMaxDay</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isLeapYear</span>() &amp;&amp; month == <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">29</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> DAYS_BEFORE_MONTH[month] - DAYS_BEFORE_MONTH[month - <span class="hljs-number">1</span>];<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Date::show</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>cout &lt;&lt; <span class="hljs-built_in">getYear</span>() &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; <span class="hljs-built_in">getMonth</span>() &lt;&lt; <span class="hljs-string">&quot;-&quot;</span> &lt;&lt; <span class="hljs-built_in">getDay</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//account.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __ACCOUNT_H__</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __ACCOUTN_H__</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;date.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SavingsAccount</span> &#123;<br><br><span class="hljs-keyword">private</span>:<br>std::string id;<br><span class="hljs-type">double</span> balance;<br><span class="hljs-type">double</span> rate;<br>Date lastDate;<br><span class="hljs-type">double</span> accumulation;<br><span class="hljs-type">static</span> <span class="hljs-type">double</span> total;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date, <span class="hljs-type">double</span> amount, <span class="hljs-type">const</span> std::string&amp; desc)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; msg)</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">accumulate</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date)</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> accumulation + balance * date.<span class="hljs-built_in">distance</span>(lastDate);<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">SavingsAccount</span>(<span class="hljs-type">const</span> Date&amp; date, <span class="hljs-type">const</span> std::string&amp; id, <span class="hljs-type">double</span> rate);<br><span class="hljs-function"><span class="hljs-type">const</span> std::string&amp; <span class="hljs-title">getId</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> id; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> balance; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getRate</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> rate; &#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">double</span> <span class="hljs-title">getTotal</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> total; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date, <span class="hljs-type">double</span> amount, <span class="hljs-type">const</span> std::string&amp; desc)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date, <span class="hljs-type">double</span> amount, <span class="hljs-type">const</span> std::string&amp; desc)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">settle</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// !__ACCOUNT_H__</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//account.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;account.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">double</span> SavingsAccount::total = <span class="hljs-number">0</span>;<br><br>SavingsAccount::<span class="hljs-built_in">SavingsAccount</span>(<span class="hljs-type">const</span> Date&amp; date, <span class="hljs-type">const</span> string&amp; id, <span class="hljs-type">double</span> rate)<br>:<span class="hljs-built_in">id</span>(id), <span class="hljs-built_in">balance</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">rate</span>(rate), <span class="hljs-built_in">lastDate</span>(date), <span class="hljs-built_in">accumulation</span>(<span class="hljs-number">0</span>) &#123;<br>date.<span class="hljs-built_in">show</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\t#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot; created&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingsAccount::record</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date, <span class="hljs-type">double</span> amount, <span class="hljs-type">const</span> string&amp; desc)</span> </span>&#123;<br>accumulation = <span class="hljs-built_in">accumulate</span>(date);<br>lastDate = date;<br>amount = <span class="hljs-built_in">floor</span>(amount * <span class="hljs-number">100</span> + <span class="hljs-number">0.5</span>) / <span class="hljs-number">100</span>;<br>balance += amount;<br>total += amount;<br>date.<span class="hljs-built_in">show</span>();<br>cout &lt;&lt; <span class="hljs-string">&quot;\t#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; amount &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; balance &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; desc &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingsAccount::error</span><span class="hljs-params">(<span class="hljs-type">const</span> string&amp; msg)</span> <span class="hljs-type">const</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error(#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;):&quot;</span> &lt;&lt; msg &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingsAccount::deposit</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date, <span class="hljs-type">double</span> amount, <span class="hljs-type">const</span> string&amp; desc)</span> </span>&#123;<br><span class="hljs-built_in">record</span>(date, amount, desc);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingsAccount::withdraw</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date, <span class="hljs-type">double</span> amount, <span class="hljs-type">const</span> string&amp; desc)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-built_in">getBalance</span>()) &#123;<br><span class="hljs-built_in">error</span>(<span class="hljs-string">&quot;no enough money&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">record</span>(date, -amount, desc);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingsAccount::settle</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date)</span> </span>&#123;<br><span class="hljs-type">double</span> interest = <span class="hljs-built_in">accumulate</span>(date) * rate / date.<span class="hljs-built_in">distance</span>(<span class="hljs-built_in">Date</span>(date.<span class="hljs-built_in">getYear</span>() - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br><span class="hljs-keyword">if</span> (interest != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">record</span>(date, interest, <span class="hljs-string">&quot;interest&quot;</span>);<br>&#125;<br>accumulation = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingsAccount::show</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>cout &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;\tBalance:&quot;</span> &lt;&lt; balance;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//main.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;account.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Date <span class="hljs-title">date</span><span class="hljs-params">(<span class="hljs-number">2008</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>)</span></span>;<br>SavingsAccount accounts[] = &#123;<br><span class="hljs-built_in">SavingsAccount</span>(date,<span class="hljs-string">&quot;11111&quot;</span>,<span class="hljs-number">0.015</span>),<br><span class="hljs-built_in">SavingsAccount</span>(date,<span class="hljs-string">&quot;22222&quot;</span>,<span class="hljs-number">0.015</span>)<br>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-built_in">sizeof</span>(accounts) / <span class="hljs-built_in">sizeof</span>(SavingsAccount);<br>accounts[<span class="hljs-number">0</span>].<span class="hljs-built_in">deposit</span>(<span class="hljs-built_in">Date</span>(<span class="hljs-number">2008</span>, <span class="hljs-number">11</span>, <span class="hljs-number">5</span>), <span class="hljs-number">5000</span>, <span class="hljs-string">&quot;salary&quot;</span>);<br>accounts[<span class="hljs-number">1</span>].<span class="hljs-built_in">deposit</span>(<span class="hljs-built_in">Date</span>(<span class="hljs-number">2008</span>, <span class="hljs-number">11</span>, <span class="hljs-number">25</span>), <span class="hljs-number">10000</span>, <span class="hljs-string">&quot;sell stock&quot;</span>);<br><br>accounts[<span class="hljs-number">0</span>].<span class="hljs-built_in">deposit</span>(<span class="hljs-built_in">Date</span>(<span class="hljs-number">2008</span>, <span class="hljs-number">12</span>, <span class="hljs-number">5</span>), <span class="hljs-number">5500</span>, <span class="hljs-string">&quot;salary&quot;</span>);<br>accounts[<span class="hljs-number">1</span>].<span class="hljs-built_in">withdraw</span>(<span class="hljs-built_in">Date</span>(<span class="hljs-number">2008</span>, <span class="hljs-number">12</span>, <span class="hljs-number">20</span>), <span class="hljs-number">4000</span>, <span class="hljs-string">&quot;by laptop&quot;</span>);<br><br>cout &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>accounts[i].<span class="hljs-built_in">settle</span>(<span class="hljs-built_in">Date</span>(<span class="hljs-number">2009</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>accounts[i].<span class="hljs-built_in">show</span>();<br>cout &lt;&lt; endl;<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;Total:&quot;</span> &lt;&lt; SavingsAccount::<span class="hljs-built_in">getTotal</span>() &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="深度探索">深度探索</h2><h3 id="指针和引用">指针和引用</h3><p>​二者殊途同归，最后都是靠存储地址来实现的。除了语言形式上的差异之外，另一个显著差别就是普通指针可以多次赋值，多次更改其指向的对象，而引用只能在初始化的时候指定被引用的对象，其后就不能更改（<strong>引用声明后就已经具有常量性质</strong>）。</p><p>​指针可以再被取地址，但是引用本身的地址是不可以再被获取的。(引用一经定义，其全部行为全是针对被引用对象的，引用本身所占用的空间则完全被隐藏起来)</p><figure><img src="/img/指针常量与引用形式的对比.png"alt="指针常量与引用形式的对比" /><figcaption aria-hidden="true">指针常量与引用形式的对比</figcaption></figure><p>​<strong>来源：</strong>为了能够更加方便、安全地处理数据双向传递，减少参数传递开销，C++对指针进行了简单的包装，引入了引用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Test</span><span class="hljs-params">(<span class="hljs-type">const</span> Date&amp; date)</span></span>;<br><span class="hljs-comment">//const ： 不能用date引用来改变了date里的东西</span><br><span class="hljs-comment">//Date&amp; 声明了这个引用就和传进来的date绑定了，不能换到别的引用。</span><br></code></pre></td></tr></table></figure><h4 id="必须要用指针情况">必须要用指针情况</h4><ol type="1"><li>所指向的对象，需要用分支语句确定或者在中途需要改变其所指向的对象。</li><li>指针的值可能是空指针，例如把指针作为函数的参数类型或者返回类型时，有时会用空指针表达特定的含义。</li><li>函数指针</li><li>使用<code>new</code>动态创建的对象或数组，需要用指针来存储地址。</li><li>以数组形式传递大批量数据时，需要用指针类型作为参数接收。</li></ol><h3 id="指针的安全性">指针的安全性</h3><h4 id="地址安全性">地址安全性</h4><p>​可能由指针的算数运算造成。一定要限制在用指向数组中某个元素的指针，得到指向同一个数组中另一个元素的指针。最典型的问题就是<strong>数组下标越界</strong>。</p><p>​ 最安全的办法：尽量不直接通过指针来使用数组，而是使用封装类。</p><h4 id="类型的安全性">类型的安全性</h4><p>​ 基本数据类型之间的转换是基于内容的转换。</p><p>​指针允许做类型的显示或者隐式转换。不同类型的指针的区别只是将相应地址中的数据被解释为不同类型而已。两种类型可能具有不同的空间</p><figure><img src="/img/指针类型转换时安全性问题.png"alt="指针类型转换时安全性问题" /><figcaption aria-hidden="true">指针类型转换时安全性问题</figcaption></figure><h4 id="堆对象的管理">堆对象的管理</h4><p>​ <strong>new创建的对象，必须用delete删除</strong></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 进阶笔记</title>
    <link href="/2023/03/31/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/31/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="c进阶笔记">C++进阶笔记</h1><h2 id="数组">数组</h2><p>​ 数组是具有一定顺序关系的若干对象的集合。</p><p>​ <code>array[N]</code> 数组的下标从<code>0</code>开始。</p><h3 id="声明">声明</h3><p>​ <strong>数据类型 标识符 [常量表达式1] [常量表达式2]</strong></p><p>​ 数据类型:整型、浮点型、<strong>结构体</strong>、<strong>类</strong>等</p><h3 id="使用">使用</h3><p>​ <strong>数组名 [常量表达式1] [常量表达式2]</strong></p><h4 id="范围for循环">范围for循环</h4><p>​对给定序列中每一个元素按序列中元素的顺序逐一访问，配合<code>auto</code>自动判断元素类型。用来实现数组元素的快速遍历。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp;e : a)&#123;<br>    cout &lt;&lt; e &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-comment">//二维数组</span><br><span class="hljs-type">int</span> arry[][<span class="hljs-number">3</span>] = &#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125; &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> (&amp;row)[<span class="hljs-number">3</span>] : arry) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> &amp;e : row) &#123;<br>cout &lt;&lt; e &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;row : arry) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;e : row) &#123;<br>cout &lt;&lt; e &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="下标迭代for循环">下标迭代for循环</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>    cout &lt;&lt; b[i] &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于二维数组">关于二维数组</h3><p>​C++中二维数组被当作一维的数组，<code>int m[2][3]</code>可以看作大小是<code>2</code>，每个元素都是一个大小为<code>3</code>，类型为<code>int</code>类型的数组。</p><h4 id="数组定义">数组定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br><span class="hljs-type">int</span> a[][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span> a[][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br><br><span class="hljs-comment">//对象数组 注意有缺省值的时候，需要适当改动默认构造函数</span><br>Location loc[<span class="hljs-number">2</span>] =&#123;<span class="hljs-built_in">Location</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),<span class="hljs-built_in">Location</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)&#125;<br><br></code></pre></td></tr></table></figure><figure><img src="/img/二维数组与地址.webp" alt="二维数组与地址" /><figcaption aria-hidden="true">二维数组与地址</figcaption></figure><h3 id="数组作为函数参数">数组作为函数参数</h3><p>​传递的是<strong>地址</strong>。数组作为参数时，函数里一般不指定第一维的大小。</p><p>​ <strong>数组的名称代表数组首元素的地址</strong></p><p>​<strong>数组的名称取地址(&amp;数组名称)代表整个数组开始的地址</strong>，虽然和数组首元素的地址</p><h3 id="实例">实例</h3><p>​ <strong>注意.h文件的 def</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Point.h 类的定义</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _POINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POINT_H</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>();<br>~<span class="hljs-built_in">Point</span>();<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">movePoints</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span></span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Point.cpp</span><br><span class="hljs-comment">//Point.h 类的具体实现</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Point.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>Point::<span class="hljs-built_in">Point</span>():<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">y</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Deafult constructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>Point::~<span class="hljs-built_in">Point</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Destructor called&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y):<span class="hljs-built_in">x</span>(x),<span class="hljs-built_in">y</span>(y)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Constructor called&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Point::movePoints</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span> </span>&#123;<br>x = newX;<br>y = newY;<br>cout &lt;&lt; <span class="hljs-string">&quot;Move to new Points(&quot;</span> &lt;&lt; newX &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; newY &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//主函数 .cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Point.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Point a[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)&#123;<br>a[i].<span class="hljs-built_in">movePoints</span>(i + <span class="hljs-number">10</span>, i + <span class="hljs-number">11</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="实例2">实例2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Point.h 类的定义 头文件</span><br><span class="hljs-comment">//注意使用了友元函数 linefit函数中，可以直接访问 x,y</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Point_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Point_H</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">float</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">float</span> y = <span class="hljs-number">0</span>) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">float</span> <span class="hljs-title">lineFit</span><span class="hljs-params">(<span class="hljs-type">const</span> Point points[], <span class="hljs-type">int</span> nPoint)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">float</span> x, y;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//main.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Point.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//友元函数 直接访问Point的私有属性 x,y</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">lineFit</span><span class="hljs-params">(<span class="hljs-type">const</span> Point points[], <span class="hljs-type">int</span> nPoint)</span> </span>&#123;<br><span class="hljs-type">float</span> avgX = <span class="hljs-number">0</span>, avgY = <span class="hljs-number">0</span>;<br><span class="hljs-type">float</span> lxx = <span class="hljs-number">0</span>, lyy = <span class="hljs-number">0</span>, lxy = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nPoint; i++)&#123;<br>avgX += points[i].x/nPoint;<br>avgY += points[i].y/nPoint;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nPoint; i++)&#123;<br>lxx += (points[i].x - avgX) * (points[i].x - avgX);<br>lyy += (points[i].y - avgY) * (points[i].y - avgY);<br>lxy += (points[i].x - avgX) * (points[i].y - avgY);<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;This lien can be fitted by y=ax+b.&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;a=&quot;</span> &lt;&lt; lxy / lxx &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b=&quot;</span> &lt;&lt; avgY - lxy * avgX / lxx &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">float</span>&gt;(lxy / <span class="hljs-built_in">sqrt</span>(lxx * lyy));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Point p[<span class="hljs-number">10</span>] = &#123; <span class="hljs-built_in">Point</span>(<span class="hljs-number">6</span>,<span class="hljs-number">10</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">14</span>,<span class="hljs-number">20</span>), <span class="hljs-built_in">Point</span>(<span class="hljs-number">26</span>,<span class="hljs-number">30</span>), <span class="hljs-built_in">Point</span>(<span class="hljs-number">33</span>,<span class="hljs-number">40</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">46</span>,<span class="hljs-number">50</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">54</span>,<span class="hljs-number">60</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">67</span>,<span class="hljs-number">70</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">75</span>,<span class="hljs-number">80</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">84</span>,<span class="hljs-number">90</span>), <span class="hljs-built_in">Point</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>) &#125;;<br><span class="hljs-type">float</span> r = <span class="hljs-built_in">lineFit</span>(p, <span class="hljs-number">10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;Line coefficient r=&quot;</span> &lt;&lt; r &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="指针"><strong>指针</strong></h2><p>​<strong>指针</strong>也是一种数据类型，具有指针类型的变量称为<strong>指针变量</strong>，指针变量是用来存放<strong>内存单元地址</strong>的。</p><h3 id="声明-1">声明</h3><p>​ <strong>数据类型 *标识符</strong></p><p>​<strong>数据类型</strong>可以是任意类型，代表指针所指向的对象的类型。</p><p>​ 举例:</p><p>​ <code>int *ptr</code></p><p>​定义了一个指向<code>int</code>类型数据的指针变量，这个指针的名字是<code>ptr</code>，存放<code>int</code>型数据的地址。</p><h4 id="与地址相关的运算-和">与地址相关的运算 * 和 &amp;</h4><p>​ <strong>*</strong> 表示获取指针变量所指向的值，一元操作符。</p><p>​ <strong>&amp;</strong> 表示获得一个对象的地址，一元操作符。</p><p>​ <strong><em>注意：</em></strong></p><p>​ <strong>*</strong>出现在声明语句中，在被声明的变量名之前时，表面声明的是指针。</p><p>​ <code>int *p</code> 声明指针变量<code>p</code></p><p>​ <strong>*</strong>出现在执行语句中或者声明语句的初值表达式中作为一元运算符时，表示指针所访问的对象的内容。</p><p>​ <code>cout&lt;&lt; *p</code>打印<code>p</code>所指向的内存单元的值</p><p>​ <strong>&amp;</strong>出现在<strong>变量声明语句</strong>中位于<strong>被声明变量的左边</strong>时，表示声明的是<strong>引用</strong>。</p><p>​ <code>int &amp;rf</code> 表明<code>rf</code>是个引用</p><p>​ <strong>&amp;</strong>在<strong>给变量赋初值</strong>的时候出现在<strong>等号右边</strong>或者在<strong>执行语句中作为一元运算符出现</strong>时，表示取对象的地址。</p><p>​ <code>int a,b;</code></p><p>​ <code>int *pa,*pb = &amp;b;</code>声明指针变量<code>pa、pb</code>，<code>b</code>的地址赋给指针<code>pb</code>.</p><p>​ <code>pa = &amp;a;</code><code>a</code>的地址赋给指针<code>pa</code>.</p><h3 id="赋值">赋值</h3><p>​ <strong>存储类型 数据类型 *指针名 = 初始地址</strong></p><p>​ <strong>指针名 = 地址</strong></p><p>​ <em>数组名其实是一个不能被赋值的指针，即指针常量</em></p><p>​ <code>int a[10];</code></p><p>​ <code>int *ptr = a;</code></p><h4 id="空指针">空指针</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//用0和NULL表示/</span><br><span class="hljs-type">int</span> *p;<br>p=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> *p = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><h4 id="void类型指针">void类型指针</h4><p>​<code>void</code>类型的指针经过显示转换之后可以访问任何类型的数据。一般只在指向的数据类型不确定时使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">void</span> *pv;<br><span class="hljs-type">int</span> i =<span class="hljs-number">5</span> ;<br>pv = &amp;i;<br><span class="hljs-type">int</span> *pint = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span> *&gt;(pv); <span class="hljs-comment">// void类型指针转换后赋给int型指针</span><br>cout &lt;&lt; <span class="hljs-string">&quot;*pint=&quot;</span> &lt;&lt; *pint &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h4id="指向常量的指针与指针类型的常量">指向常量的指针与指针类型的常量</h4><p><span id="CONST_PTR&amp;&amp;PTR_CONST"></span></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//指向常量的指针</span><br><span class="hljs-comment">//指针可以乱指，但是必须不能用指针去改指向的值</span><br><span class="hljs-type">int</span> a;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> *p1 = &amp;a;<br><span class="hljs-type">int</span> b;<br>p1 = &amp;b; <span class="hljs-comment">//正确，p1本身的值可以改变</span><br>*p1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//错误，不能改变p1所指向的对象的值</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//指针类型的常量</span><br><span class="hljs-type">int</span> a,b;<br><span class="hljs-type">int</span>* <span class="hljs-type">const</span> p2 = &amp;a;<br>p2 = &amp;b; <span class="hljs-comment">//错误，p2是指针常量，值不能改变。</span><br></code></pre></td></tr></table></figure><h3 id="运算">运算</h3><p>​ 指针可以和整数进行加减运算。</p><p>​ <code>*(p1+n1)</code> 或<code>p1[n1]</code>表示<code>p1</code>当前所指位置后方的第 <code>n1</code> 个数的内容。</p><figure><img src="/img/C++_PtArray.png" alt="C++指针" /><figcaption aria-hidden="true">C++指针</figcaption></figure><h4 id="begin-与-end-函数">begin 与 end 函数</h4><p>​ C++ 11引入了<code>begin</code>和<code>end</code>函数，将数组作为参数。<code>begin</code>返回指向数组<strong>首元素</strong>的指针，<code>end</code>返回指向数组<strong>尾元素下一位置</strong>的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//查找arr数组中第一个负数</span><br><span class="hljs-type">int</span> *pbeg =  <span class="hljs-built_in">begin</span>(arr),*pend = <span class="hljs-built_in">end</span>(arr);<br><span class="hljs-keyword">while</span>(pbeg != pend &amp;&amp; *pbeg &gt;= <span class="hljs-number">0</span>)<br>    ++pbeg;<br></code></pre></td></tr></table></figure><h4 id="一维实例">一维实例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-type">int</span>* p = a;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>cout &lt;&lt; *(p+i) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>* q = a; q &lt; (a+<span class="hljs-number">3</span>); q++) &#123;<br>cout &lt;&lt; *q &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指针数组与数组指针">指针数组与数组指针</h3><p>​数组中的每个元素都是指针变量。指针数组中的每个元素都必须是同一类型的指针。</p><p>​ <strong>数据类型 *数组名[下标表达式]</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> line1[] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> &#125;;<br><span class="hljs-type">int</span> line2[] = &#123; <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> &#125;;<br><span class="hljs-type">int</span> line3[] = &#123; <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span> &#125;;<br><span class="hljs-comment">//指针数组 存放三个元素都是指针元素 </span><br><span class="hljs-comment">//line123 数组名 数组元素的首地址 指向数组的指针</span><br><span class="hljs-type">int</span>* pLine[<span class="hljs-number">3</span>] = &#123; line1,line2,line3 &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>cout &lt;&lt; *(*(pLine + i) + j) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125; &#125;;<br>    <span class="hljs-comment">//把二维数组直接当作指针数组来访问</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>cout &lt;&lt; *(*(arr + i) + j) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//数组指针 指向数组的首地址</span><br><span class="hljs-built_in">int</span>(*arrPtr)[<span class="hljs-number">3</span>] = arr;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>cout &lt;&lt; *(*(arrPtr + i) + j) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">//指针数组 存放的每个元素都是指向各个数组首元素的指针(数组名)</span><br>    <span class="hljs-comment">//相当于前面的line1 line2 line3</span><br><span class="hljs-type">int</span>* ptrArr[<span class="hljs-number">3</span>] = &#123; arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">1</span>],arr[<span class="hljs-number">2</span>]&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>cout &lt;&lt; *(*(ptrArr + i) + j) &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure><img src="/img/C++_PtArray2.jpg" alt="指针数组与二维数组" /><figcaption aria-hidden="true">指针数组与二维数组</figcaption></figure><h5 id="辨析">辨析</h5><p>根据给出的代码，以下是输出结果和解释：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//数组元素</span><br>array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]: <span class="hljs-number">1</span><br><span class="hljs-comment">//一个int型数组元素所占空间 4个字节</span><br><span class="hljs-keyword">sizeof</span> array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]: <span class="hljs-number">4</span><br><span class="hljs-comment">//指向一个数组元素的指针(数组元素[0][0]的地址)    </span><br>&amp;array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]: <span class="hljs-number">0x7fffa23b2af0</span> <br><span class="hljs-comment">//指向一个数组元素的指针所占空间 8个字节</span><br><span class="hljs-keyword">sizeof</span> &amp;array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]: <span class="hljs-number">8</span> <br>    <br><span class="hljs-comment">//代表一维数组的首地址（在里面指向第一个元素）</span><br>array[<span class="hljs-number">0</span>]: <span class="hljs-number">0x7fffa23b2af0</span> <br><span class="hljs-comment">//定义一个整型指针，代表指向一维数组里的第一个元素（首地址）</span><br><span class="hljs-built_in">int</span> (*p) = array[<span class="hljs-number">0</span>]; <br><span class="hljs-comment">//例子中一个一维数组所占空间 4*4=16字节</span><br><span class="hljs-keyword">sizeof</span> array[<span class="hljs-number">0</span>]: <span class="hljs-number">16</span> <br>    <br><span class="hljs-comment">//代表整个一维数组的首地址（在外面指向一个整个一维数组）</span><br>&amp;array[<span class="hljs-number">0</span>]: <span class="hljs-number">0x7fffa23b2af0</span><br> <span class="hljs-comment">//定义一个整型数组指针，代表指向整个一维数组</span><br><span class="hljs-built_in">int</span> (*p)[<span class="hljs-number">4</span>] = &amp;array[<span class="hljs-number">0</span>];<br> <span class="hljs-comment">//一个指向以一维数组的指针所占空间 8个字节</span><br><span class="hljs-keyword">sizeof</span> &amp;array[<span class="hljs-number">0</span>]: <span class="hljs-number">8</span> <br>    <br>    <br><span class="hljs-comment">//指向二维数组的指针地址</span><br>array: <span class="hljs-number">0x7fffa23b2af0</span> <br><span class="hljs-comment">//整个二维数组所占空间 2*4*4=32</span><br><span class="hljs-keyword">sizeof</span> array: <span class="hljs-number">32</span> <br><span class="hljs-comment">//指向一整个二维数组的指针</span><br>&amp;array : <span class="hljs-number">0x7fffa23b2af0</span><br><span class="hljs-comment">//指向一整个二维数组的指针所占空间 8个字节   </span><br><span class="hljs-keyword">sizeof</span> &amp;array : <span class="hljs-number">8</span> <br></code></pre></td></tr></table></figure><p>array[0][0]：输出第一行第一列的元素值，即 1。 sizeofarray[0][0]：输出一个 int 类型变量所占据的字节数，即 4。&amp;array[0][0]：输出第一行第一列的元素的内存地址，即 0x7fffa23b2af0。sizeof &amp;array[0][0]：输出一个指向 int 类型的指针所占据的字节数，即8。 array[0]：输出第一行的数组的起始地址，即 0x7fffa23b2af0。 sizeofarray[0]：输出一个包含 4 个 int 类型元素的一维数组所占据的字节数，即16。 &amp;array[0]：输出第一行的数组的起始地址，即 0x7fffa23b2af0。sizeof &amp;array[0]：输出一个指向包含 4 个 int类型元素的一维数组的指针所占据的字节数，即 8。array：输出整个二维数组的起始地址，即 0x7fffa23b2af0。 sizeofarray：输出一个包含 4 个包含 4 个 int类型元素的一维数组的二维数组所占据的字节数，即 32。&amp;array：输出整个二维数组的起始地址，即 0x7fffa23b2af0。 sizeof&amp;array：输出一个指向包含 4 个包含 4 个 int类型元素的一维数组的二维数组的指针所占据的字节数，即 8。</p><p>解释：本题中的二维数组 array 由 4 个一维数组组成，每个一维数组包含 4个 int 类型的元素。 因此，array[0][0] 输出第一行第一列的元素值 1，sizeof array[0][0] 输出一个int 类型变量所占据的字节数 4。&amp;array[0][0] 输出第一行第一列的元素的内存地址， sizeof(array) =32：因为数组array共有2行4列，每个元素是int类型，所以占用总共的空间是2 *4 * sizeof(int) = 32个字节。 &amp;array =0x7ffcbf5a5d50：这是数组array的地址，它是一个指向数组的指针，占用8个字节。sizeof(&amp;array) =8：&amp;array是一个指向数组的指针，它的大小也是8个字节。</p><p>总之，数组名在大多数情况下会被解释为指向数组第一个元素的指针，但是当它作为sizeof、&amp;、和赋值操作符的操作数时，它会被解释为指向整个数组的指针。</p><p>数组名 array 在这里表示整个数组，因此在 sizeof 操作符中使用 array时，返回的是整个数组占用的空间大小，即 2 * 4 * sizeof(int) = 32个字节。</p><p>在输出 array 的地址时，使用的是 &amp;array，即数组名 array的地址。这个地址占用的空间大小是一个指针的大小，即 8 个字节。</p><p>需要注意的是，虽然数组名在很多情况下会被自动转换为指向数组首元素的指针，但是在sizeof 操作符和 &amp;操作符中，它们都代表整个数组。因此，对于数组名的使用要根据具体的语境来理解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125; &#125;;<br><span class="hljs-comment">//arr代表第一个元素的地址， 即第一个大小为3的数组的地址。</span><br><span class="hljs-comment">//arrPtr代表指向数组的指针，因此可以直接赋值。</span><br><span class="hljs-built_in">int</span>(*arrPtr)[<span class="hljs-number">3</span>] = arr;<br><br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;; <br><span class="hljs-comment">//arr代表第一个元素的地址， arrPtr代表指向数组的指针</span><br><span class="hljs-comment">//&amp;arr代表数组arr的地址，即指向arr数组的指针，虽然可能&amp;arr和arr值一样</span><br><span class="hljs-built_in">int</span>(*arrPtr)[<span class="hljs-number">3</span>] = &amp;arr;<br>为什么第四句话有取地址符而第二句话没有？<br></code></pre></td></tr></table></figure><p>​ 在第二句代码中，数组名 <code>arr</code> 表示的是二维数组<code>int arr[3][3]</code> 中第一个一维数组 <code>int arr[0]</code>的地址，即 <code>arr</code> 等价于 <code>&amp;arr[0]</code>。因此，将<code>arr</code> 直接赋值给指针 <code>arrPtr</code>，是可以正确的。</p><p>​ 而在第四句代码中，数组名 <code>arr</code> 表示的是一维数组<code>int arr[3]</code> 中第一个元素 <code>int arr[0]</code>的地址。由于指针 <code>arrPtr</code> 的类型为<code>int (*)[3]</code>，即指向一个包含 3 个 <code>int</code>元素的数组的指针，因此需要使用取地址符 <code>&amp;</code> 将一维数组<code>arr</code> 的地址取出，并强制转换为 <code>int (*)[3]</code>类型的指针，才能正确地将其赋值给 <code>arrPtr</code>。</p><p>​<strong>简而言之：数组中数组名代表第一个元素的地址。一维数组的数组名代表第一个元素的地址(&amp;a[0])，想赋值给(*p)[]（指向数组的指针），必须传数组开始的地址(虽然值上可能一样)，所以需要取地址符&amp;。二吗数组中数组名代表第一个元素也就是第一个一维数组的地址，想赋值给(*p)[](指向数组的指针)，可以直接赋值。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> b[][<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span> &#125;;<br><span class="hljs-built_in">int</span> (*b)[<span class="hljs-number">4</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br>cout &lt;&lt; b &lt;&lt; endl;<br><span class="hljs-comment">//输出b数组的地址 第一行的地址</span><br><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(b) &lt;&lt; endl;<br><span class="hljs-comment">//输出b数组所占用的字节数 4*2*4 = 32</span><br><br>cout &lt;&lt; &amp;b &lt;&lt; endl;<br><span class="hljs-comment">//输出b数组的地址，整个二维数组的地址</span><br><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(&amp;b) &lt;&lt; endl;<br><span class="hljs-comment">//输出指向整个二维数组的指针所占用的字节数 8</span><br><br>cout &lt;&lt; b[<span class="hljs-number">0</span>] &lt;&lt; endl;<br><span class="hljs-comment">//输出数组第一行的地址</span><br><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(b[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><span class="hljs-comment">//输出第一行所占用的字节数 4*4 = 16</span><br><br>cout &lt;&lt; &amp;b[<span class="hljs-number">0</span>] &lt;&lt; endl;<br><span class="hljs-comment">//输出数组第一行的地址</span><br><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(&amp;b[<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><span class="hljs-comment">//输出指向第一行的指针所占用的字节数</span><br><br>cout &lt;&lt; &amp;b[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] &lt;&lt; endl;<br><span class="hljs-comment">//输出第一个元素的地址</span><br><br>cout &lt;&lt; <span class="hljs-built_in">sizeof</span>(b[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]) &lt;&lt; endl;<br><span class="hljs-comment">//输出每个元素所占用的字节数</span><br></code></pre></td></tr></table></figure><figure><img src="/img/大小.png" alt="元素大小" /><figcaption aria-hidden="true">元素大小</figcaption></figure><figure><img src="/img/二维数组.jpg" alt="二维数组" /><figcaption aria-hidden="true">二维数组</figcaption></figure><h3 id="指针作为函数参数">指针作为函数参数</h3><ol type="1"><li>使得实参与形参指针指向共同的内存空间，达到参数双向传递的目的。即通过被调函数中直接处理主函数中的数据而将函数的处理结果返回其调用者。</li><li>减少函数调用时候的开销。C++中可以通过引用和指针实现。</li><li>C++中指向函数的指针传递函数代码的首地址。</li></ol><p>​<strong>如果函数体中不需要通过指针改变指针所指向变量的内容，应在参数表中将其声明为指向常量的指针，这样使得常对象被取地址后也可以作为该函数的参数。</strong><ahref="#CONST_PTR&amp;&amp;PTR_CONST">指向常量的指针与指针类型的常量</a></p><h4 id="指针作为参数">指针作为参数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floatSplit</span><span class="hljs-params">(<span class="hljs-type">float</span> x, <span class="hljs-type">int</span>* intPart, <span class="hljs-type">float</span>* floatPart)</span> </span>&#123;<br>*intPart = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(x);<br>*floatPart = x - *intPart;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">float</span> x=<span class="hljs-number">3.145</span>, f;<br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">floatSplit</span>(x, &amp;n, &amp;f);<br>cout &lt;&lt; <span class="hljs-string">&quot;n:&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;f&quot;</span> &lt;&lt; f &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指针型函数">指针型函数</h3><p>​函数的返回值为<strong>指针类型</strong>，这个函数就是指针型函数。使用指针函数的主要目的就是要在函数结束时<strong>把大量的数据从被调函数返回到主调函数中</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">数据类型 *函数名(参数表)&#123;<br>    函数体<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数返回数组指针">函数返回数组指针</h4><p>​因为数组不能被复制，因此不能直接返回数组，但是可以<strong>返回数组的指针</strong>。</p><ol type="1"><li>利用<strong>类型别名</strong>的方法简化操作。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>]; <span class="hljs-comment">// arr 类型别名 代表含有10个整数的数组</span><br><span class="hljs-keyword">using</span> arr = <span class="hljs-type">int</span>[<span class="hljs-number">10</span>]; <span class="hljs-comment">// arr等价声明</span><br><span class="hljs-function">arr *<span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<span class="hljs-comment">// foo返回一个指向含有10个整数的数组的指针</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li><p>不使用类型别名的话，数组的维度必须跟在函数的名字之后，函数的形参列表也跟在函数名字后面并且先于数组的维度。</p><p><strong>类型说明符 (*函数名 ( 参数表) )[数组维度]</strong></p><p><code>int (*foo(int i))[10]</code>返回一个大小为10的整型数组指针。</p><p>C++ 11中提供了简化上述声明的方法。<strong>尾置返回类型</strong></p><p><code>auto foo(int i) -&gt; int(*)[10];</code></p><p>接受一个<code>int</code>类型的参数，返回一个指向10个<code>int</code>类型的数组的指针。</p></li><li><p>如果知道函数返回的指针将指向哪个数组，就可以用<code>decltype</code>关键词声明返回类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span> b[] = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br><br><span class="hljs-keyword">decltype</span>(a) *<span class="hljs-built_in">func</span>(<span class="hljs-type">int</span> i)&#123;<br>    <span class="hljs-keyword">return</span> (i%<span class="hljs-number">2</span>) ? &amp;a:&amp;b;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>具体例子</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>]; <span class="hljs-comment">//arr是一个含有10个整数的数组</span><br><span class="hljs-type">int</span> *p1[<span class="hljs-number">10</span>]; <span class="hljs-comment">//p1是一个含有10个指针的数组</span><br><span class="hljs-built_in">int</span> (*p2)[<span class="hljs-number">10</span>]; <span class="hljs-comment">//p2是一个指针，指向含有10个整数的数组arr。</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">using</span> arrT = <span class="hljs-type">int</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">//或者typedef int arrT[5];</span><br><span class="hljs-type">int</span> arry[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-function">arrT* <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> &amp;arry;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">int</span> (*p)[<span class="hljs-number">5</span>] =<span class="hljs-built_in">func</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>    &#123;<br>        cout&lt;&lt;*(*p + i)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">5</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-built_in">int</span>(*<span class="hljs-built_in">make_array</span>())[<span class="hljs-number">5</span>]<span class="hljs-comment">//如果是引用的形式也可以</span><br>&#123;<br>    <span class="hljs-keyword">return</span> &amp;a;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">int</span> (*p)[<span class="hljs-number">5</span>]=<span class="hljs-built_in">make_array</span>();<br>    cout&lt;&lt;*p&lt;&lt;endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i!=<span class="hljs-number">5</span>;++i)<br>    &#123;<br>        cout&lt;&lt;(**p)++&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">//*p只能得到数组的地址</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> arry[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">func</span><span class="hljs-params">()</span> -&gt; <span class="hljs-title">int</span><span class="hljs-params">(*)</span>[10]</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> &amp;arry;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">int</span> (*p)[<span class="hljs-number">10</span>] =<span class="hljs-built_in">func</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)<br>    &#123;<br>        cout&lt;&lt;(**p)++&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstddef&gt;</span></span><br><span class="hljs-keyword">using</span> std::<span class="hljs-type">size_t</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> odd[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-type">int</span> even[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-keyword">decltype</span>(odd) *<span class="hljs-built_in">arrPtr</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    <span class="hljs-keyword">return</span> (i % <span class="hljs-number">2</span>) ? &amp;odd : &amp;even; <span class="hljs-comment">// returns a pointer to the array</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">int</span> (*arrP)[<span class="hljs-number">5</span>] = <span class="hljs-built_in">arrPtr</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">// arrP points to an array of five ints</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>        cout &lt;&lt; (*arrP)[i] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> odd[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-type">int</span> even[] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-keyword">decltype</span>(odd) &amp;<span class="hljs-built_in">arrPtr</span>(<span class="hljs-type">int</span> i)<br>&#123;<br>    <span class="hljs-keyword">return</span> (i % <span class="hljs-number">2</span>) ? odd : even; <span class="hljs-comment">// returns a pointer to the array</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">int</span> (&amp;arrP)[<span class="hljs-number">5</span>] = <span class="hljs-built_in">arrPtr</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">// arrP points to an array of five ints</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>        cout &lt;&lt; (arrP)[i] &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="指向函数的指针">指向函数的指针</h3><p>​每个函数的函数名代表代码在内存中的起始地址。调用函数的通常形式<strong>“函数名(参数表)”</strong>的实质就是<strong>“函数代码的首地址(参数表)”</strong>。</p><p>​<strong>指向函数的指针</strong>(函数指针)就是用来存放函数代码首地址的变量。</p><p>​ <strong>数据类型 (* 函数指针名) (形参表)</strong></p><p>​函数指针在使用前也要进行赋值，使指针指向一个已经存在的函数代码的起始地址。</p><p>​ <code>指针名 = 函数名</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print1</span><span class="hljs-params">(<span class="hljs-type">float</span>)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;print1&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print2</span><span class="hljs-params">(<span class="hljs-type">float</span> data)</span> </span>&#123;<br>cout &lt;&lt; data &lt;&lt; endl;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">void</span> (*test)(<span class="hljs-type">float</span>);<br>test = print1;<br><span class="hljs-built_in">test</span>(<span class="hljs-number">2.0</span>);<br>test = print2;<br><span class="hljs-built_in">test</span>(<span class="hljs-number">3.0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 可以使用<code>typedef</code>简化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">void</span><span class="hljs-params">(*typeFuncPtr)</span><span class="hljs-params">(<span class="hljs-type">float</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print1</span><span class="hljs-params">(<span class="hljs-type">float</span>)</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;print1&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print2</span><span class="hljs-params">(<span class="hljs-type">float</span> data)</span> </span>&#123;<br>cout &lt;&lt; data &lt;&lt; endl;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>typeFuncPtr funcPtr;<br>funcPtr = print1;<br><span class="hljs-built_in">funcPtr</span>(<span class="hljs-number">2.0</span>);<br>funcPtr = print2;<br><span class="hljs-built_in">funcPtr</span>(<span class="hljs-number">3.0</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对象指针">对象指针</h3><p>​ 对象指针是用来存放对象地址的变量。</p><p>​ <strong>类名 * 对象指针名</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">Point* pointPtr;<br>Point p1;<br>pointPtr = &amp;p1;<br></code></pre></td></tr></table></figure><p>​使用对象指针可以方便的访问对象的成员，但是使用之前一定要初始化，让它指向一个已经声明过的对象在使用。通过对象指针可以访问对象的公有成员。</p><p>​ <strong>对象指针名-&gt;成员名</strong>等价于<strong>(*对象指针名).成员名</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fred</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Barney</span>&#123;<br>  Fred cFred; <span class="hljs-comment">//错误：类Fred的定义不完善，不能声明对象。</span><br>    Fred *ptrFred; <span class="hljs-comment">//正确，可以声明指向对象的指针。</span><br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fred</span>&#123;<br>    Barney y;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="指向类的静态成员的指针">指向类的静态成员的指针</h4><p>​类的<strong>静态成员</strong>的访问是<strong>不依赖于对象</strong>的，因此可以用<strong>普通的指针</strong>来<strong>指向和访问静态成员</strong>。</p><h5 id="访问静态数据成员">访问静态数据成员</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-comment">//声明静态数据成员</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> count;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br><br>&#125;;<br><br><span class="hljs-comment">//静态数据成员定义和初始化</span><br><span class="hljs-type">int</span> Point::count = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Point <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-comment">//int型指针指向静态成员</span><br><span class="hljs-type">int</span>* ptr = &amp;Point::count;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="访问静态函数成员">访问静态函数成员</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>count++;<br>&#125;<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">const</span> Point&amp; p) :<span class="hljs-built_in">x</span>(p.x), <span class="hljs-built_in">y</span>(p.y) &#123;<br>count++;<br>&#125;<br>~<span class="hljs-built_in">Point</span>() &#123; count--; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br>    <span class="hljs-comment">//静态函数成员</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">showCount</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Object count=&quot;</span> &lt;&lt; count &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> count;<br>&#125;;<br><br><span class="hljs-type">int</span> Point::count = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//指向静态成员函数时，右侧不需要使用&amp;</span><br><span class="hljs-built_in">void</span> (* showCountPTR)() = Point::showCount;<br><span class="hljs-function">Point <span class="hljs-title">pt</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Point A: &quot;</span> &lt;&lt; pt.<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; pt.<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br><span class="hljs-built_in">showCountPTR</span>();<br><span class="hljs-function">Point <span class="hljs-title">pt2</span><span class="hljs-params">(pt)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Point B: &quot;</span> &lt;&lt; pt2.<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; pt2.<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br><span class="hljs-built_in">showCountPTR</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="this指针">this指针</h4><p>​<code>this</code>指针是一个隐含于某一个类的非静态成员函数中的特殊指针，用于<strong>指向正在被成员函数操作的对象。</strong></p><h6 id="原理">原理</h6><p>​每一次对成员函数的调用都存在一个目的对象，<code>this</code>指针就是指向这个目的对象的指针。<code>this</code>指针明确指出了成员函数当前所操作的数据所属的对象。</p><p>​<code>this</code>指针实际上是<strong>类成员函数的一个隐含形式参数</strong>。当通过一个对象调用成员函数的时候，系统先将该对象的地址通过该参数传递给成员函数，成员函数对对象的数据成员进行操作时，就隐含使用了<code>this</code>指针。</p><p>​<code>this</code>是一个指针常量，对于常成员函数，<code>this</code>同时又是一个指向常量的指针。在成员函数中，可以使用<code>*this</code>来标识正在调用该函数的对象。</p><h6 id="重要的辨析">重要的辨析</h6><p>​成员函数通过this这个额外的<strong>隐式参数</strong>来访问调用它的对象。<strong>当我们调用成员函数时，会用对象的地址来初始化this指针（对象就是调用成员函数的对象）</strong>。这样我们在成员函数里就可以拿到对象的私有变量了。</p><p>​<code>this</code>形参是隐式定义的，不会显式地出现在成员函数形参列表里，但实际是存在的，所以任何自定义为this的参数或变量都是非法的。​因为<code>this</code>指针<strong>总是指向这个对象</strong>，所以this是一个<strong>常量指针(指针的值是<code>const</code>的)</strong>，不允许修改<code>this</code>指针的值。<code>this</code>指针的默认初始化过程等价<code>TestClass* const this = &amp;tc</code>。</p><p>​<strong>C++规定只能使用指向常量的指针来存放常量对象的地址</strong>,如果<code>tc</code>是个<strong>常量对象</strong>，那么<code>this</code>的默认初始化就是非法的，<strong>参数列表</strong>后的<code>const</code>作用是用来<strong>修改隐式this指针的类型</strong>，把它变成<strong>常指针常量</strong>。可以理解为<code>const</code>对象只能调用<code>const</code>方法？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClass</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">TestClass</span>() : <span class="hljs-built_in">val</span>(<span class="hljs-number">100</span>) &#123;&#125;<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">TestClass</span>() &#123;&#125;<br><br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getVal_v1</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> val;<br>     <span class="hljs-comment">//等价于 return this-&gt;val;   </span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getVal_v2</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> val;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//TestClass *const this = &amp;tc</span><br>    <span class="hljs-type">const</span> TestClass tc;<br><span class="hljs-comment">//报错</span><br>    <span class="hljs-type">int</span> a = tc.<span class="hljs-built_in">getVal_v1</span>();<br>    <span class="hljs-comment">//正常</span><br>    <span class="hljs-type">int</span> b = tc.<span class="hljs-built_in">getVal_v2</span>();<br><br>cout &lt;&lt; <span class="hljs-string">&quot;getVal_v1: &quot;</span> &lt;&lt; a &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;getVal_v2: &quot;</span> &lt;&lt; b &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指向类的非静态成员的指针">指向类的非静态成员的指针</h4><p>​f类的成员自身也是一些变量、函数或者对象等。因此也可以将它们的地址存放到一个指针变量中。这样，可以通过指针直接指向对象的成员，进而可以通过这些指针访问对象的成员。</p><p>​ 指向对象的指针使用前<strong>先声明、再赋值、然后引用。</strong></p><h5 id="声明-2">声明</h5><p>​ <strong>类型说明符 类名::* 指针名;</strong>声明指向数据成员的指针</p><p>​ <strong>类型说明符 (类名::* 指针名)(参数表);</strong>声明指向函数成员的指针</p><h5 id="引用">引用</h5><p>​声明了指向成员的指针之后，需要对其进行<strong>赋值</strong>，也就是确定指向类的哪一个成员。</p><p>​ <strong>指针名 = &amp;类名::数据成员名;</strong></p><h5 id="访问">访问</h5><p>​<strong><em>注：</em></strong>由于类的定义值确定了各个成员的类型、所占内存大小以及它们的相对位置，并不为数据成员分配具体的地址。上述赋值只说明了被赋值的指针是专门用来指向哪个数据成员的，以及指针中存放的数据成员在类中的相对位置。</p><p>​由于类是通过对象实例化的，在声明类的对象时才为具体的对象分配内存空间。<strong>这时只要将对象在内存中的起始地址与成员指针中存放的相对偏移结合起来就可以访问到对象的数据成员</strong></p><p>​ <strong>访问数据成员：</strong></p><p>​ <code>对象名 .* 类成员指针名</code></p><p>​ <code>对象指针名-&gt; *类成员指针名</code></p><p>​在一个类的作用域之外不能够对它的私有成员取地址。成员函数指针的声明、赋值、使用过程中，返回值类型、函数参数表一定要相互匹配。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Point <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span></span>;<br><br><span class="hljs-comment">//声明对象指针 ptPtr</span><br>Point* ptPtr = &amp;p;<br><br><span class="hljs-comment">//声明 指向Point类中 int型的指针</span><br><span class="hljs-built_in">int</span> (Point::*funcPtr)() <span class="hljs-type">const</span>;<br><br><span class="hljs-comment">//因为没有实例化，只有相对地址</span><br><span class="hljs-comment">//将Point类成员函数相对地址赋值给funcPtr</span><br>funcPtr = &amp;Point::getX;<br><br><span class="hljs-comment">//等价于</span><br><span class="hljs-built_in">int</span>(Point:: * funcPtr2)() <span class="hljs-type">const</span> = &amp;Point::getX;<br><br><span class="hljs-comment">//实际调用过程</span><br><span class="hljs-comment">//使用对象名访问 用. </span><br>cout &lt;&lt; (p.*funcPtr)() &lt;&lt; endl;<br><span class="hljs-comment">//使用对象指针(绝对地址)访问 用-&gt;</span><br>cout &lt;&lt;(ptPtr-&gt;*funcPtr)() &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="完整例子">完整例子</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Point.h 类文件</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _POINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POINT_H</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y);<br>~<span class="hljs-built_in">Point</span>();<br><span class="hljs-comment">//静态函数成员</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">showCount</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//函数成员</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//数据成员</span><br><span class="hljs-type">int</span> publicInt=<span class="hljs-number">5</span>;<br><br><span class="hljs-comment">//静态数据成员</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> publicStaticInt;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> count;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> test = <span class="hljs-number">3113212</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">TIPS:</span><br><span class="hljs-comment">如果有const限定的成员变量可以直接在类内初始化。</span><br><span class="hljs-comment">非const限定的的要在类外初始化。</span><br><span class="hljs-comment">*/</span><br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// !_POINT_H</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//points.cpp 类的实现文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;point.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><br><span class="hljs-comment">//静态数据成员在类外定义</span><br><span class="hljs-type">int</span> Point::count = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> Point::publicStaticInt = <span class="hljs-number">10</span>;<br><br><br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>count++;<br>&#125;;<br><br>Point::~<span class="hljs-built_in">Point</span>() &#123;<br>count--;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Point::getCount</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Point::showCount</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//main.cpp 主函数</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;point.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">Point <span class="hljs-title">pt</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span></span>;<br><span class="hljs-comment">//指向 对象pt的指针</span><br>Point* ptPtr = &amp;pt;<br><br><span class="hljs-comment">//指向类的非静态数据成员的指针</span><br><span class="hljs-built_in">int</span>(Point:: * ptMemberIntPtr) = &amp;Point::publicInt;<br><br><span class="hljs-comment">//指向类的静态数据成员的指针</span><br><span class="hljs-type">int</span>* ptMemberStaticIntPtr = &amp;Point::publicStaticInt;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">指向成员函数的指针，</span><br><span class="hljs-comment">当指向普通成员函数时，需要使用&amp;；</span><br><span class="hljs-comment">指向静态成员函数时，不需要使用&amp;。</span><br><span class="hljs-comment">造成这一现象的原因是C++中关于左值的规定。</span><br><span class="hljs-comment">https://blog.csdn.net/Sy__TenMoons/article/details/89598613</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//指向类的静态函数成员的指针</span><br><span class="hljs-built_in">int</span> (*showCountPtr)() = Point::showCount;<br><br><span class="hljs-comment">//指向类的非静态函数成员的指针</span><br><span class="hljs-built_in">int</span> (Point:: * getCountPtr)() = &amp;Point::getCount;<br><br><br><br><span class="hljs-comment">//对象名称索引对象数据成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;pt.publicInt  &quot;</span> &lt;&lt; pt.publicInt &lt;&lt; endl;<br><br><span class="hljs-comment">//对象指针索引对象数据成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;ptPtr-&gt;publicInt  &quot;</span> &lt;&lt; ptPtr-&gt;publicInt &lt;&lt; endl;<br><br><br><span class="hljs-comment">//用类名直接索引对象静态数据成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;publicStaticInt  &quot;</span> &lt;&lt; Point::publicStaticInt &lt;&lt; endl;<br><br><br><br><span class="hljs-comment">//对象名称用指向类的数据成员访问类的数据成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;ptPtr-&gt;*ptMemberIntPtrt  &quot;</span> &lt;&lt; pt.*ptMemberIntPtr &lt;&lt; endl;<br><br><span class="hljs-comment">//指向对象的指针用指向类的数据成员访问类的数据成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;ptPtr-&gt;*ptMemberIntPtrt  &quot;</span> &lt;&lt; ptPtr-&gt;*ptMemberIntPtr &lt;&lt; endl;<br><br><br><span class="hljs-comment">//普通指针访问类的静态数据成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;*ptMemberStaticIntPtr  &quot;</span> &lt;&lt; *ptMemberStaticIntPtr &lt;&lt; endl;<br><br><br><span class="hljs-comment">//对象名称用指向类的函数成员访问类的函数成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;(pt.*getCountPtr)()  &quot;</span> &lt;&lt; (pt.*getCountPtr)() &lt;&lt; endl;<br><br><span class="hljs-comment">//指向对象的指针用指向类的函数成员访问类的函数成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;(ptPtr-&gt;*getCountPtr)()  &quot;</span> &lt;&lt; (ptPtr-&gt;*getCountPtr)() &lt;&lt; endl;<br><br><span class="hljs-comment">//普通指针访问类的静态函数成员</span><br>cout &lt;&lt; <span class="hljs-string">&quot;(*showCountPtr)()  &quot;</span> &lt;&lt; (*showCountPtr)() &lt;&lt; endl;<br><br><span class="hljs-comment">//对象名称访问函数成员</span><br>pt.<span class="hljs-built_in">getCount</span>();<br><br><span class="hljs-comment">//指向对象的指针访问类的数据成员</span><br>ptPtr-&gt;<span class="hljs-built_in">getCount</span>();<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//结果</span><br>pt.publicInt  <span class="hljs-number">5</span><br>ptPtr-&gt;publicInt  <span class="hljs-number">5</span><br>publicStaticInt  <span class="hljs-number">10</span><br>ptPtr-&gt;*ptMemberIntPtrt  <span class="hljs-number">5</span><br>ptPtr-&gt;*ptMemberIntPtrt  <span class="hljs-number">5</span><br>*ptMemberStaticIntPtr  <span class="hljs-number">10</span><br>(pt.*getCountPtr)()  <span class="hljs-number">1</span><br>(ptPtr-&gt;*getCountPtr)()  <span class="hljs-number">1</span><br>(*showCountPtr)()  <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="与const结合-很重要的辨析">与const结合 很重要的辨析</h3><figure><img src="/img/const与指针.webp" alt="const与指针" /><figcaption aria-hidden="true">const与指针</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> func（<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; a） <span class="hljs-type">const</span><br>    <br>第一个是表示返回值是个<span class="hljs-type">int</span>型的常值<br>第二个代表是个<span class="hljs-type">const</span>型的引用，就是这个a是可以引用一个<span class="hljs-type">int</span>型变量，但是不可以改变这个变量的值（可以读值）<br>第三个代表这个函数（应该是类中的成员函数），不可以改变调用对象中的数据成员的值。（可以读写数据成员的值，不可以改写其值）<br></code></pre></td></tr></table></figure><p><ahref="https://blog.csdn.net/weixin_30236595/article/details/96359062?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-96359062-blog-93487967.235%5Ev27%5Epc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-4-96359062-blog-93487967.235%5Ev27%5Epc_relevant_default&amp;utm_relevant_index=5">对于这个函数constint func（const int&amp; a）const声明中，三个const分别是什么意思？..._叛逆的鲁鲁修loveCC的博客-CSDN博客</a></p><h2 id="动态内存分配">动态内存分配</h2><p>​C++中<strong>动态内存分配</strong>技术可以保证程序在运行过程中按实际需要申请适量的内存，使用结束后还可以释放。</p><p>​这种在程序运行过程中申请和释放的存储单元也称为<strong>堆对象</strong>。</p><p>​ 在C++程序中，使用<code>new</code>和<code>delete</code>运算符，建立和删除堆对象，动态分配内存。</p><h3 id="语法">语法</h3><p>​</p><h4 id="new">new</h4><p>​ <strong>new 数据类型 (初始化参数列表)</strong></p><p>​<em>说明：</em>该语句在运行过程中申请分配用于指定类型数据的内存空间，并根据初始化参数别表中给出的值进行初始化。如果内存申请成功，<code>new</code>运算便<strong>返回一个指向新分配内存首地址的类型的指针，</strong>可以通过这个指针堆堆对象进行访问。</p><h5 id="普通对象">普通对象</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//动态分配了int类型数据的内存空间</span><br><span class="hljs-comment">//将初值2放到该空间中</span><br><span class="hljs-comment">//该内存空间的首地址赋给point</span><br><span class="hljs-type">int</span>* point;<br>point = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>); <br><br><span class="hljs-type">int</span>* point = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>; <span class="hljs-comment">//不赋初值</span><br><span class="hljs-type">int</span>* point = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>();<span class="hljs-comment">//默认用0对对象进行初始化</span><br><br><span class="hljs-comment">//若用户定义了默认构造函数，则以下两种写法效果相同</span><br><span class="hljs-comment">//若未定义默认构造函数，系统会使用默认构造函数</span><br><span class="hljs-comment">//并且new Object()创建对象时还会为基本数据类型和指针类型的成员赋初值0</span><br>Object obj = <span class="hljs-keyword">new</span> Object;<br>Object obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><br></code></pre></td></tr></table></figure><h5 id="数组对象">数组对象</h5><p>​ <strong>new 类型名 [数组长度]</strong></p><p>​<em>说明：</em><code>new</code>关键字创建数组之后，<code>[]</code>后仍可以添加<code>()</code>，但括号内不能带任何啊参数。加上<code>()</code>后，代表对数组的每个元素的初始化。</p><h4 id="delete">delete</h4><h5 id="普通对象-1">普通对象</h5><p>​ <strong>delete 指针名</strong></p><p>​<em>说明：</em>该语句用来删除由<code>new</code>建立的对象，释放指针所指向的内存空间。如果被删除的是<strong>对象</strong>，该对象的<strong>析构函数将被调用</strong>。对于<code>new</code>建立的对象，只能使用<code>delete</code>进行<strong>一次</strong>删除操作。如果对一块内存空间多次使用<code>delete</code>进行删除将会导致运行错误。</p><h5 id="数组对象-1">数组对象</h5><p>​ <strong>delete [] 指针名 </strong></p><h3 id="实例-1">实例</h3><h4 id="一般实例">一般实例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>() :<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">y</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor2 called.&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Point</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Destructor called.&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span> </span>&#123;<br>x = newX;<br>y = newY;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Step one:&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//开辟一个Point类型的内存空间</span><br><span class="hljs-comment">//使用默认构造函数初始化</span><br><span class="hljs-comment">//将该内存空间的首地址赋给ptr1</span><br>Point* ptr1 = <span class="hljs-keyword">new</span> Point;<br><span class="hljs-comment">//将ptr1指向的内存空间释放</span><br><span class="hljs-keyword">delete</span> ptr1;<br>cout &lt;&lt; <span class="hljs-string">&quot;Step two:&quot;</span> &lt;&lt; endl;<br><span class="hljs-comment">//开辟一个Point类型的内存空间</span><br><span class="hljs-comment">//使用自定义的构造函数初始化</span><br><span class="hljs-comment">//将该内存空间的首地址赋给ptr1</span><br>ptr1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">//将ptr1指向的内存空间释放</span><br><span class="hljs-keyword">delete</span> ptr1;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态数组">动态数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>() :<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">y</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor2 called.&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Point</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Destructor called.&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span> </span>&#123;<br>x = newX;<br>y = newY;<br>cout &lt;&lt; <span class="hljs-string">&quot;Moving to:(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Point* ptr = <span class="hljs-keyword">new</span> Point[<span class="hljs-number">2</span>];<br>ptr[<span class="hljs-number">0</span>].<span class="hljs-built_in">move</span>(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>);<br>ptr[<span class="hljs-number">1</span>].<span class="hljs-built_in">move</span>(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>);<br><span class="hljs-comment">//等价 对象名 . == 指向对象的指针 -&gt; </span><br>ptr-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br>(ptr+<span class="hljs-number">1</span>)-&gt;<span class="hljs-built_in">move</span>(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;Deleting ...&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>() :<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">y</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor2 called.&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Point</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Destructor called.&quot;</span>&lt;&lt;endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span> </span>&#123;<br>x = newX;<br>y = newY;<br>cout &lt;&lt; <span class="hljs-string">&quot;Moving to:(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayOfPoints</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//构造函数，创建size大小的points数组</span><br><span class="hljs-built_in">ArrayOfPoints</span>(<span class="hljs-type">int</span> size) :<span class="hljs-built_in">size</span>(size) &#123;<br>points = <span class="hljs-keyword">new</span> Point[size];<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">ArrayOfPoints</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Deleting... &quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">delete</span>[] points;<br>&#125;<br><span class="hljs-comment">//根据下标index返回Point类的对象</span><br><span class="hljs-function">Point&amp; <span class="hljs-title">element</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br><span class="hljs-built_in">assert</span>(index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; size);<br><span class="hljs-keyword">return</span> points[index];<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//定义points指针</span><br>Point* points;<br><span class="hljs-type">int</span> size;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//points是个ArrayOfPoints对象</span><br><span class="hljs-function">ArrayOfPoints <span class="hljs-title">points</span><span class="hljs-params">(count)</span></span>;<br><br>points.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>);<br>points.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="动态多维数组">动态多维数组</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">float</span> (* cp)[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-type">float</span>[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>*(*(cp + i) + j) = (i+<span class="hljs-number">1</span>) * (j+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>cout&lt;&lt;*(*(cp + i) + j)&lt;&lt;<span class="hljs-string">&quot;  &quot;</span>;<br>&#125;<br>&#125;<br><br>cout &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>cout &lt;&lt; cp[i][j] &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>&#125;<br>&#125;<br>    <br>    <span class="hljs-keyword">delete</span>[] cp;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="vector创建数组">Vector创建数组</h2><p>​</p><p>​ C++ 库提供了被封装的动态数组<code>vector</code>，可以具有<strong>任何类型</strong>。<code>vector</code>不是一个类，而是一个类模板。</p><h3 id="语法-1">语法</h3><h4 id="声明-3">声明</h4><p>​ <code>vector&lt;元素类型&gt; 数组对象名(数组长度)</code></p><p>​<code>vector&lt;元素类型&gt; 数组对象名(数组长度，元素初值)</code></p><p>​<code>vector</code>定义的数组对象的所有元素都会<strong>被初始化</strong>，如果数组元素的元素类型为基本数据类型，则所有元素都会<strong>被以0初始化</strong>。如果数组元素为<strong>类类型</strong>，则会调用<strong>类的默认构造函数</strong>初始化(需要保证有默认构造函数)。初值也可以自己指定。</p><h4 id="访问-1">访问</h4><p>​ <code>数组对象名[下标表达式]</code></p><h3 id="例子">例子</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">average</span><span class="hljs-params">(<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">double</span>&gt;&amp; arr)</span> </span>&#123;<br><span class="hljs-type">double</span> sum = <span class="hljs-number">0.0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">size</span>(); i++)&#123;<br>sum += arr[i];<br>&#125;<br><span class="hljs-keyword">return</span> sum / arr.<span class="hljs-built_in">size</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">unsigned</span> n;<br>cout &lt;&lt; <span class="hljs-string">&quot;n= &quot;</span> &lt;&lt; endl;<br>cin &gt;&gt; n;<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">double</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(n)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;input&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;numbers:&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">unsigned</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>cin &gt;&gt; arr[i];<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;Average=&quot;</span> &lt;&lt; <span class="hljs-built_in">average</span>(arr) &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浅层复制与深层复制">浅层复制与深层复制</h2><h3 id="浅层复制">浅层复制</h3><p>​默认构造函数将对象的数据项简单复制之后，不同对象的<strong>指针指向的是同一片地址</strong>。表面上好像完成了复制，但是并没有形成真正的副本。</p><p>​更大的问题在于，在程序结束之前，不同对象的析构函数会被调用，但由于指向同一片空间，该空间会被释放两次，导致出错。</p><figure><img src="/img/浅层复制.png" alt="浅层复制" /><figcaption aria-hidden="true">浅层复制</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>() :<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">y</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor2 called.&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Point</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Destructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span> </span>&#123;<br>x = newX;<br>y = newY;<br>cout &lt;&lt; <span class="hljs-string">&quot;Moving to:(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayOfPoints</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//构造函数，创建size大小的points数组</span><br><span class="hljs-built_in">ArrayOfPoints</span>(<span class="hljs-type">int</span> size) :<span class="hljs-built_in">size</span>(size) &#123;<br>points = <span class="hljs-keyword">new</span> Point[size];<br>&#125;<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">ArrayOfPoints</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Deleting... &quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">delete</span>[] points;<br>&#125;<br><span class="hljs-comment">//根据下标index返回Point类的对象</span><br><span class="hljs-function">Point&amp; <span class="hljs-title">element</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br><span class="hljs-built_in">assert</span>(index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; size);<br><span class="hljs-keyword">return</span> points[index];<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//定义points指针</span><br>Point* points;<br><span class="hljs-type">int</span> size;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//points是个ArrayOfPoints对象</span><br><span class="hljs-function">ArrayOfPoints <span class="hljs-title">pointsArray</span><span class="hljs-params">(count)</span></span>;<br><br>pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>);<br>pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>);<br><br>ArrayOfPoints pointsArray2 = pointsArray;<br>cout &lt;&lt; <span class="hljs-string">&quot;Copy of pointsArray&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">25</span>, <span class="hljs-number">30</span>);<br>pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">35</span>, <span class="hljs-number">40</span>);<br>cout &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<strong>解决方法：</strong>编写复制构造函数，实现<strong>深层复制</strong>。</p><h3 id="深层复制">深层复制</h3><figure><img src="/img/深层复制.png" alt="深层复制" /><figcaption aria-hidden="true">深层复制</figcaption></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cassert&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>() :<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">y</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Default Constructor2 called.&quot;</span> &lt;&lt; endl;<br>&#125;<br>~<span class="hljs-built_in">Point</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Destructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span> </span>&#123;<br>x = newX;<br>y = newY;<br>cout &lt;&lt; <span class="hljs-string">&quot;Moving to:(&quot;</span> &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; y &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayOfPoints</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//构造函数，创建size大小的points数组</span><br><span class="hljs-built_in">ArrayOfPoints</span>(<span class="hljs-type">int</span> size) :<span class="hljs-built_in">size</span>(size) &#123;<br>points = <span class="hljs-keyword">new</span> Point[size];<br>&#125;<br><span class="hljs-built_in">ArrayOfPoints</span>(<span class="hljs-type">const</span> ArrayOfPoints&amp; v);<br><span class="hljs-comment">//析构函数</span><br>~<span class="hljs-built_in">ArrayOfPoints</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Deleting... &quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">delete</span>[] points;<br>&#125;<br><span class="hljs-comment">//根据下标index返回Point类的对象</span><br><span class="hljs-function">Point&amp; <span class="hljs-title">element</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br><span class="hljs-built_in">assert</span>(index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; size);<br><span class="hljs-keyword">return</span> points[index];<br>&#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//定义points指针</span><br>Point* points;<br><span class="hljs-type">int</span> size;<br>&#125;;<br><br><span class="hljs-comment">//复制构造函数，为新的对象分配空间而不只是简单拷贝</span><br>ArrayOfPoints::<span class="hljs-built_in">ArrayOfPoints</span>(<span class="hljs-type">const</span> ArrayOfPoints&amp; v) &#123;<br>size = v.size;<br>points = <span class="hljs-keyword">new</span> Point[size];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)&#123;<br>points[i] = v.points[i];<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> count = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//points是个ArrayOfPoints对象</span><br><span class="hljs-function">ArrayOfPoints <span class="hljs-title">pointsArray</span><span class="hljs-params">(count)</span></span>;<br><br>pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>);<br>pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">15</span>, <span class="hljs-number">20</span>);<br><br>ArrayOfPoints pointsArray2 = pointsArray;<br>cout &lt;&lt; <span class="hljs-string">&quot;Copy of pointsArray&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">25</span>, <span class="hljs-number">30</span>);<br>pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">move</span>(<span class="hljs-number">35</span>, <span class="hljs-number">40</span>);<br>cout &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray2.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">0</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>cout &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; pointsArray.<span class="hljs-built_in">element</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 基础复习笔记</title>
    <link href="/2023/03/31/C++%20%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/31/C++%20%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="c-基础复习笔记">C++ 基础复习笔记</h3><h4 id="hello-world">1、Hello World</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>    cout&lt;&lt; <span class="hljs-string">&quot;Hello world!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="别名">2、 别名</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> Area,Volume;<br><span class="hljs-keyword">using</span> Area = <span class="hljs-type">double</span>; <span class="hljs-comment">//只能为已有数据类型声明别名</span><br></code></pre></td></tr></table></figure><h4 id="auto与decltype">3、 auto与decltype</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">1</span>;<br>autp i=<span class="hljs-number">0</span>,pi=<span class="hljs-number">3.14</span>; <span class="hljs-comment">//不行，输入数据只能同一类型</span><br></code></pre></td></tr></table></figure><h4 id="函数">4、函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs &#123;">double power(double x,int n)&#123;<br>    double val = 1.0;<br>    while(n--)<br>        val*=x;<br>    return val;<br>&#125;<br><br>int power(int x,int y)&#123;<br>//函数重载<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="类与对象">5、类与对象</h4><h5 id="类的定义">类的定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//类的定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH, <span class="hljs-type">int</span> newM, <span class="hljs-type">int</span> newS)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//类中有函数成员需要被频繁调用，代码比较简单的，可以直接在类里面定义(内联函数)</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> hour, minute, second;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="函数成员">函数成员</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//类的定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH, <span class="hljs-type">int</span> newM, <span class="hljs-type">int</span> newS)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//类中有函数成员需要被频繁调用，代码比较简单的，可以直接在类里面定义(内联函数)</span><br>    &#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> hour, minute, second;<br>&#125;;<br><br><span class="hljs-comment">//函数成员</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Clock::setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS)</span></span>&#123;<br>    hour = newH;<br>    minute = newM;<br>    secodne = newS;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Clock::showTime</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hour:&quot;</span>&lt;&lt;hour&lt;&lt;<span class="hljs-string">&quot;Minutes:&quot;</span>&lt;&lt;minute&lt;&lt;<span class="hljs-string">&quot;Seconds&quot;</span>&lt;&lt;second&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="内联函数的两种写法">内联函数的两种写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>&#123;<br>    <span class="hljs-keyword">public</span>：<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;这是内联函数的隐式写法&quot;</span>&lt;&lt;<span class="hljs-string">&quot;当代码简单，用的次数比较多的时候可以用内联函数&quot;</span><br>        &#125;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> hour,minute,second;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Clock::func</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;这是内联函数的显式写法&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="构造函数与析构函数">构造函数与析构函数</h5><p>​作用：在对象被创建时利用特定的值构造对象，将对象初始化为一个特定的状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//类的定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//默认构造函数</span><br>    <span class="hljs-built_in">Clock</span>();<br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-built_in">Clock</span>(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH, <span class="hljs-type">int</span> newM, <span class="hljs-type">int</span> newS)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> hour, minute, second;<br>&#125;;<br><br>Clock::<span class="hljs-built_in">Clock</span>(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS):<span class="hljs-built_in">hour</span>(<span class="hljs-keyword">new</span>)<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mian</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>    <span class="hljs-built_in">Clock</span>();<span class="hljs-comment">//调用默认构造函数</span><br>    <span class="hljs-built_in">Clock</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//调用构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="委托构造函数"><strong>委托构造函数</strong></h6><p>​ 构造函数 <code>class_c(int, int, int)</code> 首先调用构造函数<code>class_c(int, int)</code>，该构造函数反过来调用<code>class_c(int)</code>。每个构造函数将仅执行其他构造函数不会执行的工作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">class_c</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> max;<br>    <span class="hljs-type">int</span> min;<br>    <span class="hljs-type">int</span> middle;<br><br>    <span class="hljs-built_in">class_c</span>() &#123;&#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max) &#123;<br>        max = my_max &gt; <span class="hljs-number">0</span> ? my_max : <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max, <span class="hljs-type">int</span> my_min) &#123;<br>        max = my_max &gt; <span class="hljs-number">0</span> ? my_max : <span class="hljs-number">10</span>;<br>        min = my_min &gt; <span class="hljs-number">0</span> &amp;&amp; my_min &lt; max ? my_min : <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max, <span class="hljs-type">int</span> my_min, <span class="hljs-type">int</span> my_middle) &#123;<br>        max = my_max &gt; <span class="hljs-number">0</span> ? my_max : <span class="hljs-number">10</span>;<br>        min = my_min &gt; <span class="hljs-number">0</span> &amp;&amp; my_min &lt; max ? my_min : <span class="hljs-number">1</span>;<br>        middle = my_middle &lt; max &amp;&amp; my_middle &gt; min ? my_middle : <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">class_c</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> max;<br>    <span class="hljs-type">int</span> min;<br>    <span class="hljs-type">int</span> middle;<br><br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max) &#123;<br>        max = my_max &gt; <span class="hljs-number">0</span> ? my_max : <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max, <span class="hljs-type">int</span> my_min) : <span class="hljs-built_in">class_c</span>(my_max) &#123;<br>        min = my_min &gt; <span class="hljs-number">0</span> &amp;&amp; my_min &lt; max ? my_min : <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max, <span class="hljs-type">int</span> my_min, <span class="hljs-type">int</span> my_middle) : <span class="hljs-built_in">class_c</span> (my_max, my_min)&#123;<br>        middle = my_middle &lt; max &amp;&amp; my_middle &gt; min ? my_middle : <span class="hljs-number">5</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    class_c c1&#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span> &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="复制构造函数"><strong>复制构造函数</strong></h6><p>​作用：使用一个已经存在的对象，去初始化同类的一个新对象。把初始对象的每个数据成员的值都复制到新建立的对象中。在用户没有指定复制构造函数时，系统会自动生成复制构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> xx=<span class="hljs-number">0</span>,<span class="hljs-type">int</span> yy=<span class="hljs-number">0</span>)&#123;<br>            x=xx;<br>            y=yy;<br>        &#125;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-built_in">Point</span> (Point &amp;p);<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> x;&#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> y;&#125;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> x,y;<br>    <br>&#125;<br>Point::<span class="hljs-built_in">Point</span>(Point &amp;p)&#123;<br>    x = p.x;<br>    y = p.y;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Calling the copy constructor&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="析构函数"><strong>析构函数</strong></h6><p>​作用：用来完成对象被删除前的一些清理工作。在对象生命周期即将结束的时候被自动调用，不接受任何参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Clock</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>   ~<span class="hljs-built_in">Clock</span>()&#123;&#125; <span class="hljs-comment">//析构函数</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> hour,minute,second;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="枚举类型与union类型"><strong>枚举类型与Union类型</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">枚举类元素按常量处理，但不能对他们赋值，可以在声明时候另行定义值。</span><br><span class="hljs-comment">enum Weekday &#123;MON,TUE,SAT,THU&#125;</span><br><span class="hljs-comment">默认值依次为0,1,2,3;</span><br><span class="hljs-comment">enum Weekday &#123;Sun=7,Mon=1,TUE,WED,THU&#125;</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">GameResult</span> &#123;WIN,LOSE,TIE,CANCEL&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>GameResult result;<br>    <span class="hljs-comment">//指定 omit 为枚举类型 GameResult类中的CANCEL</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">GameResult</span> omit = CANCEL; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> count = WIN; count &lt;= CANCEL; count++) &#123;<br>result = <span class="hljs-built_in">GameResult</span>(count);<br><span class="hljs-keyword">if</span> (result == omit) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;The Game was cancelled&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;The game was played&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">if</span> (result == WIN) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Won&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lose&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExamInfo</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">ExamInfo</span>(string name,<span class="hljs-type">char</span> grade);<br><span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">bool</span> pass);<br><span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">int</span> percent);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>string name;<br>    <span class="hljs-comment">//枚举类型 类型名未命名，在分号前声明变量</span><br><span class="hljs-keyword">enum</span> &#123;<br>GRADE,<br>PASS,<br>PERCENTAGE<br>&#125;mode;<br>    <span class="hljs-comment">//联合类型</span><br><span class="hljs-keyword">union</span> &#123;<br><span class="hljs-type">char</span> grade;<br><span class="hljs-type">bool</span> pass;<br><span class="hljs-type">int</span> percent;<br>&#125;;<br>&#125;;<br><br>ExamInfo::<span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">char</span> grade) :<span class="hljs-built_in">name</span>(name), <span class="hljs-built_in">mode</span>(GRADE), <span class="hljs-built_in">grade</span>(grade) &#123;&#125;;<br>ExamInfo::<span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">bool</span> pass) :<span class="hljs-built_in">name</span>(name), <span class="hljs-built_in">mode</span>(PASS), <span class="hljs-built_in">pass</span>(pass) &#123;&#125;;<br>ExamInfo::<span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">int</span> percent) :<span class="hljs-built_in">name</span>(name), <span class="hljs-built_in">mode</span>(PERCENTAGE), <span class="hljs-built_in">percent</span>(percent) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ExamInfo::show</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">switch</span> (mode)<br>&#123;<br><span class="hljs-keyword">case</span> ExamInfo::GRADE:<br>cout&lt;&lt;grade;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> ExamInfo::PASS:<br>cout &lt;&lt; pass ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> ExamInfo::PERCENTAGE:<br>cout &lt;&lt; percent;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-function">ExamInfo <span class="hljs-title">course1</span><span class="hljs-params">(<span class="hljs-string">&quot;CPU&quot;</span>, <span class="hljs-string">&#x27;N&#x27;</span>)</span></span>;<br><span class="hljs-function">ExamInfo <span class="hljs-title">course2</span><span class="hljs-params">(<span class="hljs-string">&quot;GPU&quot;</span>, <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">ExamInfo <span class="hljs-title">course3</span><span class="hljs-params">(<span class="hljs-string">&quot;Tem&quot;</span>, <span class="hljs-number">80</span>)</span></span>;<br>course1.<span class="hljs-built_in">show</span>();<br>course2.<span class="hljs-built_in">show</span>();<br>course3.<span class="hljs-built_in">show</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="综合案例">综合案例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SavingAccount</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">double</span> balance;<br><span class="hljs-type">double</span> rate;<br><span class="hljs-type">int</span> lastDate;<br><span class="hljs-type">double</span> accummulation;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-type">int</span> date,<span class="hljs-type">double</span> amount)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">accumulate</span><span class="hljs-params">(<span class="hljs-type">int</span> date)</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> accummulation + balance * (date - lastDate);<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">SavingAccount</span>(<span class="hljs-type">int</span> date, <span class="hljs-type">int</span> id, <span class="hljs-type">double</span> rate);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getID</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> id; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> balance;  &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getRate</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> rate; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">settle</span><span class="hljs-params">(<span class="hljs-type">int</span> date)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br>SavingAccount::<span class="hljs-built_in">SavingAccount</span>(<span class="hljs-type">int</span> date, <span class="hljs-type">int</span> id, <span class="hljs-type">double</span> rate) :<span class="hljs-built_in">id</span>(id), <span class="hljs-built_in">balance</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">rate</span>(rate), <span class="hljs-built_in">lastDate</span>(date), <span class="hljs-built_in">accummulation</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; date &lt;&lt; <span class="hljs-string">&quot;\t#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;is created&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::record</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span> </span>&#123;<br>accummulation = <span class="hljs-built_in">accumulate</span>(date);<br>lastDate = date;<br>amount = <span class="hljs-built_in">floor</span>(amount * <span class="hljs-number">100</span> + <span class="hljs-number">0.5</span>) / <span class="hljs-number">100</span>;<br>balance += amount;<br>cout &lt;&lt; date &lt;&lt; <span class="hljs-string">&quot;\t#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; amount &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; balance &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::deposit</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span> </span>&#123;<br><span class="hljs-built_in">record</span>(date, amount);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::withdraw</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-built_in">getBalance</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error : not enough money&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">record</span>(date, -amount);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::settle</span><span class="hljs-params">(<span class="hljs-type">int</span> date)</span> </span>&#123;<br><span class="hljs-type">double</span> interest = <span class="hljs-built_in">accumulate</span>(date) * rate / <span class="hljs-number">365</span>;<br><span class="hljs-keyword">if</span> (interest != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">record</span>(date, interest);<br>&#125;<br>accummulation = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::show</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;\tBalance:&quot;</span> &lt;&lt; balance&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-function">SavingAccount <span class="hljs-title">sa0</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">21325302</span>, <span class="hljs-number">0.015</span>)</span></span>;<br><span class="hljs-function">SavingAccount <span class="hljs-title">sa1</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">58320212</span>, <span class="hljs-number">0.015</span>)</span></span>;<br>sa0.<span class="hljs-built_in">deposit</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5000</span>);<br>sa1.<span class="hljs-built_in">deposit</span>(<span class="hljs-number">25</span>, <span class="hljs-number">10000</span>);<br>sa0.<span class="hljs-built_in">deposit</span>(<span class="hljs-number">45</span>, <span class="hljs-number">5500</span>);<br>sa1.<span class="hljs-built_in">withdraw</span>(<span class="hljs-number">60</span>, <span class="hljs-number">4000</span>);<br>sa0.<span class="hljs-built_in">settle</span>(<span class="hljs-number">90</span>);<br>sa1.<span class="hljs-built_in">settle</span>(<span class="hljs-number">90</span>);<br>sa0.<span class="hljs-built_in">show</span>();<br>sa1.<span class="hljs-built_in">show</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="深度搜索">深度搜索</h5><h6 id="位域"><strong>位域</strong></h6><p>​将类中的多个数据成员打包，从而使不同成员可以共享相同的字节的机制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">用 : 后的位数来指定一个位域所占用的二进制位数</span><br><span class="hljs-comment">只有 bool,char,int,enum的成员才能被指定位域</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">student</span>(<span class="hljs-type">unsigned</span> number, Level level, Grade grade) :<span class="hljs-built_in">number</span>(number), <span class="hljs-built_in">level</span>(level), <span class="hljs-built_in">grade</span>(grade) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">unsigned</span> number : <span class="hljs-number">27</span>; <span class="hljs-comment">//number 占用27个字节</span><br>Level level : <span class="hljs-number">2</span>; <span class="hljs-comment">//level 占用两个字节</span><br>Grade grade : <span class="hljs-number">2</span>;<span class="hljs-comment">//grade 占用两个字节</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="数据的共享与保护">6、数据的共享与保护</h4><h5 id="作用域">作用域</h5><h6 id="类作用域">类作用域</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//类X中 m成员的类作用域</span><br><br><span class="hljs-comment">//没有声明同名的局部作用域标识符，在函数内可以直接访问成员m</span><br>x.m<br>x::m <span class="hljs-comment">//访问类的静态成员</span><br><br>ptr-&gt;m  <span class="hljs-comment">//ptr为指向X类的一个对象的指针</span><br></code></pre></td></tr></table></figure><h6 id="enum作用域">enum作用域</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">color</span> &#123;red,yellow,green&#125;; <span class="hljs-comment">//不限定作用域 可以直接访问</span><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">color2</span> &#123;red,yellow,green&#125;; <span class="hljs-comment">//限定作用域 通过color2::访问</span><br><br>color c =red;<br>color c2 = color::red;<br>color2 c3 = color2::red;<br></code></pre></td></tr></table></figure><h5 id="生存周期">生存周期</h5><h6 id="静态生存周期">静态生存周期</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//文件作用域 全局直接声明</span><br><span class="hljs-comment">//在局部作用域中以 static 声明</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> i = <span class="hljs-number">5</span>; <span class="hljs-comment">//只赋值一次，下次使用时会保持上一次的值</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> j;  <span class="hljs-comment">//未指定初值的基本类型静态生存变量会被以0初始化</span><br></code></pre></td></tr></table></figure><h5 id="类的静态成员">类的静态成员</h5><p>​类属性：某个属性为整个类所共有，不属于某个具体对象，采用<code>static</code>声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>);<br><span class="hljs-built_in">Point</span>(Point&amp; p);<br>~<span class="hljs-built_in">Point</span>();<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//静态函数成员</span><br><span class="hljs-comment">//主要用来访问同一个类中的静态数据成员</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">showCount</span><span class="hljs-params">()</span></span>; <br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> count; <span class="hljs-comment">//静态数据成员 不指定初值，默认为0</span><br><span class="hljs-comment">//constexpr static int origin = 0;</span><br>&#125;;<br><br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x , <span class="hljs-type">int</span> y ) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>count++;<br>&#125;;<br>Point::<span class="hljs-built_in">Point</span>(Point&amp; p) :<span class="hljs-built_in">x</span>(p.x), <span class="hljs-built_in">y</span>(p.y) &#123;<br>count++;<br>&#125;;<br>Point::~<span class="hljs-built_in">Point</span>() &#123;<br>count--;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Point::getX</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Point::getY</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br><br> <span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">Point::showCount</span><span class="hljs-params">()</span>  </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Object count=&quot;</span> &lt;&lt; count &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">int</span> Point::count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//constexpr int Point::origin;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//静态函数调用</span><br>Point::<span class="hljs-built_in">showCount</span>();<br><span class="hljs-function">Point <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Point A  &quot;</span> &lt;&lt; a.<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; a.<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>a.<span class="hljs-built_in">showCount</span>();<br><br><span class="hljs-function">Point <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Point B  &quot;</span> &lt;&lt; b.<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; b.<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>Point::<span class="hljs-built_in">showCount</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​ 静态成员函数中访问类的非静态成员必须指明对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-built_in">A</span>();<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(A a)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> y;<br>&#125;;<br><br>A::<span class="hljs-built_in">A</span>() &#123;<br>    <span class="hljs-comment">//构造函数，直接访问private x可以</span><br>cout &lt;&lt; x;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A::f</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//静态成员函数中访问类的非静态成员必须指明对象。</span><br>cout &lt;&lt; x; <span class="hljs-comment">//错误，不能访问，非静态成员引用必须与特定对象相对</span><br>    cout &lt;&lt; y; <span class="hljs-comment">//可以 能访问 静态成员函数可以直接访问静态成员</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A::g</span><span class="hljs-params">(A a)</span> </span>&#123;<br>cout &lt;&lt; a.x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="友元">友元</h5><p>​友元关系提供了不同类或对象的成员函数之间，类的成员函数与一般函数之间进行数据共享的机制。通过友元关系，一个普通函数或者类的成员函数可以访问封装于另一个类中的函数。</p><p>​ 友元关系单向、不能传递、不能继承。</p><h6 id="友元函数"><strong>友元函数</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,<span class="hljs-type">int</span> y=<span class="hljs-number">0</span>);<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(Point &amp;p1,Point &amp;p2)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> x,y;<br>&#125;;<br><br><span class="hljs-comment">//dist 函数在Point类的外面，但是可以通过Point对象访问Point内部的数据</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(Point &amp;p1,Point &amp;p2)</span></span>&#123;<br>  <span class="hljs-comment">//友元函数可以通过对象名直接访问Point类的私有数据成员</span><br>    <span class="hljs-type">double</span> x = p1.x-p2.x;<br>    <span class="hljs-type">double</span> y = p1.y-p2.y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">float</span>&gt;(<span class="hljs-built_in">sqrt</span>(x*x+y*y));<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="友元类"><strong>友元类</strong></h6><p>​<code>A</code>为<code>B</code>的友元类，<code>A</code>类中所有成员都是<code>B</code>的友元函数，都可以访问<code>B</code>类的私有和保护成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>;<br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span> x;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>  A a;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">B::set</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>  <span class="hljs-comment">//B 是 A 的友元，在B的成员函数中可以访问A类对象的私有成员</span><br>  a.x = i;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="new和delete">new和delete</h5><p>​ 先分配<code>memory</code>，再调用<code>ctor</code>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">Complex* pc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Complex</span>(<span class="hljs-number">1</span>,)<span class="hljs-number">2</span>;<br><br>Complex* pc;<br><br><span class="hljs-type">void</span>* men = operate <span class="hljs-built_in">new</span> (<span class="hljs-built_in">sizeof</span>(Complex)); <span class="hljs-comment">//分配内存</span><br>pc = <span class="hljs-built_in">static_cast</span>&lt;Complex*&gt;(mem);<span class="hljs-comment">//转型</span><br>pc-&gt;Complex::<span class="hljs-built_in">Complex</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//构造函数</span><br></code></pre></td></tr></table></figure><p>​ 先调用<code>dtor</code>析构函数，再释放Memory</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">String* ps = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>...<br><span class="hljs-keyword">delete</span> ps;<br><br>String::~<span class="hljs-built_in">String</span>(ps);<br><span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span> <span class="hljs-params">(ps)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="const">const</h5><p>​ 修饰常量、常对象。<strong>常对象不能被更新。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//常成员函数</span><br><span class="hljs-comment">//常成员函数调用期间，目的对象都被视为常对象，因此不能更新目的对象的数据成员。</span><br><span class="hljs-comment">//常对象只能调用常函数</span><br>类型说明符 函数名（参数表） <span class="hljs-type">const</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">R</span>(<span class="hljs-type">int</span> r1, <span class="hljs-type">int</span> r2);<br>    <span class="hljs-comment">//普通成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>; <br>    <span class="hljs-comment">//常成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print2</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> r1, r2;<br>&#125;;<br><br>R::<span class="hljs-built_in">R</span>(<span class="hljs-type">int</span> r1, <span class="hljs-type">int</span> r2) :<span class="hljs-built_in">r1</span>(r1), <span class="hljs-built_in">r2</span>(r2) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">R::print</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; r2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">R::print2</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot;;;&quot;</span> &lt;&lt; r2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//普通对象 可以调用普通股成员函数、常成员函数</span><br><span class="hljs-function">R <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>)</span></span>;<br>a.<span class="hljs-built_in">print</span>();<br>a.<span class="hljs-built_in">print2</span>();<br>    <span class="hljs-comment">//常对象</span><br>    <span class="hljs-comment">//常对象只能调用常成员函数</span><br><span class="hljs-function"><span class="hljs-type">const</span> R <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">20</span>, <span class="hljs-number">52</span>)</span></span>;<br><span class="hljs-comment">//b.print(); 报错</span><br>b.<span class="hljs-built_in">print2</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6id="常数据成员与静态常数据成员"><strong>常数据成员与静态常数据成员</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> i);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> a;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> b;<br>  <span class="hljs-comment">//静态常量如果具有整数类型后者枚举类型 可以直接定义</span><br>  <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br>&#125;;<br><br><span class="hljs-comment">//static const int b,</span><br><span class="hljs-comment">//b 定义了就不能改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> A::b = <span class="hljs-number">10</span>;<br><br>A::<span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> i) :<span class="hljs-built_in">a</span>(i) &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A::print</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">A <span class="hljs-title">a1</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span>, <span class="hljs-title">a2</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-comment">//set(a1.b=100) 不行，定义了就不能改了</span><br>a1.<span class="hljs-built_in">print</span>();<br>a2.<span class="hljs-built_in">print</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="常引用"><strong>常引用</strong></h6><p>​常引用的对象不能被更新。函数中无需修改两个传入对象的值，因此将传参方式改为传递常引用更合适。</p><p>​无需改变其值的参数，不宜使用<strong>普通引用</strong>方式加以传递。可以采用传值方式或者传递常引用方式。</p><p>​ 对于大对象来说，传值耗时较多，因此传递常引用为宜。</p><p>​ 复制构造函数的参数也宜采用常引用的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  ...<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(<span class="hljs-type">const</span> Point &amp;p1,<span class="hljs-type">const</span> Point &amp;p2)</span></span>;  <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(cosnt Point &amp;p1,<span class="hljs-type">const</span> Point &amp;p2)</span></span>&#123;&#125;;<br></code></pre></td></tr></table></figure><p>​ <strong>总结</strong></p><p>​ const 数据成员只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其const 数据成员的值可以不同。所以不能在类的声明中初始化 const数据成员，因为类的对象没被创建时，编译器不知道 const数据成员的值是什么。</p><p>​ const数据成员的初始化只能在类的构造函数的初始化列表中进行。要想建立在整个类中都恒定的常量，应该用类中的枚举常量来实现，或者staticcosnt。</p><p>​ cosnt 成员函数主要目的是防止成员函数修改对象的内容。即 const成员函数不能修改成员变量的值，但可以访问成员变量。当方法成员函数时，该函数只能是const 成员函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>();<br>    <span class="hljs-keyword">enum</span> &#123;size1=<span class="hljs-number">100</span>,size2=<span class="hljs-number">200</span>&#125;;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> a;<span class="hljs-comment">//只能在构造函数初始化列表中初始化</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> b;<span class="hljs-comment">//在类的实现文件中定义并初始化</span><br>    conststatic <span class="hljs-type">int</span> c;<span class="hljs-comment">//与 static const int c;相同。</span><br>&#125;;<br> <br>Test::<span class="hljs-built_in">Test</span>():<span class="hljs-built_in">a</span>(<span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> Test::b=<span class="hljs-number">0</span>;<span class="hljs-comment">//static成员变量不能在构造函数初始化列表中初始化，因为它不属于某个对象。</span><br><span class="hljs-type">const</span> intTest::c=<span class="hljs-number">0</span>;<span class="hljs-comment">//注意：给静态成员变量赋值时，不需要加static修饰符，但要加const</span><br></code></pre></td></tr></table></figure><h5 id="const-与-static-变量定义很重要">const 与 static变量定义<strong>很重要</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//-----------------Test.h----------------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">private</span> :<br>    <span class="hljs-type">int</span> var1;<br>    <span class="hljs-comment">// int var11= 4; 错误的初始化方法</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> var2 ;<br>    <span class="hljs-comment">// const int var2 =22222; 错误的初始化方法</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> var3;<br>    <span class="hljs-comment">// static int var3=33333; 错误，只有静态常量int成员才能直接赋值来初始化</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> var4=<span class="hljs-number">4444</span>; <span class="hljs-comment">//正确，静态常量成员可以直接初始化    </span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> var44;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-type">void</span>);<br>    ~<span class="hljs-built_in">Test</span>(<span class="hljs-type">void</span>);<br>&#125;;<br><span class="hljs-comment">//--------------------Test.cpp-----------------------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;.\test.h&quot;</span></span><br> <br><span class="hljs-type">int</span> Test::var3 = <span class="hljs-number">3333333</span>; <span class="hljs-comment">//静态成员的正确的初始化方法</span><br> <br><span class="hljs-comment">// int Test::var1 = 11111;; 错误静态成员才能初始化</span><br><span class="hljs-comment">// int Test::var2 = 22222; 错误</span><br><span class="hljs-comment">// int Test::var44 = 44444; // 错误的方法，提示重定义</span><br>Test::<span class="hljs-built_in">Test</span>(<span class="hljs-type">void</span>)：<span class="hljs-built_in">var1</span>(<span class="hljs-number">11111</span>),<span class="hljs-built_in">var2</span>(<span class="hljs-number">22222</span>)正确的初始化方法<span class="hljs-comment">//var3(33333)不能在这里初始化</span><br>&#123;<br>    var1 =<span class="hljs-number">11111</span>; <span class="hljs-comment">//正确, 普通变量也可以在这里初始化</span><br>    <span class="hljs-comment">//var2 = 222222; 错误，因为常量不能赋值，只能在 &quot;constructor initializer （构造函数的初始化列表）&quot; 那里初始化</span><br>          <br>    var3 =<span class="hljs-number">44444</span>; <span class="hljs-comment">//这个赋值是正确的，不过因为所有对象一个静态成员，所以会影响到其他的，这不能叫做初始化了吧</span><br>&#125;<br>Test::~<span class="hljs-built_in">Test</span>(<span class="hljs-type">void</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="mutable">mutable</h5><p>​<code>mutalble</code>使得常成员函数可以修改他们的值。被<code>mutable</code>修饰的成员对象任何时候都不会被视为常对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Line</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Line</span>(<span class="hljs-type">const</span> Point &amp;p1,<span class="hljs-type">const</span> Point &amp;p2):<span class="hljs-built_in">p1</span>(p1),<span class="hljs-built_in">p2</span>(p2),<span class="hljs-built_in">len</span>(<span class="hljs-number">-1</span>)&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getLen</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-keyword">private</span>:<br>    Point p1,p2;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">double</span> len;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Line::getLen</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(len&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">double</span> x = p1.<span class="hljs-built_in">getX</span>()-p2.<span class="hljs-built_in">getX</span>();<br>        <span class="hljs-type">double</span> y = p1.<span class="hljs-built_in">getY</span>()-p2.<span class="hljs-built_in">getY</span>();<br>        len = <span class="hljs-built_in">sqrt</span>(x*x+y*y);<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="文件结构与外部引用">文件结构与外部引用</h5><p>​ <code>C++</code>文件结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">.h 头文件 类定义文件 <br>.cpp 类实现文件<br>.cpp 类使用文件<br></code></pre></td></tr></table></figure><p>​ <strong>外部引用</strong></p><p>​一个变量除了在定义他的源文件中引用，还被其他文件引用。需要加<code>extern</code>文件关键字。</p><p>​<code>extern</code>关键字声明的变量，如果同时指定类初值，则是定义性声明（声明的同时定义，分配内存初始化），否则是引用性声明。</p><p>​<strong>通常情况下，变量和函数的定义都放在源文件中，而对外部变量和外部函数的引用性声明则放在头文件中。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .cpp 1</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">// .cpp2</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> i ;<br></code></pre></td></tr></table></figure><p>​ <strong>将变量和函数限制在编译单元内</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//被namespace括起的区域都属于匿名的命名空间</span><br><span class="hljs-comment">//不会暴露给其他源文件</span><br><span class="hljs-keyword">namespace</span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>    n++;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="编译">编译</h5><p>​ <strong>预定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span></span><br></code></pre></td></tr></table></figure><p>​ <strong>条件编译</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 形式1</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span>  ...</span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <br><span class="hljs-comment">// 形式2    </span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 形式3</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> ...</span><br> ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br><span class="hljs-comment">// 形式4</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ... <span class="hljs-comment">//如果经过#define并且未经#undef删除</span></span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br><span class="hljs-comment">// 形式5</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br></code></pre></td></tr></table></figure><p>​ <strong>defined操作符</strong></p><p>​<code>defined</code>是一个预处理操作符，而不是指令，因此不用<code>#</code>开头。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYHEAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYHEAD_H</span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <br><span class="hljs-comment">//等价于</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(MYHEAD_H)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYHEAD_H</span><br>  ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h5 id="堆栈内存管理">堆栈内存管理</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>&#123;...&#125;;<br>...<br>    <br>&#123;<br>    <span class="hljs-comment">//c1所占空间来自Stack栈 存在于某一块作用域之内的空间</span><br>    <span class="hljs-comment">// 作用域结束生命结束 会被自动清理</span><br>    <span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</span></span>; <span class="hljs-comment">//local object  auto object</span><br>    <br>    <span class="hljs-comment">// p所占空间来自Heap堆 内存来自于全局内存，动态分配</span><br>    Complex* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Complex</span>(<span class="hljs-number">3</span>); <br>    ...<br>    <span class="hljs-keyword">delete</span> p;<br>    <span class="hljs-comment">//static object 离开作用域生命仍然存在</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> Complex <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</span></span>; <br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习 线性回归 笔记</title>
    <link href="/2023/02/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一知识储备">一、知识储备</h3><h5 id="公式">1. 公式</h5><p>线性回归一般模型：<span class="math display">\[\begin{equation} \haty = w_1x_1+w_2x_2+\cdots+w_nx_n+b\end{equation} \]</span></p><p>线性代数表示：<span class="math display">\[\begin{equation}\hat y=w^Tx+b\end{equation}\]</span></p><p>损失函数：<span class="math display">\[\begin{equation}\l^{(i)}(w,b)=\frac{1}{2}(\hat y^{(i)}-y^{(i)})\end{equation}\]</span></p><p>==模型更新过程==：</p><p><span class="math inline">\(\begin{split}\begin{aligned} \mathbf{w}&amp;\leftarrow \mathbf{w} - \frac{\eta}{|\mathcal{B}|} \sum_{i \in\mathcal{B}} \partial_{\mathbf{w}} l^{(i)}(\mathbf{w}, b) = \mathbf{w} -\frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \mathbf{x}^{(i)}\left(\mathbf{w}^\top \mathbf{x}^{(i)} + b - y^{(i)}\right),\\ b&amp;\leftarrow b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}}\partial_b l^{(i)}(\mathbf{w}, b) = b - \frac{\eta}{|\mathcal{B}|}\sum_{i \in \mathcal{B}} \left(\mathbf{w}^\top \mathbf{x}^{(i)} + b -y^{(i)}\right). \end{aligned}\end{split}\Longrightarrow(\mathbf{w},b)\leftarrow (\mathbf{w},b) - \frac{\eta}{|\mathcal{B}|} \sum_{i \in\mathcal{B}} \partial_{(\mathbf{w},b)}l^{(i)}(\mathbf{w},b).\)</span></p><h5 id="函数">2. 函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><br>torch.tensor([[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]]) <br><span class="hljs-comment">#为张量中每个元素赋值 最外层的列表对应于轴0，内层的列表对应于轴1</span><br><br>X = torch.arange(<span class="hljs-number">12</span>, dtype=torch.float32).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br>Y = torch.tensor([[<span class="hljs-number">2.0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]])<br>torch.cat((X, Y), dim=<span class="hljs-number">0</span>), torch.cat((X, Y), dim=<span class="hljs-number">1</span>) <br><span class="hljs-comment">#dim== 0 行增加，拼到行后面， dim==1 列增加，拼到列后面</span><br><br>loss.backward() <br><span class="hljs-comment">#自动微分，计算变量的反向传播，意味着跟踪整个计算图，填充关于每个参数的偏导数</span><br><br><span class="hljs-comment">#https://www.cnblogs.com/tangjunjun/p/14437631.html</span><br><span class="hljs-comment"># Eg1:</span><br>x = torch.arange(<span class="hljs-number">4.0</span>) <span class="hljs-comment"># X=[0,1,2,3]</span><br>x.requires_grad_(<span class="hljs-literal">True</span>)<br>y = <span class="hljs-number">2</span> * torch.dot(x, x)  <span class="hljs-comment"># y = 2 * X^T*X 标量</span><br>y.backward()  <span class="hljs-comment"># y标量 y_i&#x27; = 4*(Dy/Dx_i)  [0,4,8,12]</span><br>x.grad<br><span class="hljs-comment"># 输出： tensor([ 0.,  4.,  8., 12.])</span><br><br><span class="hljs-comment"># Eg2:</span><br>x.grad.zero_()<br>y = x.<span class="hljs-built_in">sum</span>()  <span class="hljs-comment"># y = x1 + x2 + x3 + x4 标量</span><br>y.backward() <span class="hljs-comment"># y&#x27; = Dy/x_1 Dy/x_2 Dy/x_3 Dy/x_4</span><br>x.grad<br><span class="hljs-comment"># 输出： tensor([1., 1., 1., 1.])</span><br><br><span class="hljs-comment"># Eg3:</span><br>x.grad.zero_()<br>y = x * x <span class="hljs-comment"># y 向量</span><br><span class="hljs-comment">#y.sum().backward() #求和为标量再backward yi&#x27; = Dy/Dx_i = 2x_i</span><br><span class="hljs-comment">#等价于y.backward(torch.ones(len(x))) ==&gt; 赋予每个参数x_i前的权重系数为1  ==&gt; x1+x2+x3+x4 ==&gt;y.sum()</span><br>y.backward(torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.01</span>,<span class="hljs-number">0.001</span>])) <br><span class="hljs-comment">#==&gt;赋予每个参数x_i的权重为对应值 0.1x1+1.0x2+0.01x3+0.0001x4</span><br><span class="hljs-built_in">print</span>(x.grad)<br><span class="hljs-comment">#输出：tensor([0.0000, 0.2000, 0.0400, 0.0060])</span><br></code></pre></td></tr></table></figure><h3 id="二代码实现">二、代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>true_w = torch.tensor([-<span class="hljs-number">2</span>,<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">2</span><br><span class="hljs-comment"># y = -2x1 + 3.4x2 +2</span><br><br>features,labels = d2l.synthetic_data(true_w,true_b,<span class="hljs-number">1000</span>)<br><span class="hljs-comment">#synthetic_data(w,b,num_samples)</span><br><span class="hljs-comment">#生成 1000 x 2 x 的集合 和 对应的 y的结果 作为初始数据</span><br><span class="hljs-comment"># features 用来存输入的x</span><br><span class="hljs-comment"># labels 用来存y</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_array</span>(<span class="hljs-params">data_arrays,batch_size,is_train=<span class="hljs-literal">True</span></span>):<br>    dataset = data.TensorDataset(*data_arrays)<br>    <span class="hljs-keyword">return</span> data.DataLoader(dataset,batch_size,shuffle=is_train)<br><br><br>batch_size = <span class="hljs-number">10</span><br>dataset = load_array((features,labels),batch_size)<br><br>loss = nn.MSELoss()<br>net = nn.Sequential(nn.Linear(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))<br>trainer = torch.optim.SGD(net.parameters(),lr=<span class="hljs-number">0.03</span>)<br><br>epochs = <span class="hljs-number">3</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-keyword">for</span> X,y <span class="hljs-keyword">in</span> dataset:<br>        l = loss(net(X),y)<br>        trainer.zero_grad()<br>        l.backward()<br>        trainer.step()<br>    l = loss(net(X),y)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch<span class="hljs-subst">&#123;epoch+<span class="hljs-number">1</span>&#125;</span>,loss<span class="hljs-subst">&#123;l:f&#125;</span>&#x27;</span>)<br><br>w = net[<span class="hljs-number">0</span>].weight.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w的估计误差：&#x27;</span>, true_w - w.reshape(true_w.shape))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;W:&#x27;</span>,w)<br>b = net[<span class="hljs-number">0</span>].bias.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b的估计误差：&#x27;</span>, true_b - b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python笔记</title>
    <link href="/2022/09/24/Python%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/24/Python%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="preface">0. Preface</h5><p>整理一些杂七杂八的东西</p><h5 id="推导式">1. 推导式</h5><ul><li><p>能简化对数据进行筛选的语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">[表达式 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表] <br>[out_exp_res <span class="hljs-keyword">for</span> out_exp <span class="hljs-keyword">in</span> input_list]<br><br><span class="hljs-comment">#或者 </span><br><br>[表达式 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表 <span class="hljs-keyword">if</span> 条件]<br>[out_exp_res <span class="hljs-keyword">for</span> out_exp <span class="hljs-keyword">in</span> input_list <span class="hljs-keyword">if</span> condition]<br><br>[结果值<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> 结果<span class="hljs-number">2</span>  <span class="hljs-keyword">for</span> 变量名 <span class="hljs-keyword">in</span> 列表]<br>[out_exp_res1 <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> out_exp_res2 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表 ]<br><br></code></pre></td></tr></table></figure></li></ul><h5 id="列表元组字典集合">2. 列表、元组、字典、集合</h5><ul><li><p>列表,常用方法都行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">False</span>]<br></code></pre></td></tr></table></figure></li><li><p>元组，和列表类似，组内元素不能更改（初始化的时候指定了一片内存）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">tuple</span>=(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></li><li><p>字典，对象，键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;<span class="hljs-string">&#x27;Name&#x27;</span>:<span class="hljs-string">&#x27;zly&#x27;</span>,<span class="hljs-string">&#x27;key&#x27;</span>:<span class="hljs-string">&#x27;value&#x27;</span>&#125;<br><br><br>dict0 = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># 1、传一个空字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict0:&#x27;</span>, dict0)<br> <br>dict1 = <span class="hljs-built_in">dict</span>(&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">24</span>&#125;)  <span class="hljs-comment"># 2、传一个字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict1:&#x27;</span>, dict1)<br> <br>dict2 = <span class="hljs-built_in">dict</span>(user=<span class="hljs-string">&#x27;admin&#x27;</span>, password=<span class="hljs-number">123456</span>)  <span class="hljs-comment"># 3、传关键字</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict2:&#x27;</span>, dict2)<br> <br>dict3 = <span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;student&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;teacher&#x27;</span>, <span class="hljs-number">2</span>)])  <span class="hljs-comment"># 4、传一个包含一个或多个元组的列表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict3:&#x27;</span>, dict3)<br> <br>dict5 = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]))  <span class="hljs-comment"># 5、传一个zip()函数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict5:&#x27;</span>, dict5)<br><br><span class="hljs-comment"># 使用大括号或者dict()内建函数构造字典</span><br></code></pre></td></tr></table></figure></li><li><p>集合 无序、不重复（自动去除重复值）</p></li><li><ul><li>创建空集合不能用<code>&#123;&#125;</code>，要用<code>set()</code></li><li>集合之间可以使用关系运算符进行运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">num=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-comment">#&#123;1,2,3,4&#125;</span><br><br></code></pre></td></tr></table></figure></li></ul><h5 id="关于流程控制语句">3.关于流程控制语句</h5><ul><li><p><strong>break</strong> 语句可以跳出 for 和 while的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else块将不执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>,<span class="hljs-string">&#x27;12&#x27;</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-keyword">if</span> site == <span class="hljs-string">&quot;Runoob&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;菜鸟教程!&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + site)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)  <span class="hljs-comment">#break之后这里的else没有执行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<br><br><span class="hljs-comment"># Baidu</span><br><span class="hljs-comment">#循环数据 Google</span><br><span class="hljs-comment">#菜鸟教程!</span><br><span class="hljs-comment">#完成循环!</span><br></code></pre></td></tr></table></figure></li><li><p><strong>continue</strong> 语句被用来告诉 Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-keyword">if</span> site == <span class="hljs-string">&quot;Runoob&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;菜鸟教程!&quot;</span>)<br>        <span class="hljs-keyword">continue</span>  <span class="hljs-comment">#continue下面的没有执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + site)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<br><br><span class="hljs-comment">#循环数据 Baidu</span><br><span class="hljs-comment">#循环数据 Google</span><br><span class="hljs-comment">#菜鸟教程!</span><br><span class="hljs-comment">#循环数据 Taobao</span><br><span class="hljs-comment">#没有循环数据!</span><br><span class="hljs-comment">#完成循环!</span><br></code></pre></td></tr></table></figure></li><li><p>Python pass是空语句，是为了保持程序结构的完整性。pass不做任何事情，一般用做占位语句，如下实例</p><ul><li>没事做就用<code>pass</code>吧</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Runoob&#x27;</span>: <br>   <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;o&#x27;</span>:<br>      <span class="hljs-keyword">pass</span><br>      <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;执行 pass 块&#x27;</span>)<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;当前字母 :&#x27;</span>, letter)<br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Good bye!&quot;</span>)<br><br><span class="hljs-comment"># 当前字母 : R</span><br><span class="hljs-comment"># 当前字母 : u</span><br><span class="hljs-comment"># 当前字母 : n</span><br><span class="hljs-comment"># 执行 pass 块</span><br><span class="hljs-comment"># 当前字母 : o</span><br><span class="hljs-comment"># 执行 pass 块</span><br><span class="hljs-comment"># 当前字母 : o</span><br><span class="hljs-comment"># 当前字母 : b</span><br><span class="hljs-comment"># Good bye!</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="函数">4.函数</h5><ul><li><p>感觉没什么好看的</p><ul><li><p>注意默认参数 <code>max(a,b=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">max</span>(<span class="hljs-params">a,b</span>):<br> <span class="hljs-keyword">if</span> a&gt;b:<br> <span class="hljs-keyword">return</span> a<br> <span class="hljs-keyword">else</span>:<br>  <span class="hljs-keyword">return</span> b<br></code></pre></td></tr></table></figure></li><li><p>注意可选参数<code>max(a,*b)</code>,<code>max(a,**b)</code></p><ul><li>加了<code>*</code>号，参数以<strong>元组</strong>存入，存放所有未命名的变量参数</li><li>加了两个<code>**</code>号，参数以<strong>字典</strong>的方式存入</li></ul></li><li><p>声明的时候<code>*</code>可以单独出现</p><ul><li>单独出现的时候,<code>*</code>后面的参数必须使用关键字输入</li><li>关键字输入 <code>max(5,b=15)</code>，指定为哪个参数赋值</li><li>调用的时候，关键字参数必须为最后一个参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fucntion</span>(<span class="hljs-params">i,j=<span class="hljs-number">1.1</span>,k=<span class="hljs-string">&#x27;hello&#x27;</span></span>)<br><span class="hljs-built_in">print</span>(i,j,j)<br>  <br>function(<span class="hljs-number">1</span>,k=<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-comment">#1 1.1 world  </span><br><span class="hljs-comment">#指定为参数k赋值，</span><br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typescript笔记</title>
    <link href="/2022/09/21/Typescript%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/21/Typescript%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="概述">0.概述</h5><p>本来报道之前看过一段时间<code>Typescript</code>，暑假又接受了“锻炼”，然后这几天仿佛无所事事（其实有事）。找闫明洋师兄聊天，师兄问了我一个<code>Typescript</code>的面试题，<code>interface</code>和<code>type</code>两者有什么区别。我才意识到之前看的比较快，细枝末节都略过了，所以这篇笔记记录自己想记的地方，不一定按顺序组织了。</p><h5 id="基础类型">1.基础类型</h5><h6 id="字符串">字符串</h6><ul><li><p>注意模版字符串的使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`Gene`</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">37</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">sentence</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123; name &#125;</span>.I&#x27;ll be <span class="hljs-subst">$&#123; age + <span class="hljs-number">1</span> &#125;</span> years old next month.`</span>;<br><span class="hljs-comment">//等于</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">sentence</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;Hello, my name is &quot;</span> + name + <span class="hljs-string">&quot;.\n\n&quot;</span> +<br>    <span class="hljs-string">&quot;I&#x27;ll be &quot;</span> + (age + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; years old next month.&quot;</span>;<br><span class="hljs-comment">//写很长，一直加，不美观</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="数组">数组</h6><ul><li><p>两种方式</p><ul><li>```typescript let list: number[] = [1, 2, 3]; <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>+ ```typescript<br><span class="hljs-title">  let list:</span> Array&lt;number&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h6 id="元组">元组</h6><ul><li><p>“数”组中可以定义不同类型的元素</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>:[<span class="hljs-built_in">string</span>,<span class="hljs-built_in">number</span>];<br>x=[<span class="hljs-string">&#x27;zifuchuan&#x27;</span>,<span class="hljs-number">456</span>];<br><span class="hljs-comment">//必须按照声明的元组类型进行初始化</span><br><span class="hljs-comment">//对元组中数据进行操作的时候，操作的方法必须和操作的元组对象对应</span><br></code></pre></td></tr></table></figure></li><li><p>当对元组中新数据进行赋值的时候</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">x[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;World&#x27;</span>;<br><span class="hljs-comment">//x[3]可以赋值为(string|number)类型，x[4]=true;报错，x中没有布尔型</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="枚举">枚举</h6><ul><li><p>很友好，用起来很舒服</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-title class_">Red</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br></code></pre></td></tr></table></figure></li><li><p>可以选择手动赋值、加序号</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-title class_">Red</span> = <span class="hljs-number">1</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-title class_">Red</span> = <span class="hljs-number">2</span>, <span class="hljs-title class_">Green</span>=<span class="hljs-number">4</span>, <span class="hljs-title class_">Blue</span>=<span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br></code></pre></td></tr></table></figure></li></ul><h6 id="any">any</h6><ul><li><p>已知数组的一部分值，可以用</p></li><li><p>不清楚值是什么类型的时候可以用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-built_in">any</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;free&quot;</span>];<br>list[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure></li></ul><h6 id="类型断言"><strong>类型断言</strong></h6><ul><li><p>有的时候类型不通过，强制告诉编译器这个类型是我指定的类型</p></li><li><p>两种方式</p><ul><li>```typescript let someValue: any = "this is a string"; letstrLength: number = (<string>someValue).length; //&lt;&gt; 尖括号写法<figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim"><br>+ ```typescript<br>  <span class="hljs-keyword">let</span> someValue: <span class="hljs-type">any</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br>  <span class="hljs-keyword">let</span> strLength: number = (someValue <span class="hljs-keyword">as</span> <span class="hljs-type">string</span>).length;\<br>  //<span class="hljs-keyword">as</span>写法<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="有关接口">2.有关接口</h5><h6 id="概念">概念</h6><ul><li><p><code>Typescript</code>会对值所具有的结构进行检查</p></li><li><p>传入的对象参数实际上会包含很多数学</p><ul><li>但是编译器只会检查那些必要的属性和定义的类型是否匹配</li><li>类检查器不会去检查属性的顺序，只需要相应的属性存在并且类型符合就行</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">LabelledValue</span> &#123;<br>  <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printLabel</span>(<span class="hljs-params">labelledObj: LabelledValue</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(labelledObj.<span class="hljs-property">label</span>);<br>&#125;<br><span class="hljs-keyword">let</span> myObj = &#123;<span class="hljs-attr">size</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Size 10 Object&quot;</span>&#125;;<br><span class="hljs-title function_">printLabel</span>(myObj); <br><span class="hljs-comment">//只要这个label属性存在就行了</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="可选属性">可选属性</h6><ul><li><p>用<code>?</code>解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">interface <span class="hljs-title class_">SquareConfig</span>&#123;<br>  color?:string;<br>  width?:number;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createSquare</span>(<span class="hljs-params">config:SquareConfig</span>):(<span class="hljs-attr">color</span>:string,<span class="hljs-attr">area</span>:number)&#123;...&#125;<br><span class="hljs-comment">// createSquare函数，接收SquareConfig类型的参数，返回参数类型为：&#123;color:string,area:number&#125;;</span><br><span class="hljs-keyword">let</span> mySquare = <span class="hljs-title function_">createSquare</span>(&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;black&#x27;</span>&#125;) <span class="hljs-keyword">as</span> <span class="hljs-title class_">SquareConfig</span>;<br><span class="hljs-comment">// 使用as，将createSquare()函数的返回值类型强制转化为SquareConfig,赋值给mySquare                                                                 </span><br></code></pre></td></tr></table></figure></li></ul><h6 id="只读属性">只读属性</h6><ul><li><p>用<code>readonly</code>解决</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Point</span>&#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">x</span>:<span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">readonly</span> <span class="hljs-attr">y</span>:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">p1</span>:<span class="hljs-title class_">Point</span> =&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">10</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">20</span>&#125;;<br>p1.<span class="hljs-property">x</span>=<span class="hljs-number">5</span>; <span class="hljs-comment">//错误 只能读取，不能修改（重新赋值）</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">ro</span>: <span class="hljs-title class_">ReadonlyArray</span>&lt;<span class="hljs-built_in">number</span>&gt; = a;  <span class="hljs-comment">//ReadonlyArray相当于readonly的二维实现</span><br>ro[<span class="hljs-number">0</span>] = <span class="hljs-number">12</span>; <span class="hljs-comment">// error!</span><br>ro.<span class="hljs-title function_">push</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// error!</span><br>ro.<span class="hljs-property">length</span> = <span class="hljs-number">100</span>; <span class="hljs-comment">// error!</span><br>a = ro; <span class="hljs-comment">// error!</span><br></code></pre></td></tr></table></figure></li><li><p>和<code>const</code>的区别</p><ul><li><code>const</code>用来声明变量</li><li><code>readonly</code>用来声明属性</li></ul></li></ul><h6 id="接口继承">接口继承</h6><ul><li><p><code>implemens</code>关键字继承接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> firstClock&#123;<br> <span class="hljs-attr">hours</span>:<span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> secondClock&#123;<br>  <span class="hljs-attr">minutes</span>:<span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> trueClock implements fisrtClock,secondClock&#123;<br>  <span class="hljs-attr">seconds</span>:<span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">let</span> time = &lt;trueClock&gt;&#123;&#125;;<br>time.<span class="hljs-property">hours</span>=<span class="hljs-number">12</span>;<br>time.<span class="hljs-property">minutes</span>=<span class="hljs-number">32</span>;<br>time.<span class="hljs-property">seconds</span>=<span class="hljs-number">17</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>extends</code>关键字继承类</p><ul><li>会继承类的成员但不包括其实现，接口中类的成员只能由这个类的子类实现</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Control</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">state</span>: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SelectableControl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Control</span> &#123;<br>    <span class="hljs-title function_">select</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Control</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SelectableControl</span> &#123;<br>    <span class="hljs-title function_">select</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Control</span> &#123;<br>    <span class="hljs-title function_">select</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><br><span class="hljs-comment">// 错误：“Image”类型缺少“state”属性。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Image</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SelectableControl</span> &#123;<br>    <span class="hljs-title function_">select</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Location</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="有关类">3.有关类</h5><ul><li><p>就正常定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">enterName:<span class="hljs-built_in">string</span>,enterAge:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = enterName;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = enterAge;<br>  &#125;<br>  <span class="hljs-title function_">study</span>():<span class="hljs-built_in">void</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`I have been studied for <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span> years`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>但是继承的时候要理解一下原理</p><ul><li>一个是附加属性的加入，和父类中一样的属性要放在<code>super()</code>里给父类调用</li><li><code>super()</code> 表示父类的构造函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">animal</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">enterName: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = enterName;<br>    &#125;<br>    <span class="hljs-title function_">func</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我的名字叫:&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">animal</span> &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>; <span class="hljs-comment">//子类中新添加的属性</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">enterDogName: <span class="hljs-built_in">string</span>, enterAge: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-variable language_">super</span>(enterDogName); <span class="hljs-comment">//调用父类的构造函数，</span><br>      <span class="hljs-comment">//调用子类实例的时候(name,age),name属性是父类中有的，用super()去调用父类的构造函数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = enterAge;<br>      <span class="hljs-comment">//新添加的属性，需要用this关键字</span><br>      <span class="hljs-comment">//this关键字必须在super()函数后面</span><br>    &#125;<br>  <span class="hljs-comment">//重写override 父类中的方法 函数名、参数一样，代码不一样</span><br>    <span class="hljs-title function_">func</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This is a Dog and I override parent\&#x27;s name&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//同理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">human</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">animal</span> &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-attr">language</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">enterName: <span class="hljs-built_in">string</span>, enterAge: <span class="hljs-built_in">number</span>, enterLanguage: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">super</span>(enterName);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = enterAge;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">language</span> = enterLanguage;<br>    &#125;<br>    <span class="hljs-title function_">func</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I am human and I can say&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">language</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> pe1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">human</span>(<span class="hljs-string">&#x27;zly&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;CHN&#x27;</span>);<br><span class="hljs-comment">//前两个参数都给传到子类human的constructor里,&#x27;zly&#x27;再传给super()</span><br>pe1.<span class="hljs-title function_">func</span>();<br></code></pre></td></tr></table></figure></li></ul><h6 id="关键词">关键词</h6><p><code>public</code></p><ul><li>程序里定义的所有成员都可以访问</li></ul><p><code>protected</code></p><ul><li>程序里定义的成员阿崽派生类(子类)中仍然可以访问</li></ul><p><code>private</code></p><ul><li><p>不能在声明它的类外部访问</p></li><li><p>使用<code>get</code>、<code>set</code>关键字进行访问（存取器）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> passcode = <span class="hljs-string">&quot;secret passcode&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">_fullName</span>: <span class="hljs-built_in">string</span>;<br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">fullName</span>(): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fullName</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">fullName</span>(<span class="hljs-params">newName: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (passcode &amp;&amp; passcode == <span class="hljs-string">&quot;secret passcode&quot;</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fullName</span> = newName;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error: Unauthorized update of employee!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>employee.<span class="hljs-property">fullName</span> = <span class="hljs-string">&quot;Bob Smith&quot;</span>;<br><span class="hljs-keyword">if</span> (employee.<span class="hljs-property">fullName</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(employee.<span class="hljs-property">fullName</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="抽象类">抽象类</h6><ul><li><p>不能直接被实例化</p></li><li><p>可以包含实现细节，但具体实现<strong>必须</strong>在子类中有体现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span></span>) &#123;<br>    &#125;<br><br>    <span class="hljs-title function_">printName</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Department name: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">printMeeting</span>(): <span class="hljs-built_in">void</span>; <span class="hljs-comment">// 必须在派生类中实现</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountingDepartment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Department</span> &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>(<span class="hljs-string">&#x27;Accounting and Auditing&#x27;</span>); <span class="hljs-comment">// 在派生类的构造函数中必须调用 super()</span><br>    &#125;<br><br>    <span class="hljs-title function_">printMeeting</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">generateReports</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Generating accounting reports...&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">department</span>: <span class="hljs-title class_">Department</span>; <span class="hljs-comment">// 允许创建一个对抽象类型的引用</span><br>department = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(); <span class="hljs-comment">// 错误: 不能创建一个抽象类的实例</span><br>department = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountingDepartment</span>(); <span class="hljs-comment">// 允许对一个抽象子类进行实例化和赋值</span><br>department.<span class="hljs-title function_">printName</span>();<br>department.<span class="hljs-title function_">printMeeting</span>();<br>department.<span class="hljs-title function_">generateReports</span>(); <span class="hljs-comment">// 错误: 方法在声明的抽象类中不存在</span><br><span class="hljs-keyword">let</span> newDepartment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(); <br>newDepartment.<span class="hljs-title function_">generateReports</span>()<span class="hljs-comment">//可以的</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="函数">4. 函数</h5><h6 id="分类">分类</h6><ul><li><p>命名函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>)&#123;<br><span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> myAdd = <span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>完整的函数类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">myAdd</span>:<span class="hljs-function">(<span class="hljs-params">x:<span class="hljs-built_in">number</span>,y:<span class="hljs-built_in">number</span></span>)=&gt;</span><span class="hljs-built_in">number</span>=<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params">x:<span class="hljs-built_in">number</span>,y:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">number</span>&#123;<br>  <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="用法">用法</h6><ol type="1"><li><p>可选参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myAdd</span>(<span class="hljs-params">x:<span class="hljs-built_in">number</span>,y:<span class="hljs-built_in">number</span>,z?:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">number</span>&#123;<br>  <span class="hljs-keyword">return</span> x+y+z;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>初始默认值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildName</span>(<span class="hljs-params">firstName:<span class="hljs-built_in">string</span>,secondName=<span class="hljs-string">&#x27;Ling yi&#x27;</span></span>)&#123;<br>  <span class="hljs-keyword">return</span> firstName+secondName;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>剩余参数</p><p>不知道有多少个变量、想同时操作多个变量的时候使用</p><p><code>Typescript</code>自动创建参数数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildName</span>(<span class="hljs-params">firstName:<span class="hljs-built_in">string</span>,secondName:<span class="hljs-built_in">string</span>,...restofName:<span class="hljs-built_in">string</span>[]</span>)&#123;<br>  <span class="hljs-keyword">return</span> firstName+secondName+restofName.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 编译器创建参数数组，名字是你在省略号（ ...）后面给定的名字，你可以在函数体内使用这个数组。</span><br></code></pre></td></tr></table></figure></li><li><p><strong>函数中的this</strong></p><p>独立调用对象中的方法需要注意<code>this</code>关键字的使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> deck = &#123;<br>    <span class="hljs-attr">suits</span>: [<span class="hljs-string">&quot;hearts&quot;</span>, <span class="hljs-string">&quot;spades&quot;</span>, <span class="hljs-string">&quot;clubs&quot;</span>, <span class="hljs-string">&quot;diamonds&quot;</span>],<br>    <span class="hljs-attr">cards</span>: <span class="hljs-title class_">Array</span>(<span class="hljs-number">52</span>),<br>    <span class="hljs-attr">createCardPicker</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">//返回一个函数</span><br>    <span class="hljs-comment">//    return function() &#123;</span><br>    <span class="hljs-comment">//        let pickedCard = Math.floor(Math.random() * 52);</span><br>    <span class="hljs-comment">//        let pickedSuit = Math.floor(pickedCard / 13);</span><br><br>    <span class="hljs-comment">//        return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125;;</span><br>          <span class="hljs-comment">//这里的this是指当前窗口window</span><br>    <span class="hljs-comment">//    &#125;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span> &#123;<br>        <span class="hljs-comment">//箭头函数能保存函数创建时的 this值，而不是调用时的值</span><br>        <span class="hljs-keyword">let</span> pickCard = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">52</span>);<br>        <span class="hljs-keyword">let</span> pickedSuit = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(pickCard/<span class="hljs-number">13</span>);<br>        <br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">suit</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">suits</span>[pickedSuit],<span class="hljs-attr">card</span>:pickCard%<span class="hljs-number">13</span>&#125;;<br>      &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> cardPicker = deck.<span class="hljs-title function_">createCardPicker</span>();<br><span class="hljs-keyword">let</span> pickedCard = <span class="hljs-title function_">cardPicker</span>(); <span class="hljs-comment">//报错</span><br><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;card: &quot;</span> + pickedCard.<span class="hljs-property">card</span> + <span class="hljs-string">&quot; of &quot;</span> + pickedCard.<span class="hljs-property">suit</span>);<br></code></pre></td></tr></table></figure></li><li><p>方法的重载overload 允许不同参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> suits = [<span class="hljs-string">&quot;hearts&quot;</span>, <span class="hljs-string">&quot;spades&quot;</span>, <span class="hljs-string">&quot;clubs&quot;</span>, <span class="hljs-string">&quot;diamonds&quot;</span>];<br><br><span class="hljs-comment">// pickCard方法重载</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pickCard</span>(<span class="hljs-params">x: &#123;suit: <span class="hljs-built_in">string</span>; card: <span class="hljs-built_in">number</span>; &#125;[]</span>): <span class="hljs-built_in">number</span>;<br><span class="hljs-comment">//提供type &#123;suit: string; card: number; &#125;[] 也就是object</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pickCard</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span></span>): &#123;<span class="hljs-attr">suit</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">card</span>: <span class="hljs-built_in">number</span>; &#125;;<br><span class="hljs-comment">//提供type number 也就是number</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pickCard</span>(<span class="hljs-params">x</span>): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-comment">// Check to see if we&#x27;re working with an object/array</span><br>    <span class="hljs-comment">// if so, they gave us the deck and we&#x27;ll pick the card</span><br>  <br>    <span class="hljs-comment">//因为有了重载函数，可以输入两种预先重载的参数，然后在主函数中进行判断</span><br>    <span class="hljs-comment">//根据参数类型进行相应的操作</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x == <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>        <span class="hljs-keyword">let</span> pickedCard = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * x.<span class="hljs-property">length</span>);<br>        <span class="hljs-keyword">return</span> pickedCard;<br>    &#125;<br>    <span class="hljs-comment">// Otherwise just let them pick the card</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x == <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>        <span class="hljs-keyword">let</span> pickedSuit = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(x / <span class="hljs-number">13</span>);<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">suit</span>: suits[pickedSuit], <span class="hljs-attr">card</span>: x % <span class="hljs-number">13</span> &#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> myDeck = [&#123; <span class="hljs-attr">suit</span>: <span class="hljs-string">&quot;diamonds&quot;</span>, <span class="hljs-attr">card</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">suit</span>: <span class="hljs-string">&quot;spades&quot;</span>, <span class="hljs-attr">card</span>: <span class="hljs-number">10</span> &#125;, &#123; <span class="hljs-attr">suit</span>: <span class="hljs-string">&quot;hearts&quot;</span>, <span class="hljs-attr">card</span>: <span class="hljs-number">4</span> &#125;];<br><span class="hljs-keyword">let</span> pickedCard1 = myDeck[<span class="hljs-title function_">pickCard</span>(myDeck)];<br><span class="hljs-comment">//输入卡片</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;card: &quot;</span> + pickedCard1.<span class="hljs-property">card</span> + <span class="hljs-string">&quot; of &quot;</span> + pickedCard1.<span class="hljs-property">suit</span>);<br><br><span class="hljs-keyword">let</span> pickedCard2 = <span class="hljs-title function_">pickCard</span>(<span class="hljs-number">15</span>);<br><span class="hljs-comment">//输入数字</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;card: &quot;</span> + pickedCard2.<span class="hljs-property">card</span> + <span class="hljs-string">&quot; of &quot;</span> + pickedCard2.<span class="hljs-property">suit</span>);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">overF</span>(<span class="hljs-params">enterNum: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">overF</span>(<span class="hljs-params">enterStr: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">overF</span>(<span class="hljs-params">enter</span>): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> enter == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(enter);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> enter == <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是数字&#x27;</span> + enter);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-title function_">overF</span>(<span class="hljs-string">&#x27;sssss&#x27;</span>);<br><span class="hljs-title function_">overF</span>(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure></li></ol><h5 id="泛型">5.泛型</h5><ul><li><p>提供一个类型变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> fn&lt;T&gt;(<span class="hljs-attr">para</span>: T) &#123;<br>    <span class="hljs-keyword">return</span> para;<br>&#125;<br><span class="hljs-comment">//可以不指定泛型</span><br><span class="hljs-keyword">let</span> result1 = <span class="hljs-title function_">fn</span>(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//指定泛型</span><br><span class="hljs-keyword">let</span> result2 = fn&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;123&#x27;</span>);<br><br><span class="hljs-keyword">function</span> fn2&lt;T, K&gt;(<span class="hljs-attr">para1</span>: T, <span class="hljs-attr">para2</span>: K) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(para1);<br>    <span class="hljs-keyword">return</span> para2;<br>&#125;<br><span class="hljs-comment">//可以同时指定两个泛型</span><br><span class="hljs-keyword">let</span> result3 = fn2&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-comment">//泛型继承接口，泛型T必须是Inter的一个实现类</span><br><span class="hljs-keyword">function</span> fn3&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Inter</span>&gt;(<span class="hljs-attr">a</span>: T) &#123;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-comment">//泛型实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&lt;T&gt;&#123;<br>    <span class="hljs-attr">name</span>: T;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: T</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> mc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mapNews项目</title>
    <link href="/2022/09/16/mapNews/"/>
    <url>/2022/09/16/mapNews/</url>
    
    <content type="html"><![CDATA[<h4 id="概述">0.概述</h4><ol type="1"><li>项目需求：利用地图展示当天各地的新闻（新闻发生点可视化）<ul><li>想法：龙老师的当代地图学进展，地图是信息的载体</li><li>新闻这种信息（时间<code>t</code>、地点<code>x,y</code>、任务<code>z</code>）完美适合地图</li><li>之前对地图的信息理解只停留在地理数据上，没有人文数据</li><li>暑期项目没有使用到数据库的知识，可能需要学习</li><li>想测试一下数据在数据库中处理和在后端代码中处理的速度对比</li></ul></li><li>项目框架：<ul><li>前端框架：<code>Angular</code> （真的只是框架，搭了个界面而已）</li><li>后端：<code>Nodejs</code></li><li>数据库服务：<code>Sqlite</code></li></ul></li><li>具体需求<ul><li>具有可视化地图功能，利用<code>leafletJS</code>实现</li><li>后端自动爬取<ahref="www.chinanews.com">中国新闻网</a>内容，并将相关数据存储到数据库<code>News.db</code>中<ul><li>标题、内容、发布时间</li><li>网页链接、内容摘要、编码格式、爬取时间<br /></li></ul></li><li>（提前）建立<code>Position.db</code>数据库，存储地名以及坐标（经纬度）</li><li><code>New.db</code>中新闻内容<code>News.content</code>与<code>Position.db</code>中地名<code>Position.city</code>模糊匹配得到新闻经纬度</li><li>前端利用新闻经纬度进行可视化</li></ul></li></ol><h4 id="用到的模块">1.用到的模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myCheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><span class="hljs-comment">//cheerio 用在服务器端需要对DOM进行操作的地方</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">//用于前后端通信</span><br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-comment">//用于前后端通信</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SqliteDB</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./sqlite.js&#x27;</span>).<span class="hljs-property">SqliteDB</span>;<br><span class="hljs-comment">//用于操作Sqlite数据库，sqlite.js封装好的文件 </span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//sqlite.js</span><br><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> sqlite3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sqlite3&#x27;</span>).<span class="hljs-title function_">verbose</span>();<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">DB</span> = <span class="hljs-variable constant_">DB</span> || &#123;&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;<br>    filePath = <span class="hljs-string">&#x27;/Users/lingyi/postGraduate/codeMapNews/server/Database/&#x27;</span> + file;<br>  <span class="hljs-comment">//存储路径</span><br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span> = <span class="hljs-keyword">new</span> sqlite3.<span class="hljs-title class_">Database</span>(filePath);<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">exist</span> = fs.<span class="hljs-title function_">existsSync</span>(filePath);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">DB</span>.<span class="hljs-property">exist</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Creating db file!&quot;</span>);<br>        fs.<span class="hljs-title function_">openSync</span>(filePath, <span class="hljs-string">&#x27;w&#x27;</span>);<br>    &#125;;<br><br>&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">printErrorInfo</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error Message:&quot;</span> + err.<span class="hljs-property">message</span> + <span class="hljs-string">&quot; ErrorNumber:&quot;</span>);<br>&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">createTable</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">sql</span>) &#123;<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">serialize</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">run</span>(sql, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != err) &#123;<br>                <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">printErrorInfo</span>(err);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;;<br><br><span class="hljs-comment">/// insert newsData Format </span><br><span class="hljs-comment">//[[title, content, publish_date, url, source_name,source_encoding, crawltime]]</span><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">insertData</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">sql, objects</span>) &#123;<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">serialize</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> stmt = <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">prepare</span>(sql);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; objects.<span class="hljs-property">length</span>; ++i) &#123;<br>            stmt.<span class="hljs-title function_">run</span>(objects[i]);<br>        &#125;<br>        stmt.<span class="hljs-title function_">finalize</span>();<br>    &#125;);<br><br>&#125;;<br><br><span class="hljs-comment">//这里对数据库的插入操作进行了改写，后端代码需要等数据库数据读取完之后在进行操作</span><br><span class="hljs-comment">//写成Promise的格式</span><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">queryData</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">sql</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">all</span>(sql, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, rows</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != err) &#123;<br>                <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">printErrorInfo</span>(err);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-title function_">resolve</span>(rows)<br>        &#125;);<br>    &#125;)<br>&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">executeSql</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">sql</span>) &#123;<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">run</span>(sql, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != err) &#123;<br>            <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">printErrorInfo</span>(err);<br>        &#125;<br>    &#125;);<br>&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">close</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">close</span>();<br>&#125;;<br><br><span class="hljs-comment">/// export SqliteDB.</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">SqliteDB</span> = <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>;<br></code></pre></td></tr></table></figure><h4 id="具体功能的实现">2. 具体功能的实现</h4><h5 id="服务的启动">1. 服务的启动</h5><ul><li>使用到了<code>express模块</code></li></ul><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8082</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server is running on localhost:8082&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">//在8082端口启动服务</span><br></code></pre></td></tr></table></figure> ##### 2.响应前端请求</p><ul><li>用到的模块：<code>axios</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>   <span class="hljs-comment">//设置请求头 允许跨域</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>    <span class="hljs-title function_">reqNewsData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">//向前端发送数据</span><br>        res.<span class="hljs-title function_">send</span>(data)<br>    &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h5 id="数据库的建立">3. 数据库的建立</h5><ul><li>使用到了<code>sqlite.js</code>（见上文）</li></ul><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> file = <span class="hljs-string">&#x27;News.db&#x27;</span>;<br><span class="hljs-keyword">var</span> sqliteDBNews = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqliteDB</span>(file); <br><span class="hljs-comment">//在本地新建名为News.db的数据库</span><br><span class="hljs-keyword">let</span> createNewsTableSql = <span class="hljs-string">&quot;create table if not exists News(title TEXT,content TEXT,publish_date TEXT,url TEXT,source_name TEXT,source_encoding TETX,crawltime TEXT)&quot;</span>;<br><span class="hljs-comment">//News.db数据库建表规则</span><br><span class="hljs-keyword">let</span> insertNewsSql = <span class="hljs-string">&quot;insert OR IGNORE into News(title,content,publish_date,url,source_name,source_encoding,crawltime) values(?,?,?,?,?,?,?)&quot;</span>;<br><span class="hljs-comment">//News.db数据库News表数据插入规则</span><br>sqliteDBNews.<span class="hljs-title function_">createTable</span>(createNewsTableSql);<br><span class="hljs-comment">//创建News表</span><br></code></pre></td></tr></table></figure></p><h5 id="新闻数据的处理">4. 新闻数据的处理</h5><ul><li>使用到了<code>cheerio</code>模块</li></ul><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//设置头文件 避免爬虫被屏蔽</span><br><span class="hljs-keyword">let</span> headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.65 Safari/537.36&#x27;</span><br>&#125;<br><br><span class="hljs-comment">//发送请求,获得根页面所有信息，利用reqCallback()函数对根网页中的新闻页面进行进一步解析</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reqNewsData</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        axios.<span class="hljs-title function_">get</span>(seedURL, &#123;<br>            <span class="hljs-attr">params</span>: &#123;<br>                <span class="hljs-attr">url</span>: seedURL,<br>                <span class="hljs-attr">encoding</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">headers</span>: headers,<br>                <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span> <span class="hljs-comment">//</span><br>            &#125;<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">reqCallback</span>(response.<span class="hljs-property">data</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(data)<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//解析根页面中的网页链接，得到具体新闻的链接，交给newsGet()函数处理具体的</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reqCallback</span>(<span class="hljs-params">body</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>         <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// console.log(html);</span><br>        <span class="hljs-comment">//用cheerio解析html</span><br>        <span class="hljs-keyword">var</span> $ = myCheerio.<span class="hljs-title function_">load</span>(body, &#123; <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">true</span> &#125;);<br>         &#125; <span class="hljs-keyword">catch</span> (e) &#123; <br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读种子页面并转码出错：&#x27;</span> + e)<br>         &#125;;<br>        <span class="hljs-keyword">var</span> seedurl_news;<br>        <span class="hljs-keyword">try</span> &#123;<br>            seedurl_news = <span class="hljs-built_in">eval</span>(seedURL_format);<br>            <span class="hljs-comment">// console.log(seedurl_news);</span><br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;url列表所处的html块识别出错：&#x27;</span> + e) &#125;;<br>        seedurl_news.<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">i, e</span>) &#123; <span class="hljs-comment">//遍历种子页面里所有的a链接</span><br>            <span class="hljs-keyword">var</span> myURL = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//得到具体新闻url</span><br>                <span class="hljs-keyword">var</span> href = <span class="hljs-string">&quot;&quot;</span>;<br>                href = $(e).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;href&quot;</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (href) == <span class="hljs-string">&quot;undefined&quot;</span>) &#123;  <span class="hljs-comment">// 有些网页地址undefined</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (href.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;http://&#x27;</span>) &gt;= <span class="hljs-number">0</span> || href.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;https://&#x27;</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; href.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;shtml&#x27;</span>))<br>                    myURL = href; <span class="hljs-comment">//http://开头的或者https://开头</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (href.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;//&#x27;</span>))<br>                    myURL = <span class="hljs-string">&#x27;http:&#x27;</span> + href; <span class="hljs-comment">//开头的</span><br>                <span class="hljs-keyword">else</span><br>                    myURL = seedURL.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, seedURL.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>) + href; <span class="hljs-comment">//其他</span><br>            &#125;<br>            <span class="hljs-keyword">catch</span> (e) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;识别种子页面中的新闻链接出错：&#x27;</span> + e)<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!url_reg.<span class="hljs-title function_">test</span>(myURL)) &#123;<br>                <span class="hljs-comment">//检验是否符合新闻url的正则表达式</span><br>                <span class="hljs-comment">// console.log(url_reg.test(myURL));</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>          <span class="hljs-comment">//利用newsGet()函数解析具体的网页</span><br>            <span class="hljs-title function_">newsGet</span>(myURL).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(data)    <br>            &#125;); <br>        &#125;);<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//设置具体新闻网页的解析规范，要自己到具体的网页Elemens里去查找、获取DOM元素</span><br><span class="hljs-comment">//利用了jQuery  eval函数 计算某个字符串，并执行其中的JS代码 因此将jQuery写为String模板</span><br><span class="hljs-keyword">const</span> seedURL_format = <span class="hljs-string">&quot;$(&#x27;a&#x27;)&quot;</span>;<br><span class="hljs-keyword">const</span> keywords_format = <span class="hljs-string">&quot; $(&#x27;meta[name=\&quot;keywords\&quot;]&#x27;).eq(0).attr(\&quot;content\&quot;)&quot;</span>;<br><span class="hljs-keyword">const</span> title_format = <span class="hljs-string">&quot;$(&#x27;title&#x27;).text()&quot;</span>;<br><span class="hljs-keyword">const</span> date_format = <span class="hljs-string">&quot;$(&#x27;#pubtime_baidu&#x27;).text()&quot;</span>;<br><span class="hljs-keyword">const</span> engDate_format = <span class="hljs-string">&quot;$(&#x27;.downinfo.dottlne&#x27;).children(&#x27;span&#x27;).eq(0).text()&quot;</span><br><span class="hljs-keyword">const</span> author_format = <span class="hljs-string">&quot;$(&#x27;#author_baidu&#x27;).text()&quot;</span><br><span class="hljs-keyword">const</span> engAuthor_format = <span class="hljs-string">&quot;$(&#x27;.downinfo.dottlne&#x27;).children(&#x27;span&#x27;).eq(2).text()&quot;</span><br><span class="hljs-keyword">const</span> content_format = <span class="hljs-string">&quot;$(&#x27;.left_zw&#x27;).children(&#x27;p&#x27;).text()&quot;</span>;<br><span class="hljs-keyword">const</span> engContent_format = <span class="hljs-string">&quot;$(&#x27;.content&#x27;).children(&#x27;p&#x27;).text()&quot;</span>;<br><span class="hljs-keyword">const</span> desc_format = <span class="hljs-string">&quot; $(&#x27;meta[name=\&quot;description\&quot;]&#x27;).eq(0).attr(\&quot;content\&quot;)&quot;</span>;<br><span class="hljs-keyword">const</span> source_format = <span class="hljs-string">&quot;$(&#x27;#source_baidu&#x27;).text()&quot;</span>;<br><span class="hljs-comment">//匹配具体的新闻网页格式</span><br><span class="hljs-keyword">const</span> url_reg = <span class="hljs-regexp">/[a-zA-z]+:\/\/[^\s]*[1-9]\d&#123;5&#125;(?!\d).shtml/</span>;<br><br><span class="hljs-comment">//解析新闻页面并进行后续处理</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">newsGet</span>(<span class="hljs-params">myURL</span>) &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        axios.<span class="hljs-title function_">get</span>(myURL, &#123;<br>            <span class="hljs-attr">params</span>: &#123;<br>                <span class="hljs-attr">url</span>: myURL,<br>                <span class="hljs-attr">encoding</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">headers</span>: headers,<br>            &#125;<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> response =&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//用cheerio解析html</span><br>            <span class="hljs-keyword">var</span> $ = myCheerio.<span class="hljs-title function_">load</span>(response.<span class="hljs-property">data</span>, &#123; <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">true</span> &#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;    <br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读新闻页面并转码出错：&#x27;</span> + e);<br>            &#125;;<br>            <span class="hljs-comment">// console.log(&quot;转码读取成功:&quot; + myURL);</span><br>            <span class="hljs-comment">//动态执行format字符串，构建json对象准备写入文件或数据库</span><br>            <span class="hljs-keyword">var</span> fetch = &#123;&#125;;<br>            fetch.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;&quot;</span>;<br>            fetch.<span class="hljs-property">content</span> = <span class="hljs-string">&quot;&quot;</span>;<br>            fetch.<span class="hljs-property">publish_date</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">toFormat</span>(<span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>);<br>            <span class="hljs-comment">//fetch.html = myhtml;</span><br>            fetch.<span class="hljs-property">url</span> = myURL;<br>            fetch.<span class="hljs-property">source_name</span> = source_name;<br>            fetch.<span class="hljs-property">source_encoding</span> = myEncoding; <span class="hljs-comment">//编码</span><br>            fetch.<span class="hljs-property">crawltime</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">toFormat</span>(<span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>);<br><br>            <span class="hljs-comment">//没有关键词就用sourcename</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(keywords_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">keywords</span> = source_name;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">keywords</span> = <span class="hljs-built_in">eval</span>(keywords_format);<br>            &#125;<br><span class="hljs-comment">//没有title就用空字符串，不过一般都会有</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(title_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;&quot;</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">title</span> = <span class="hljs-built_in">eval</span>(title_format); <span class="hljs-comment">//标题</span><br>            &#125;<br><span class="hljs-comment">//日期格式处理</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(date_format) != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">publish_date</span> = <span class="hljs-built_in">eval</span>(date_format); <span class="hljs-comment">//刊登日期</span><br>                <span class="hljs-keyword">let</span> regExp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(fetch.<span class="hljs-property">publish_date</span>)<br>                fetch.<span class="hljs-property">publish_date</span> = regExp.<span class="hljs-title function_">exec</span>(fetch.<span class="hljs-property">publish_date</span>)[<span class="hljs-number">0</span>];<br>                fetch.<span class="hljs-property">publish_date</span> = fetch.<span class="hljs-property">publish_date</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;年&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>)<br>                fetch.<span class="hljs-property">publish_date</span> = fetch.<span class="hljs-property">publish_date</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;月&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>)<br>                fetch.<span class="hljs-property">publish_date</span> = fetch.<span class="hljs-property">publish_date</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;日&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>                <span class="hljs-comment">// fetch.publish_date = new Date(fetch.publish_date).toFormat(&quot;YYYY-MM-DD HH:mm:ss&quot;);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">publish_date</span> = <span class="hljs-built_in">eval</span>(engDate_format);<br>            &#125;<br><span class="hljs-comment">//作者信息处理</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(author_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">author</span> = <span class="hljs-built_in">eval</span>(engAuthor_format).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//eval(author_format);  //作者</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">author</span> = <span class="hljs-built_in">eval</span>(author_format);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(content_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">content</span> = <span class="hljs-built_in">eval</span>(engContent_format);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">content</span> = <span class="hljs-built_in">eval</span>(content_format).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\r\n&quot;</span> + fetch.<span class="hljs-property">author</span>, <span class="hljs-string">&quot;&quot;</span>); <br>              <span class="hljs-comment">//内容,是否要去掉作者信息自行决定</span><br>            &#125;<br>          <span class="hljs-comment">//来源处理</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(source_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">source</span> = fetch.<span class="hljs-property">source_name</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">source</span> = <span class="hljs-built_in">eval</span>(source_format).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//来源    </span><br>            &#125;<br>          <span class="hljs-comment">//摘要信息处理</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(desc_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">desc</span> = fetch.<span class="hljs-property">title</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">desc</span> = <span class="hljs-built_in">eval</span>(desc_format); <span class="hljs-comment">//摘要   </span><br>            &#125;<br>          <span class="hljs-comment">//如果新闻中没有文字正文，或者没有发布日期，跳过该文章，return</span><br>            <span class="hljs-keyword">if</span> (fetch.<span class="hljs-property">content</span> == <span class="hljs-string">&quot;&quot;</span> || fetch.<span class="hljs-property">publish_date</span> == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-comment">//设置数据库插入元组</span><br>                <span class="hljs-keyword">var</span> newsCell = [[fetch.<span class="hljs-property">title</span>, fetch.<span class="hljs-property">content</span>, fetch.<span class="hljs-property">publish_date</span>, fetch.<span class="hljs-property">url</span>, fetch.<span class="hljs-property">source_name</span>, fetch.<span class="hljs-property">source_encoding</span>, fetch.<span class="hljs-property">crawltime</span>]];<br>              <span class="hljs-comment">//将文章信息添加进数据库</span><br>                sqliteDBNews.<span class="hljs-title function_">insertData</span>(insertNewsSql, newsCell);<br>               <span class="hljs-comment">//设置数据库查询语句，匹配新闻正文中出现的城市与城市所在经纬度</span><br>                <span class="hljs-keyword">var</span> querySql = <span class="hljs-string">`</span><br><span class="hljs-string">                SELECT</span><br><span class="hljs-string">                Location.*,News.*</span><br><span class="hljs-string">                    FROM</span><br><span class="hljs-string">                        Location</span><br><span class="hljs-string">                        INNER JOIN News </span><br><span class="hljs-string">                    WHERE</span><br><span class="hljs-string">                        News.content LIKE &#x27;%&#x27;||Location.city||&#x27;%&#x27;`</span>;<br>               <span class="hljs-comment">//执行数据库查询语句，作为Promise返回</span><br>                <span class="hljs-keyword">await</span> sqliteDBNews.<span class="hljs-title function_">queryData</span>(querySql).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                    <span class="hljs-title function_">resolve</span>(data)<br>                &#125;)<br>                <span class="hljs-comment">//存储json</span><br>              <span class="hljs-comment">// var filename = source_name + &quot;_&quot; + (new Date()).toFormat(&quot;YYYY-MM-DD&quot;) +</span><br>                 <span class="hljs-comment">//   &quot;_&quot; + myURL.substr(myURL.lastIndexOf(&#x27;/&#x27;) + 1) + &quot;.json&quot;;</span><br>                <span class="hljs-comment">// fs.writeFileSync(&#x27;/Users/lingyi/postGraduate/codeMapNews/server/News/&#x27; + filename, JSON.stringify(fetch));</span><br>            &#125;<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-comment">// &#125;);</span><br><br></code></pre></td></tr></table></figure></p><h5 id="对执行顺序的一些说明">5.对执行顺序的一些说明</h5><ol type="1"><li><p>后端服务启动 （1）</p></li><li><p>前端发送请求进入 （2）</p><ul><li>进入（4）函数<code>reqNewsData()</code>，等待<code>reqCallback()</code>函数期约完成<ul><li><code>resolve</code><code>reqNewsData()</code>期约返回的<code>Promise</code>数据(数据库运算完成的新闻数据，包含(content、latitude、longitude))</li></ul></li></ul></li><li><p>函数<code>reqNewsData()</code>等待<code>reqCallback()</code>期约完成，</p><ul><li><code>resolve</code><code>reqCallback()</code>期约返回的<code>Promise</code>数据(数据库运算完成的新闻数据，包含(content、latitude、longitude))</li></ul></li><li><p>函数<code>reqCallback()</code>等待<code>newsGet()</code>期约完成，</p><ul><li><code>resolve</code><code>newsGet()</code>期约返回的<code>Promise</code>数据(数据库运算完成的新闻数据，包含(content、latitude、longitude))</li></ul></li><li><p>函数<code>newsGet()</code>等待<code>sqliteDBNews.queryData()</code>期约完成，</p><ul><li><code>resolve</code><code>sqliteDBNews.queryData()</code>期约返回的<code>Promise</code>数据(数据库运算完成的新闻数据，包含(content、latitude、longitude))</li></ul><p><strong>核心：将数据库返回的数据一层一层传上去，但是由于异步，处理需要时间，所以用Promise一层一层返回</strong></p></li></ol><h5 id="前端代码">6.前端代码</h5><ul><li><p>用<code>angular-cli</code>生成的，很简单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--app.component.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* app.component.css */</span><br><span class="hljs-selector-id">#map</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//app.Component.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> L <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;leaflet&#x27;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-root&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.css&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br>  title = <span class="hljs-string">&#x27;mapNews&#x27;</span>;<br>  <span class="hljs-attr">map</span>: <span class="hljs-built_in">any</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>  &#125;<br>  <br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initMap</span>()<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">initMap</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = L.<span class="hljs-title function_">map</span>(<span class="hljs-string">&#x27;map&#x27;</span>, &#123;<br>      <span class="hljs-attr">zoom</span>: <span class="hljs-number">7</span>,<br>      <span class="hljs-attr">center</span>: [<span class="hljs-number">32.10296</span>, <span class="hljs-number">118.91125</span>]<br>    &#125;);<br><br>    <span class="hljs-comment">// 添加图层到地图上</span><br>    <span class="hljs-keyword">let</span> tile = L.<span class="hljs-title function_">tileLayer</span>(<span class="hljs-string">&#x27;http://wprd04.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27;</span>, &#123;<br>      <span class="hljs-attr">maxZoom</span>: <span class="hljs-number">18</span>,<br>    &#125;);<br>    tile.<span class="hljs-title function_">addTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>);<br>    <span class="hljs-comment">//等待拿到数据</span><br>    <span class="hljs-keyword">let</span> temp = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reqNewsData</span>();<br>    <span class="hljs-keyword">let</span> newsPos = temp.<span class="hljs-property">data</span>;<br>    <span class="hljs-keyword">var</span> newsLon = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> newsLat = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> newsContent = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//将拿到的经纬度，作为点坐标加载，Content作为bindPipup()提示参数加载</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; newsPos.<span class="hljs-property">length</span>; i++) &#123;<br>      newsLon = newsPos[i].<span class="hljs-property">lon</span>;<br>      newsLat = newsPos[i].<span class="hljs-property">lat</span>;<br>      newsContent = newsPos[i].<span class="hljs-property">content</span>;<br>      L.<span class="hljs-title function_">marker</span>([newsLat, newsLon]).<span class="hljs-title function_">addTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>).<span class="hljs-title function_">bindPopup</span>(newsContent)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//向后端发送请求</span><br>  <span class="hljs-title function_">reqNewsData</span>(): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:8082/server&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(res)<br>      &#125;)<br>    &#125;)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="实现效果">3.实现效果</h4><figure><img src="/img/mapNews1.png" alt="mapNewsIMG1" /><figcaption aria-hidden="true">mapNewsIMG1</figcaption></figure><figure><img src="/img/mapNews2.png" alt="mapNewsIMG2" /><figcaption aria-hidden="true">mapNewsIMG2</figcaption></figure><figure><img src="/img/mapNews3.png" alt="mapNewsIMG3" /><figcaption aria-hidden="true">mapNewsIMG3</figcaption></figure><figure><img src="/img/mapNews4.png" alt="mapNewsIMG4" /><figcaption aria-hidden="true">mapNewsIMG4</figcaption></figure><figure><img src="/img/mapNews5.png" alt="数据库服务(部分)" /><figcaption aria-hidden="true">数据库服务(部分)</figcaption></figure><h4 id="目前的不足">4. 目前的不足</h4><ol type="1"><li>爬取到的新闻本身是没有坐标的，本项目在数据库中根据正文内容实现了城市坐标匹配<ul><li>匹配的精度、速度取决于所使用的数据库</li><li>当一个新闻中有多个地点、或者有类地名的名词时也会匹配到“错误”的城市坐标</li><li>解决方法<ul><li>更改数据库中城市数据组织方式</li><li>优化数据库中匹配（查询）方法，对正文中的城市进行更高规格的检索</li></ul></li></ul></li><li>前后端通信的时候，有时候数据传输速度很快，有的时候很慢，有的时候后端甚至自己报错停掉了<ul><li>可能取决于当时的网络情况</li><li>后端是用<code>Nodejs</code>写的，存在异步情况。数据处理（存、匹配、取）时间过长导致响应时间过长</li></ul></li><li>其他 遇到问题再说吧，纯粹突发奇想</li></ol>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6笔记</title>
    <link href="/2022/09/08/ES6%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/08/ES6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="运算符的拓展">运算符的拓展</h5><h6 id="链式判断运算符-.">1.链式判断运算符 ?.</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> obj?.<span class="hljs-property">properities</span><br><span class="hljs-comment">//判断对象的属性是否存在</span><br><span class="hljs-number">2.</span> obj?.[expressions]<br><span class="hljs-comment">//判断对象的属性是否存在</span><br><span class="hljs-number">3.</span> func?.[...args]<br><span class="hljs-comment">//函数或者方法对象是否存在</span><br></code></pre></td></tr></table></figure><p><strong>eg:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> hex = <span class="hljs-string">&quot;#COFFEE&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/#([A-Z]+)/i</span>)?.[<span class="hljs-number">1</span>];<br><span class="hljs-comment">//COFFEE //正则表达式的使用</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">a</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是a的匿名函数&#x27;</span>);<br>&#125;<br>a?.()<br><span class="hljs-comment">//这是a的匿名函数 </span><br><span class="hljs-comment">//等价于 a==null ? undefined :a()  函数a是null吗？是的话就赋值为undefined，否则（不是null）就执行a()</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Javascript中一切皆对象</span><br><br>a?.<span class="hljs-property">b</span><br><span class="hljs-comment">// 等同于</span><br>a == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : a.<span class="hljs-property">b</span><br><span class="hljs-comment">//对象a是null吗？ 是的话就赋值为undefined,否则执行a.b  获得对象a的b属性</span><br><br>a?.[x]<br><span class="hljs-comment">// 等同于</span><br>a == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : a[x]<br><span class="hljs-comment">//对象a是null吗？ 是的话就赋值为undefined,否则执行a[x]  获得对象a[x]的方法</span><br><br>a?.<span class="hljs-title function_">b</span>()<br><span class="hljs-comment">// 等同于</span><br>a == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : a.<span class="hljs-title function_">b</span>()<br><span class="hljs-comment">//对象a是null吗？ 是的话就赋值为undefined,否则执行a.b()  对象a中的b()方法</span><br><br>a?.()<br><span class="hljs-comment">// 等同于</span><br>a == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : <span class="hljs-title function_">a</span>()<br><span class="hljs-comment">//对象a是null吗？ 是的话就赋值为undefined,否则执行a()  对象a()方法</span><br></code></pre></td></tr></table></figure><p><em>注意：</em>如果<code>a?.b()</code>里面的<code>a.b</code>有值，但不是函数，不可调用，那么<code>a?.b()</code>是会报错的。<code>a?.()</code>也是如此，如果<code>a</code>不是<code>null</code>或<code>undefined</code>，但也不是函数，那么<code>a?.()</code>会报错。</p><h5 id="symbol">Symbol</h5><h6 id="为了解决的问题">1.为了解决的问题</h6><p>对象的属性名称都是字符串，特别是自己定义的时候，特别容易冲突。</p><h6 id="含义">2.含义</h6><p><code>Symbol()</code>代表唯一的值</p><h6 id="机制">3.机制</h6><p>如果<code>Symbol()</code>的参数是一个对象，就会调用改对象的<code>toString()</code>方法，将其转为字符串，然后生成一个<code>Symbol</code>值</p><p><strong>eg:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sym = <span class="hljs-title class_">Symbol</span>(obj);<br>sym <span class="hljs-comment">// Symbol(abc)</span><br><br><span class="hljs-title class_">Symbol</span>()函数只表示当前赋值对象的描述<br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">Symbol</span>()<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">Symbol</span>()<br>a === b <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h6 id="总结"><strong>总结</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.可以给Symbol添加描述</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;Attribute a&#x27;</span>)<br><span class="hljs-title function_">conlog</span>(a.<span class="hljs-property">discription</span>)<br><span class="hljs-comment">//Attribute a</span><br><br><span class="hljs-comment">//Symbol()作为属性名，此时不能用点运算符获得属性</span><br><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-title class_">Symbol</span>()<br><span class="hljs-comment">//创建变量</span><br><span class="hljs-keyword">let</span> b = &#123;<br>    [mySymbol]: <span class="hljs-string">&#x27;helo&#x27;</span><br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">let</span> c=&#123;&#125;<br>c[mySymbol]=<span class="hljs-string">&#x27;helo&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d[mySymbol]);<br><span class="hljs-comment">//获得属性</span><br><br><span class="hljs-keyword">let</span> d =&#123;<br>  [mySymbol](value)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>  &#125;<br>&#125;<br>d[mySymbol](<span class="hljs-string">&#x27;打印值&#x27;</span>)<br><span class="hljs-comment">//调用方法，注意参数args的传入方式 [name](args)&#123;expression&#125;</span><br></code></pre></td></tr></table></figure><h6 id="应用">应用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArea</span>(<span class="hljs-params">shape, options</span>) &#123;<br>    <span class="hljs-keyword">let</span> area = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">switch</span> (shape) &#123;<br>        <span class="hljs-keyword">case</span> shapeType.<span class="hljs-property">triangle</span>:<br>            area = <span class="hljs-number">.5</span> * options.<span class="hljs-property">width</span> * options.<span class="hljs-property">height</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> shapeType.<span class="hljs-property">square</span>:<br>            area = <span class="hljs-number">6</span><br>            <span class="hljs-keyword">break</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> area<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getArea</span>(shapeType.<span class="hljs-property">triangle</span>, &#123; <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>, &#125;));<br><span class="hljs-comment">//5000</span><br></code></pre></td></tr></table></figure><h5 id="promise与顶层await">Promise与顶层await</h5><h6 id="什么是promise">1.什么是Promise</h6><ul><li><p>在Javascript中表示期约，说白了就是当想获取的数据需要花时间计算时候，“等”这个计算完成，再执行后面的代码，避免后面拿值拿不到。</p></li><li><p>解释<ahref="https://www.cnblogs.com/lvdabao/p/es6-promise-1.html">大白话讲解Promise（一）</a></p></li></ul><h6 id="await">2.await</h6><ul><li>await用于等待一个<code>Promise</code>对象，只能在异步函数<code>async function</code>中使用<ul><li>首先为什么是一个<code>Promise</code>对象，因为<code>await</code>我理解为一个标志，标志后面的函数需要返回<code>Promise</code>对象</li><li>如果表达式的值不是<code>Promise</code>对象，<code>await</code>会把该值转换为已经正常处理的<code>Promise</code>结果并返回</li><li>通过<code>Promise</code>对象实现异步</li></ul></li></ul><h6 id="顶层await">3.顶层await</h6><ul><li><p>ES6之后，可以单独使用<code>await</code>？ ==存疑==</p><ul><li><p>旧版本在一个async函数外单独使用<code>await</code>会引起错误，常用立即执行函数表达式(<code>IIFE</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;ok&#x27;</span>) <span class="hljs-comment">//错误用法</span><br><br>(<span class="hljs-title function_">async</span>()=&gt;&#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>  )<br>&#125;) <span class="hljs-comment">//正确用法</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>顶层<code>await</code>想解决的问题：ES6模块化中导入导出，防止模块之间相互访问时异步访问无值的问题。</p><ul><li><p>看下面一个例子 来源<ahref="https://blog.csdn.net/xgangzai/article/details/114314178?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-114314178-blog-115314719.t5_download_50w&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">为何要在Javascript中使用顶层await</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注意这边的module 像浏览器解释js脚本的风格 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ library.js ------</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> sqrt = <span class="hljs-title class_">Math</span>.<span class="hljs-property">sqrt</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">return</span> x * x;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">diagonal</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sqrt</span>(<span class="hljs-title function_">square</span>(x) + <span class="hljs-title function_">square</span>(y));<br>&#125;<br><span class="hljs-comment">//暴露具体的函数</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ middleware.js ------ 中间件</span><br><span class="hljs-keyword">import</span> &#123; square, diagonal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./library.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Middleware&#x27;</span>);<br> <br><span class="hljs-keyword">let</span> squareOutput;<br><span class="hljs-keyword">let</span> diagonalOutput;<br> <br><span class="hljs-comment">// IIFE</span><br> (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>  squareOutput = <span class="hljs-title function_">square</span>(<span class="hljs-number">13</span>);<br>  diagonalOutput = <span class="hljs-title function_">diagonal</span>(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>);<br> &#125;)();<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delayInms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❤️&#x27;</span>));<br>    &#125;, delayInms);<br>  &#125;);<br>&#125;<br> <span class="hljs-comment">//中间件中计算并暴露值</span><br><span class="hljs-keyword">export</span> &#123;squareOutput,diagonalOutput&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ main.js ------</span><br><span class="hljs-keyword">import</span> &#123; squareOutput, diagonalOutput &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleware.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput); <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput); <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Main&#x27;</span>);<br> <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput), <span class="hljs-number">2000</span>);<br><span class="hljs-comment">//169</span><br> <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput), <span class="hljs-number">2000</span>);<br><span class="hljs-comment">//13</span><br></code></pre></td></tr></table></figure><ul><li>问题：<code>main.js</code>中第一次打印，读取到了中间件中暴露出来的值，但中间件中线程并没有计算完成。</li></ul></li><li><p>两种解决方案</p><ul><li><p>计算值的时候用一个<code>Promise</code>作为总的判断依据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ middleware.js ------ 中间件</span><br><span class="hljs-keyword">import</span> &#123; square, diagonal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./library.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Middleware&#x27;</span>);<br> <br><span class="hljs-keyword">let</span> squareOutput;<br><span class="hljs-keyword">let</span> diagonalOutput;<br> <br><span class="hljs-comment">// IIFE 用export把IIFE返回的Promise暴露出去</span><br><span class="hljs-comment">// 用该Promise作为判断函数是否执行完的标准</span><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>  squareOutput = <span class="hljs-title function_">square</span>(<span class="hljs-number">13</span>);<br>  diagonalOutput = <span class="hljs-title function_">diagonal</span>(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>);<br> &#125;)();<br><br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delayInms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❤️&#x27;</span>));<br>    &#125;, delayInms);<br>  &#125;);<br>&#125;<br> <span class="hljs-comment">//中间件中计算并暴露值</span><br><span class="hljs-keyword">export</span> &#123;squareOutput,diagonalOutput&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ main.js ------</span><br><span class="hljs-keyword">import</span> promise,&#123;squareOutput,diagonalOutput&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleware.js&#x27;</span>;<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput); <span class="hljs-comment">// 169</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput); <span class="hljs-comment">// 13</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Main&#x27;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput), <span class="hljs-number">2000</span>);<span class="hljs-comment">// 169</span><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput), <span class="hljs-number">2000</span>);<span class="hljs-comment">// 13</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>可行，但带来了新的问题<ul><li><code>main.js</code>调用中<code>middleware.js</code>中暴露出来的变量没有问题</li><li>但是如果有另一个模块<code>B.js</code>需要调用<code>main.js</code>，那么就需要再在<code>main.js</code>中使用一次和<code>middleware.js</code>中间件中一样的<code>IIFE Promise</code>才能让<code>B.js</code>正确访问变量。</li></ul></li></ul></li><li><p>用导出的变量去<strong>resolve</strong><code>IIFE promise</code></p><ul><li><p>将变量作为<code>IIFE promise</code>的返回值返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ middleware.js ------ 中间件</span><br><span class="hljs-keyword">import</span> &#123; square, diagonal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./library.js&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Middleware&#x27;</span>);<br><br><span class="hljs-keyword">let</span> squareOutput;<br><span class="hljs-keyword">let</span> diagonalOutput;<br><br><span class="hljs-comment">// IIFE</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>    squareOutput = <span class="hljs-title function_">square</span>(<span class="hljs-number">13</span>);<br>    diagonalOutput = <span class="hljs-title function_">diagonal</span>(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> &#123; squareOutput, diagonalOutput &#125; <span class="hljs-comment">//作为返回值返回</span><br>&#125;)();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delayInms</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❤️&#x27;</span>));<br>        &#125;, delayInms);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123; squareOutput, diagonalOutput &#125;;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> promise, &#123; squareOutput, diagonalOutput &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleware.js&#x27;</span>;<br><br><span class="hljs-comment">//解析返回值，返回值其实就包含Promise的状态（已完成）</span><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123;squareOutput,diagonalOutput&#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput); <span class="hljs-comment">// 169</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput); <span class="hljs-comment">// 13</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Main&#x27;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput), <span class="hljs-number">2000</span>);<br>    <span class="hljs-comment">//169</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput), <span class="hljs-number">2000</span>);<br>    <span class="hljs-comment">//13</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>问题：大部分函数模块都放在了<code>then()</code>中，缺乏动态性和灵活性</li></ul></li><li><p>顶层<code>await</code></p><ul><li><p>允许我们让模块系统去处理<code>Promise</code>之间的关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ middleware.js 中间件函数------</span><br><span class="hljs-keyword">import</span> &#123; square, diagonal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./library.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Middleware&#x27;</span>);<br> <br><span class="hljs-keyword">let</span> squareOutput;<br><span class="hljs-keyword">let</span> diagonalOutput;<br> <br><span class="hljs-comment">//使用顶层 await</span><br><span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-comment">//await 标志 等待delay执行完之后，才会生成squareOutput</span><br>squareOutput = <span class="hljs-title function_">square</span>(<span class="hljs-number">13</span>);<br>diagonalOutput = <span class="hljs-title function_">diagonal</span>(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>);<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delayInms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❤️&#x27;</span>));<br>    &#125;, delayInms);<br>  &#125;);<br>&#125;<br> <br><span class="hljs-keyword">export</span> &#123;squareOutput,diagonalOutput&#125;;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ main.js 主函数------</span><br><span class="hljs-keyword">import</span> &#123; squareOutput, diagonalOutput &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleware.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput); <span class="hljs-comment">// 169</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput); <span class="hljs-comment">// 13</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Main&#x27;</span>);<br> <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput), <span class="hljs-number">2000</span>);<span class="hljs-comment">// 169</span><br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput), <span class="hljs-number">2000</span>); <span class="hljs-comment">// 13</span><br></code></pre></td></tr></table></figure></li><li><p>注意：顶层<code>await</code>只在ES模块中生效，这些ES模块之间必须具备某种相互依赖关系</p></li><li><p>总结：</p><ul><li>顶层<code>await</code>顾名思义，在某个代码块的顶层，下面的代码块全需要等它。</li><li>在<code>await</code>函数的<code>Promise</code>被<code>resolve</code>之前，<code>await</code>下所有的代码都不会执行。</li><li>而如果仅仅在一个函数外面使用<code>await</code>，<strong>函数外面export的东西，外部也会读到</strong></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h5 id="generator函数">Generator函数</h5><h6 id="遍历-iterator">1.遍历 Iterator</h6><ul><li><p>任何数据结构只要部署<code>Iterator</code>接口，就可以完成遍历操作</p></li><li><p>作用</p><ol type="1"><li>为各种数据结构提供一个统一的、简便的数据访问接口</li><li>使得数据结构成员能够按照某种次序排列</li><li>供<code>for of</code>使用</li></ol></li><li><p>遍历过程：</p><ol type="1"><li>创建一个指针对象，指向起始位置（遍历器对象的本质是一个指针对象）</li><li>第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</li><li>第二次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第二个成员。</li><li>不断调用指针对象的<code>next</code>方法，直到指向数据结构的结束位置</li></ol></li><li><p>返回值<code>&#123;value: data , done: boolean&#125;</code>data是当前属性的值，done属性表示遍历是否结束</p></li><li><p>一个函数只要部署了`<code>Symbol.iterator</code>属性，就被视为具有<code>iterator</code>接口</p></li><li><p><code>for of</code>循环，内部调用的就是<code>Symbol.iterator</code>方法</p></li><li><p>常见的具有<code>iterator</code>接口的结构</p><ol type="1"><li>数组</li><li>Set和Map结构</li><li>计算生成的数据结构（ES6数组、Set、Map）<ol type="1"><li><code>entries()</code></li><li><code>keys()</code></li><li><code>values()</code></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> pair <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pair);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4" type="1"><li><p>类似数组的对象</p><ol type="1"><li>字符串</li><li>DOM Nodelist对象</li><li>arguments对象</li></ol></li></ol><p>​<strong>注意：</strong>并不是所有的类数组对象都有Iterator接口，需要使用<code>Array.from</code>方法将其转化为数组</p><ol start="5" type="1"><li><p>对象</p><ul><li><p>普通对象，<code>for in</code>可以遍历键名，<code>for of</code>循环会报错</p></li><li><p>如果要用<code>for of</code></p><ol type="1"><li><p>用<code>Object.keys</code>方法将对象的键名生成一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(someObject)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&#x27;: &#x27;</span> + someObject[key]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用<code>Generator</code>函数将对象重新包装一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">entries</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)) &#123;<br>    <span class="hljs-keyword">yield</span> [key, obj[key]];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title function_">entries</span>(obj)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, <span class="hljs-string">&#x27;-&gt;&#x27;</span>, value);<br>&#125;<br><span class="hljs-comment">// a -&gt; 1</span><br><span class="hljs-comment">// b -&gt; 2</span><br><span class="hljs-comment">// c -&gt; 3</span><br></code></pre></td></tr></table></figure></li></ol></li></ul></li></ol></li></ul><h6 id="generator函数-1">2.Generator函数</h6><ul><li><p>写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generator</span>(<span class="hljs-params"></span>)&#123;       <span class="hljs-comment">//函数名前，fucntion后有星号</span><br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;hello&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ending&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">var</span> gen = <span class="hljs-title function_">generator</span>()<br></code></pre></td></tr></table></figure></li><li><p>机制</p><ul><li><p>调用该函数后，返回一个指向内部状态的指针对象（<code>Iterator</code>对象）</p></li><li><p>调用遍历器的<code>next()</code>方法，使指针指向下一个状态</p><ul><li>第一次调用，Generator函数开始执行，直到遇到第一个<code>yield</code>表达式为止</li><li><code>yield</code>表达式<ul><li>是一种暂停标志，<code>next()</code>方法遇到<code>yield</code>表达式就暂停后面的操作</li><li>将紧跟在<code>yield</code>后面的表达式的值作为返回对象的<code>value</code>值</li></ul></li><li>下一次调用<code>next</code>方法时，内部指针从函数头部或者<strong>上一次停下来的地方</strong>再继续往下执行，直到遇到下一个<code>yield</code>表达式。</li><li>如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止</li><li>并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</li></ul></li><li><p><code>next()</code>方法中的参数</p><ul><li>该参数会被当成上一个<code>yield</code>表达式的返回值</li><li>通过该参数，就能在<code>Generator()</code>函数运行后，继续向该函数中注入值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">var</span> y = <span class="hljs-number">2</span> * (<span class="hljs-keyword">yield</span> (x + <span class="hljs-number">1</span>));<br>  <span class="hljs-keyword">var</span> z = <span class="hljs-keyword">yield</span> (y / <span class="hljs-number">3</span>);<br>  <span class="hljs-keyword">return</span> (x + y + z);<br>&#125;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-title function_">foo</span>(<span class="hljs-number">5</span>);<br>a.<span class="hljs-title function_">next</span>() <br><span class="hljs-comment">// Object&#123;value:6, done:false&#125;  </span><br><span class="hljs-comment">// 第一次运行，x值为5 返回var y = 2 * (yield (x + 1))中 yield后面的(x+1)，返回值为6</span><br>a.<span class="hljs-title function_">next</span>() <br><span class="hljs-comment">// Object&#123;value:NaN, done:false&#125;</span><br><span class="hljs-comment">// 第二次运行，next()中不带参数，undefined 返回var y = 2 * undefined，返回值为NaN</span><br>a.<span class="hljs-title function_">next</span>() <br><span class="hljs-comment">// Object&#123;value:NaN, done:true&#125;</span><br><span class="hljs-comment">// 第三次运行，next()中不带参数，undefined 返回var z = undefinedw;，返回值为NaN</span><br><br><span class="hljs-keyword">var</span> b = <span class="hljs-title function_">foo</span>(<span class="hljs-number">5</span>);<br>b.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; value:6, done:false &#125;</span><br>b.<span class="hljs-title function_">next</span>(<span class="hljs-number">12</span>) <span class="hljs-comment">// &#123; value:8, done:false &#125;</span><br>b.<span class="hljs-title function_">next</span>(<span class="hljs-number">13</span>) <span class="hljs-comment">// &#123; value:42, done:true &#125;</span><br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>上面代码中，第二次运行<code>next</code>方法的时候不带参数，导致 y的值等于<code>2 * undefined</code>（即<code>NaN</code>），除以 3以后还是<code>NaN</code>，因此返回对象的<code>value</code>属性也等于<code>NaN</code>。第三次运行<code>Next</code>方法的时候不带参数，所以<code>z</code>等于<code>undefined</code>，返回对象的<code>value</code>属性等于<code>5 + NaN + undefined</code>，即<code>NaN</code>。</p><p>如果向<code>next</code>方法提供参数，返回结果就完全不一样了。上面代码第一次调用<code>b</code>的<code>next</code>方法时，返回<code>x+1</code>的值<code>6</code>；第二次调用<code>next</code>方法，将上一次<code>yield</code>表达式的值设为<code>12</code>，因此<code>y</code>等于<code>24</code>，返回<code>y / 3</code>的值<code>8</code>；第三次调用<code>next</code>方法，将上一次<code>yield</code>表达式的值设为<code>13</code>，因此<code>z</code>等于<code>13</code>，这时<code>x</code>等于<code>5</code>，<code>y</code>等于<code>24</code>，所以<code>return</code>语句的值等于<code>42</code>。</p></li></ul></li></ul><h5 id="es6中的module模块">ES6中的Module模块</h5><h6 id="注意是es6模块中的不是nodejs模块中的commonjs规范">1.注意是ES6模块中的不是Nodejs模块中的CommonJS规范</h6><p><ahref="https://blog.csdn.net/qq_15589375/article/details/123476690">module.exports、exports、export都是导出，有何区别？</a></p><h6 id="es6中export">2. ES6中export</h6><ul><li><p>ES6模块不是对象，而是通过<code>export</code>命令显式指定输出的代码，再通过<code>import</code>命令输入。</p></li><li><p>可以输出变量、函数和类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//变量</span><br><span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&#x27;Lingyi&#x27;</span>;<br><span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Zhu&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123;firstName,lastName&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> firstName =<span class="hljs-string">&#x27;Lingyi&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Zhu&#x27;</span>;<br><br><span class="hljs-comment">//函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x*y;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>通常情况下，<code>export</code>输出的变量是原本的名字，但是可以用<code>as</code>关键字来重新命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">v1</span>(<span class="hljs-params"></span>)&#123;...&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v2</span>(<span class="hljs-params"></span>)&#123;...&#125;<br><br><span class="hljs-keyword">export</span>&#123;<br>v1 <span class="hljs-keyword">as</span> streamV1;<br>v2 <span class="hljs-keyword">as</span> streamV2;<br>  v2 <span class="hljs-keyword">as</span> streamLatestVersion; <span class="hljs-comment">//v2可以使用不同的名字输出两次</span><br>             &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>export</code>模块暴露的接口必须与内部元素建立起一一对应的关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//报错</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> m =<span class="hljs-number">1</span>;<span class="hljs-comment">//正确</span><br><br><span class="hljs-keyword">var</span> m =<span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> m;<span class="hljs-comment">//报错</span><br><span class="hljs-keyword">export</span> &#123;m&#125;;<span class="hljs-comment">//正确</span><br><br><span class="hljs-keyword">var</span> n = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> &#123;n <span class="hljs-keyword">as</span> m&#125;; <span class="hljs-comment">//正确，用m来接收</span><br></code></pre></td></tr></table></figure></li><li><p>关于整体暴露的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//temp.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">plus</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y;<br>&#125;<br>eport <span class="hljs-keyword">function</span> <span class="hljs-title function_">multi</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x*y;<br>&#125;<br><br><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> &#123;plus,multi&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;temp.js&#x27;</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-title function_">plus</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">let</span> b = <span class="hljs-title function_">multi</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//也可以写为</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">Math</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;temp.js&#x27;</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">plus</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">multi</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure></li><li><p>关于动态绑定，<code>export</code>接口与对应的元素是动态绑定关系，可以通过该接口获取该元素内部实时、后面变化的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;没变之前就先暴露出去&#x27;</span>;<br><span class="hljs-title function_">settimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;foo=<span class="hljs-string">&#x27;暴露之后变化成现在这个值，5秒后别的文件读也会变成这个值&#x27;</span>&#125;,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure></li><li><p>关于继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//circleplus.js</span><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circle&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> e = <span class="hljs-number">2.7</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">exp</span>(x);<br>&#125;<br><span class="hljs-keyword">export</span> &#123;area <span class="hljs-keyword">as</span> circleArea&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circle&#x27;</span>;<br><br><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> math <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circleplus&#x27;</span>;<br><span class="hljs-keyword">import</span> exp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circleplus&#x27;</span>;  <span class="hljs-comment">//将circleplus模块中的默认方法加载为exp方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">exp</span>(math.<span class="hljs-property">e</span>));<br><br></code></pre></td></tr></table></figure></li><li><p>关于<code>export default</code></p><ul><li>为了用户快速上手，可以不命名元素</li><li>本质是系统自动给<code>default</code>后面的元素赋值为<code>default</code></li><li>用户可以<code>import</code>时，设置元素的名称</li><li>用于指定模块的默认输出，一个模块只能有一个默认输出，因此<code>export default</code>模块只能使用一次</li></ul></li><li><p>关于<code>const</code>变量跨模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//constants.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> A = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> B = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> C = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">//test1.js 写法1</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> constants <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;constants.js&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(constants.<span class="hljs-property">A</span>); <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(constants.<span class="hljs-property">B</span>);<span class="hljs-comment">//2</span><br><br><span class="hljs-comment">//test2.js 写法2 加载单一的输出项</span><br><span class="hljs-keyword">import</span> &#123;A,C&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;constants.js.&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(A);<span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(B);<span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><p>在使用的变量非常多的时候，常常专门建立一个<code>constants</code>目录，将常量写在歌中不同的文件里，然后合并在<code>index.js</code>中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//本代码块包含两个文件的代码，分别是db.js和user.js</span><br><span class="hljs-comment">//constants/db.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> db = &#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://my.couchdbserver.local:5984&#x27;</span>,<br>  <span class="hljs-attr">admin_username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>  <span class="hljs-attr">admin_password</span>: <span class="hljs-string">&#x27;admin password&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// constants/user.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> users = [<span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;staff&#x27;</span>, <span class="hljs-string">&#x27;ceo&#x27;</span>, <span class="hljs-string">&#x27;chief&#x27;</span>, <span class="hljs-string">&#x27;moderator&#x27;</span>];<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.js  将上述两个js文件中的常量合并</span><br><span class="hljs-keyword">export</span> &#123;db&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;db.js&#x27;</span><br><span class="hljs-keyword">export</span> &#123;users&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;users.js&#x27;</span> <span class="hljs-comment">//跨模块常量的引入，带&#123;&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>export</code>可以出现在任何位置，只要处于模块顶层就行。在块级作用域中则会报错。</p></li></ul><h6 id="es6中import">3.ES6中import</h6><ul><li><p>返回一个<code>Promise</code>对象，需要用<code>.then()方法指定处理函数</code>，推荐使用<code>await</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">renderWidget</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//async封装Promise，下面await</span><br>  <span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;widget&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (container !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 等同于</span><br>    <span class="hljs-comment">// import(&quot;./widget&quot;).then(widget =&gt; &#123;</span><br>    <span class="hljs-comment">//   widget.render(container);</span><br>    <span class="hljs-comment">// &#125;);</span><br>    <span class="hljs-keyword">const</span> widget = <span class="hljs-keyword">await</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./widget.js&#x27;</span>); <span class="hljs-comment">//await相当于Promise中的then()，所以前面说等同于</span><br>    widget.<span class="hljs-title function_">render</span>(container);<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">renderWidget</span>();<br></code></pre></td></tr></table></figure></li><li><p><code>import</code></p><ul><li><p>按需加载，什么时候需要，什么时候加载</p></li><li><p>条件加载，可以放在<code>if</code>模块中</p></li><li><p>允许加载模块的路径是动态生成的<code>import(function(var))</code></p></li><li><p>加载成功后，该模块会当作一个对象，作为<code>.then()</code>的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//如果有default模块的话</span><br><span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./myModule.js&#x27;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">myModule</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myModule.<span class="hljs-property">default</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>加载方式</p><ul><li>```html<script type='module' src="foo.js" async></script><!--开始渲染 标签加载ok了渲染暂停执行标签 标签执行完成再继续开始渲染工作--><script type='module' src='foo.js' defer></script><!--defer加和不加没啥区别--><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>+ ```html<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;module&#x27;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;foo.js&#x27;</span></span><br><span class="language-javascript">    ...</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h6 id="es6模块和common-js模块的差异">4. ES6模块和CommonJS模块的差异</h6><ul><li>ES6模块是对外接口的一种静态定义，在代码静态解析阶段就会完成</li><li>ES6模块输出的是值的引用，模块中变化了输出也变化了。</li><li>Common JS模块加载的是一个对象，该对象在脚本运行时才会生成</li><li>CommonJS模块输出是一个值的拷贝，内部变化，不会影响已经输出的值。</li><li>其他区别<ahref="https://es6.ruanyifeng.com/#docs/module-loader">Module的加载实现</a></li></ul><h6 id="common-js加载es6模块">5.Common JS加载ES6模块</h6><ul><li><p>CommonJS模块的<code>require()</code>不能加载ES6模块，只能用<code>import()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./my-app.mjs&#x27;</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure></li><li><p><code>require()</code>不支持 ES6模块的一个原因是，它是同步加载，而 ES6模块内部可以使用顶层<code>await</code>命令，导致无法被同步加载。</p></li></ul><h6 id="es6加载commonjs模块">6.ES6加载CommonJS模块</h6><ul><li><p>ES6需要静态代码分析，而CommonJS输出的是一个对象，无法被静态解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 正确 只能整体加载</span><br><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br><br><span class="hljs-comment">// 报错 不能只加载单一的输出项</span><br><span class="hljs-keyword">import</span> &#123; method &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br><br><span class="hljs-comment">//加载输出单一项的写法（折中）</span><br><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; method &#125; = packageMain;<br></code></pre></td></tr></table></figure></li></ul><p><ahref="https://zhuanlan.zhihu.com/p/290837844">深入了解ES6点<code>module export</code></a></p><h5 id="随时查的技巧总结">随时查的技巧总结</h5><p><ahref="http://t.zoukankan.com/smileyqp-p-12675287.html">变量、字符串、数值、数组、函数</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暑期项目总结</title>
    <link href="/2022/09/01/%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/01/%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="暑期工作内容总结">暑期工作内容总结</h3><h4 id="概述">0.概述</h4><ol type="1"><li><p>项目要求：用户上传地理数据，根据用户的需求进行可视化</p></li><li><p>项目框架：</p><ul><li>前端框架：Vue（暂定）</li><li>后端：Nodejs （不会Java Springboot）</li><li>地理服务提供商：Geoserver</li><li>Geoserver操作：Geoserver Rest Api</li></ul></li><li><p>具体需求：</p><ul><li><p>用户上传地理数据（前端），自动发布到Geoserver中</p><ul><li>矢量数据：shp、kml、geojson(json)</li><li>栅格数据：dem、tif</li></ul></li><li><p>数据发布服务</p><ul><li>WMS</li><li>WTF</li><li>WMTS</li><li>TMS</li></ul></li><li><p>数据的可视化</p><ul><li><p>前端可视化：利用leaflet、Cesium自带函数，对请求返回的json数据（WFS服务）进行可视化</p></li><li><p>后端可视化：根据用户可视化需求生成SLD样式文件，并上传到Geoserver中，应用样式</p></li></ul></li></ul></li></ol><h4 id="用到的模块">1.用到的模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>);<br><span class="hljs-comment">//用来处理子进程</span><br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-comment">//用来进行通信</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-comment">//用来读取文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AdmZip</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;adm-zip&#x27;</span>);<br><span class="hljs-comment">//用来处理压缩包任务</span><br><span class="hljs-keyword">const</span> geojson2shp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;geojson2shp&#x27;</span>)<br><span class="hljs-comment">//用来处理json与shp文件转换</span><br><span class="hljs-keyword">const</span> tj = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@mapbox/togeojson&#x27;</span>)<br><span class="hljs-comment">//用来处理kml与json文件转换</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMParser</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;xmldom&#x27;</span>).<span class="hljs-property">DOMParser</span>;<br><span class="hljs-comment">//用来处理dom文件，提取Dom节点(信息)</span><br><br><span class="hljs-comment">//用来处理通信路由</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>()<br><span class="hljs-comment">// 导入用户路由处理函数模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Handler</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../router_handler/formal&#x27;</span>)<br><span class="hljs-comment">//作为处理文件上传的中间件</span><br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; route &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./test&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="具体功能的实现">2.具体功能的实现</h4><h6 id="多文件上传-upload_many">1. （多）文件上传 Upload_many()</h6><ul><li>==使用到了<code>multer</code>模块==</li><li>核心：后端接收文件、判断后缀、格式转化(shp)、文件压缩、文件上传(GeoserverApi 接口)</li><li>问题：<ul><li>文件上传至后端<ul><li>multer模块不进行配置，不能正常获取原文件等名称</li><li>多文件上传的时候，每个文件都会调用一次storage，所以stroage中判断文件名称后缀时候不能用数组的方式读取</li></ul></li><li>后端文件格式的处理<ul><li>shp格式的文件：<ul><li>存在的问题<ol type="1"><li>由多个文件(shp、shx、prj、dbf等等)构成，需要进行核心文件等判断</li></ol></li></ul></li><li>kml格式的文件：利用togeojson库转为geojson<ul><li>存在的问题<ol type="1"><li>数据量大时，转化不完全， 存在矢量缺失的情况</li><li>投影问题较多，例如：只能强制转化为几种常见投影，kml文件缺失投影信息转换容易出错</li></ol></li></ul></li><li>json(geojson)格式的文件：利用geojson2shp库转为shp<ul><li>存在的问题<ol type="1"><li>可支持的投影较少，生成的.prj文件或与标准prj文件的格式有所差异</li><li>毕竟是github上抄的库</li></ol></li></ul></li><li>思路：前端上传文件(<code>input</code>标签)，后端使用multer模块接收。接收时，截取上传文件类型，根据对应的格式存放到服务器不同的文件架上。由于矢量文件在Geoserver提供的API中都需要以ZIP的格式上传，所以利用第三方库对shp下的文件进行打包，最后使用<code>clild process</code>下<code>exec</code>函数调用curl命令，上传到后台Geoserver中。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//后端路由代码</span><br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>)<br><span class="hljs-keyword">const</span> storage = multer.<span class="hljs-title function_">diskStorage</span>(&#123;<br>    <span class="hljs-attr">destination</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">request, files, cb</span>) &#123;<br>        <span class="hljs-keyword">if</span> (files.<span class="hljs-property">originalname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>] != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(files.<span class="hljs-property">originalname</span>)<br>            <span class="hljs-keyword">let</span> tpName = files.<span class="hljs-property">originalname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">switch</span> (tpName) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;zip&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload&#x27;</span>)    <span class="hljs-comment">// 上传文件的目录</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;png&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;jpg&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;svg&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;jpeg&#x27;</span>:<br>                    <span class="hljs-comment">// cb(null, &#x27;../geoserver_rest/uploadfile/Image&#x27;)</span><br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/public/userImage&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 上传文件的目录</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;tif&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Tiff&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 上传文件的目录</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;json&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;geojson&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/geojson&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;kml&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/kml&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;shp&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;shx&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;dbf&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;cpg&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sbx&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sbn&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;qix&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;shp.xml&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/shpcomponent&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">//prj文件单独存，因为栅格和矢量都会用到</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;prj&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Prj&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;asc&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Asc&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-attr">default</span>:<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上传文件类型出错,请检查文件类型与后缀&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">filename</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">request, files, cb</span>) &#123;<br>        <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, files.<span class="hljs-property">originalname</span>)<br>        orgName = files.<span class="hljs-property">originalname</span>    <span class="hljs-comment">// 上传文件的目录、文件名称保存到全局变量中</span><br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// multer 配置</span><br><span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>(&#123;<br>    storage<br>&#125;)<br><br><span class="hljs-comment">/*--------------------------------------------------------------------------------*/</span><br><br><span class="hljs-comment">//后端处理函数代码</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Upload_many</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//多文件</span><br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">files</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">var</span> zip = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdmZip</span>()<br>    <span class="hljs-comment">//投影信息存放的文件夹</span><br>    <span class="hljs-keyword">let</span> prjPath = <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Prj/&#x27;</span><br>    <span class="hljs-keyword">let</span> fullName = req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">originalname</span><br>    <span class="hljs-keyword">let</span> fileName = fullName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">// 先把所有后缀拿到，放在数组中</span><br>    <span class="hljs-keyword">let</span> suffixs = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; req.<span class="hljs-property">files</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      suffixs.<span class="hljs-title function_">push</span>(req.<span class="hljs-property">files</span>[i].<span class="hljs-property">originalname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>])<br>    &#125;<br>    <span class="hljs-keyword">if</span> (suffixs.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;shp&quot;</span>)) &#123;<br>      <span class="hljs-comment">// shapefile文件只需要shp shx dbf文件即可生成正常显示，外加上可选的prj文件</span><br>      <span class="hljs-keyword">let</span> upfilePath = <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/shpcomponent/&#x27;</span><br>      zip.<span class="hljs-title function_">addLocalFile</span>(upfilePath + fileName + <span class="hljs-string">&#x27;.shp&#x27;</span>)<br>      zip.<span class="hljs-title function_">addLocalFile</span>(upfilePath + fileName + <span class="hljs-string">&#x27;.shx&#x27;</span>)<br>      zip.<span class="hljs-title function_">addLocalFile</span>(upfilePath + fileName + <span class="hljs-string">&#x27;.dbf&#x27;</span>)<br>      zip.<span class="hljs-title function_">addLocalFile</span>(prjPath + fileName + <span class="hljs-string">&#x27;.prj&#x27;</span>)<br>      zip.<span class="hljs-title function_">writeZip</span>(<span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span>)<br>      <span class="hljs-comment">// 设置延时，先让zip文件生成</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/datastores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.shp&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (error) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>          &#125;<br>          res.<span class="hljs-title function_">send</span>(stdout)<br>        &#125;)<br>      &#125;, <span class="hljs-number">200</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (suffixs.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;asc&quot;</span>)) &#123;<br>      <span class="hljs-comment">// asc文件只用asc文件和包含投影信息的prj文件</span><br>      <span class="hljs-keyword">let</span> upfilePath = <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Asc/&#x27;</span><br>      zip.<span class="hljs-title function_">addLocalFile</span>(upfilePath + fileName + <span class="hljs-string">&#x27;.asc&#x27;</span>)<br>      zip.<span class="hljs-title function_">addLocalFile</span>(prjPath + fileName + <span class="hljs-string">&#x27;.prj&#x27;</span>)<br>      zip.<span class="hljs-title function_">writeZip</span>(<span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fileName)<br>      <span class="hljs-comment">// 设置延时，先让zip文件生成</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/coveragestores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.arcgrid&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (error) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>          &#125;<br>          res.<span class="hljs-title function_">send</span>(stdout)<br>        &#125;)<br>      &#125;, <span class="hljs-number">200</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;暂不支持该文件类型&quot;</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//单文件</span><br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> fullName = req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">originalname</span><br>    <span class="hljs-keyword">let</span> fileName = fullName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">let</span> filetype = fullName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">switch</span> (filetype) &#123;<br>      <span class="hljs-comment">// shp格式数据</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;zip&#x27;</span>:<br>        &#123;<br>          cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">path</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/datastores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.shp&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (error) &#123;<br>              <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>            &#125;<br>            res.<span class="hljs-title function_">send</span>(stdout)<br>          &#125;)<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;json&#x27;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;geojson&#x27;</span>:<br>        <span class="hljs-keyword">const</span> options = &#123;<br>          <span class="hljs-attr">layer</span>: fileName,<br>          <span class="hljs-attr">targetCrs</span>: <span class="hljs-number">4326</span><br>        &#125;<br>        <span class="hljs-comment">// Paths</span><br>        geojson2shp.<span class="hljs-title function_">convert</span>(<span class="hljs-string">&#x27;../geoserver_rest/uploadfile/geojson/&#x27;</span> + fullName, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span>, options)<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/datastores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.shp&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (error) &#123;<br>              <span class="hljs-comment">// console.error(&#x27;error:&#x27;, error);</span><br>              <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>            &#125;<br>            res.<span class="hljs-title function_">send</span>(stdout)<br>          &#125;)<br>          <span class="hljs-comment">// 注意设置延时时间，要不会产生Error occured unzipping file的错误 </span><br>          <span class="hljs-comment">// 1 是还没有上传完就执行了在geoserver上传，找不到文件 可以适当延长延时时间</span><br>          <span class="hljs-comment">// 2 路径问题， 两者本质上都是文件找不到，所以会产生解压错误 </span><br>          <span class="hljs-comment">// 后续可以使用promise处理这种响应事件</span><br>        &#125;, <span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-comment">//kml本质上是先将kml转为json，在把json转为shpzip</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;kml&#x27;</span>:<br>        &#123;<br>          <span class="hljs-keyword">var</span> kml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMParser</span>().<span class="hljs-title function_">parseFromString</span>(fs.<span class="hljs-title function_">readFileSync</span>(req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">path</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>));<br>          <span class="hljs-keyword">let</span> kml2Json = tj.<span class="hljs-title function_">kml</span>(kml)<br>          <span class="hljs-keyword">const</span> options = &#123;<br>            <span class="hljs-attr">layer</span>: fileName,<br>            <span class="hljs-attr">targetCrs</span>: <span class="hljs-number">4326</span><br>          &#125;<br>          geojson2shp.<span class="hljs-title function_">convert</span>(kml2Json, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span>, options)<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/datastores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.shp&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">if</span> (error) &#123;<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>              &#125;<br>              res.<span class="hljs-title function_">send</span>(stdout)<br>            &#125;)<br>          &#125;, <span class="hljs-number">500</span>);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-comment">// 栅格数据的上传</span><br>      <span class="hljs-comment">// tif单文件上传</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;tif&#x27;</span>:<br>        &#123;<br>          cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -u admin:geoserver -XPUT -H &quot;Content-type:image/tiff&quot; --data-binary @&#x27;</span> + req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">path</span> + <span class="hljs-string">&#x27; http://localhost:8080/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/coveragestores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.geotiff&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (error) &#123;<br>              <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>            &#125;<br>            res.<span class="hljs-title function_">send</span>(stdout)<br>          &#125;)<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;数据上传响应成功&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="获取工作空间-getworkspace">2. 获取工作空间 GetWorkspace()</h6><ul><li>==使用到了<code>child process</code>模块==</li><li>核心：<code>curl</code>调用Geoserver Rest API接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取工作空间名称</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">GetWorkSpaces</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> user = req.<span class="hljs-property">body</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user)<br>  <span class="hljs-keyword">const</span> result = cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u &#x27;</span> + user.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;:&#x27;</span> + user.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27; -XGET\</span><br><span class="hljs-string">    http://localhost:8080/geoserver/rest/workspaces&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span>, error);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    res.<span class="hljs-title function_">send</span>(stdout) <br>    <span class="hljs-comment">//向前端发送从Geoserver中请求的工作空间信息</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="获取图层-getlayers">3. 获取图层 GetLayers</h6><ul><li>==使用到了<code>child process</code>模块==</li><li>核心：<code>curl</code>调用Geoserver Rest API接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span>.<span class="hljs-property">GetLayers</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> info = req.<span class="hljs-property">body</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info)<br>  cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u &#x27;</span> + info.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;:&#x27;</span> + info.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27; -X GET http://localhost:8080/geoserver/rest/workspaces/&#x27;</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">workspace_name</span> + <span class="hljs-string">&#x27;/layers &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span>, error);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;触发了GetLayers函数&quot;</span>)<br>    data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(stdout)<br>    res.<span class="hljs-title function_">send</span>(data.<span class="hljs-property">layers</span>.<span class="hljs-property">layer</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="获取二维wmts链接">4. 获取二维WMTS链接</h6><ul><li>==使用到了<code>axios</code>模块==</li><li>核心：链接格式的拼接</li><li>切片投影矩阵：WebMercatorQuad（EPSG:3857、EPSG:900913）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 2dWMTS</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Get2DWMTS</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>  <span class="hljs-keyword">let</span> data = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8080/geoserver/gwc/service/wmts&quot;</span>,<br>    <span class="hljs-attr">layer</span>: workspace_used + <span class="hljs-string">&quot;:&quot;</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">layer</span>,<br>    <span class="hljs-attr">tilematrixSet</span>: <span class="hljs-string">&quot;WebMercatorQuad&quot;</span>,<br>    <span class="hljs-comment">// tilematrixSet: &quot;EPSG:4326&quot;,</span><br>  &#125;<br>  res.<span class="hljs-title function_">send</span>(data)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="获取三维wmts链接cesium">5. 获取三维WMTS链接（Cesium）</h6><ul><li><p>==使用到了<code>axios</code>模块==</p></li><li><p>核心：链接格式的拼接</p></li><li><p>注意投影切片矩阵的格式</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span>.<span class="hljs-property">Get3DWMTS</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>  <span class="hljs-keyword">let</span> data = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8080/geoserver/gwc/service/wmts&quot;</span>,<br>    <span class="hljs-attr">layer</span>: workspace_used + req.<span class="hljs-property">body</span>.<span class="hljs-property">layer</span>,<br>    <span class="hljs-comment">// tilematrixSet: &quot;WebMercatorQuad&quot;,</span><br>    <span class="hljs-attr">tilematrixSet</span>: <span class="hljs-string">&quot;EPSG:4326&quot;</span>,<br>    <span class="hljs-attr">matrixIds</span>: [<span class="hljs-string">&#x27;EPSG:4326:0&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:1&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:2&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:3&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:4&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:5&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:6&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:7&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:8&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:9&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:10&#x27;</span>,<br>      <span class="hljs-string">&#x27;EPSG:4326:11&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:12&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:13&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:14&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:15&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:16&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:17&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:18&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:19&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:20&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:21&#x27;</span><br>    ]<br>  &#125;<br>  res.<span class="hljs-title function_">send</span>(data)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="整合图层服务链接">6. 整合图层服务链接</h6><ul><li>==使用到了<code>axios</code>模块==</li><li>整合链接，提供给前端</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取单个图层的WMS WMTS WFS TMS</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Get_WWWT</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> info = req.<span class="hljs-property">body</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info)<br>  cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u &#x27;</span> + info.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;:&#x27;</span> + info.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27; -X GET &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;/layers &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span>, error);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//stdou是string ，转成json， 返回去</span><br>    <span class="hljs-keyword">let</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(stdout)<br>    <span class="hljs-keyword">const</span> layer = data.<span class="hljs-property">layers</span>.<span class="hljs-property">layer</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(layer)<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Layer</span>_big = []<br>    <span class="hljs-keyword">let</span> types = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; layer.<span class="hljs-property">length</span>; i++) &#123;<br>      axios.<span class="hljs-title function_">get</span>(http_url + <span class="hljs-string">&#x27;/geoserver/wfs?service=wfs&amp;version=2.0.0&amp;request=DescribeFeatureType&amp;typeNames=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(layer[i].<span class="hljs-property">name</span>) + <span class="hljs-string">&#x27;&amp;outputFormat=application%2Fjson&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">//用字典存，就不存在同异步的问题</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>)<br>        <span class="hljs-comment">//存在两个问题：？？？？？？？？？？？？？？？？？？？？？</span><br>        <span class="hljs-comment">//1.通过postgis上传的图层的 &quot;name&quot;: &quot;the_geom&quot;所在的位置不是第一个，不能直接用featureTypes[0]，可能需要加一层判断</span><br>        <span class="hljs-comment">//2.栅格数据不存在此类属性，需要区分讨论</span><br>        types[layer[i].<span class="hljs-property">name</span>] = response.<span class="hljs-property">data</span>.<span class="hljs-property">featureTypes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">properties</span>[<span class="hljs-number">0</span>].<span class="hljs-property">localType</span><br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>      &#125;)<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; layer.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> WMS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;/wms?&amp;layer=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;format=image/png&amp;transparent=true&#x27;</span><br>        <span class="hljs-keyword">let</span> WMS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;/wms?&amp;layer=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">let</span> WMTS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/wmts?service=WMTS&amp;request=GetTile&amp;version=1.0.0&amp;layer=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;style=&amp;tilematrixset=WebMercatorQuad&amp;format=image%2Fpng&amp;width=256&amp;height=256&amp;tilematrix=&#123;z&#125;&amp;tilerow=&#123;y&#125;&amp;tilecol=&#123;x&#125;&#x27;</span><br>        <span class="hljs-keyword">let</span> WFS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/wfs?request=GetFeature&amp;version=1.1.0&amp;typeName=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;maxFeatures=50&amp;outputFormat=application/json&#x27;</span><br>        <span class="hljs-keyword">let</span> TMS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/tms/1.0.0/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;@WebMercatorQuad@png/&#123;z&#125;/&#123;x&#125;/&#123;-y&#125;.png&#x27;</span><br>        <span class="hljs-keyword">let</span> TMS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/tms/1.0.0/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;@EPSG:900913@png/&#123;z&#125;/&#123;x&#125;/&#123;reverseY&#125;.png&#x27;</span><br>        <span class="hljs-keyword">let</span> WMTS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/wmts/rest/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;/&#123;style&#125;/&#123;TileMatrixSet&#125;/&#123;TileMatrixSet&#125;:&#123;TileMatrix&#125;/&#123;TileRow&#125;/&#123;TileCol&#125;?format=image/png&#x27;</span><br>        <span class="hljs-keyword">let</span> services = [<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMS_url2<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WFS&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WFS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;TMS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: TMS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;TMS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: TMS_url2<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMTS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMTS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMTS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMTS_url2<br>          &#125;,<br>        ]<br>        <span class="hljs-keyword">let</span> temp = &#123;&#125;<br>        temp.<span class="hljs-property">name</span> = layer[i].<span class="hljs-property">name</span><br>        temp.<span class="hljs-property">id</span> = i + <span class="hljs-number">1</span><br>        temp.<span class="hljs-property">type</span> = types[layer[i].<span class="hljs-property">name</span>]<br>        temp.<span class="hljs-property">service</span> = services<br>        <span class="hljs-title class_">Layer</span>_big.<span class="hljs-title function_">push</span>(temp)<br>      &#125;<br>    &#125;, <span class="hljs-number">100</span>);<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">Layer</span>_big)<br>    &#125;, <span class="hljs-number">200</span>);<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">//获取单个用户图层的WMS WMTS WFS TMS</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Get_WWWT_user</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> info = req.<span class="hljs-property">body</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info)<br>  cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u &#x27;</span> + info.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;:&#x27;</span> + info.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27; -X GET &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/layers &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span>, error);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(stdout)<br>    <span class="hljs-comment">// console.log(data.layers.layer)</span><br>    <span class="hljs-keyword">const</span> layer = data.<span class="hljs-property">layers</span>.<span class="hljs-property">layer</span><br>    <span class="hljs-comment">// console.log(layer)</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Layer</span>_big = []<br>    <span class="hljs-keyword">let</span> types = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; layer.<span class="hljs-property">length</span>; i++) &#123;<br>      axios.<span class="hljs-title function_">get</span>(http_url + <span class="hljs-string">&#x27;/geoserver/wfs?service=wfs&amp;version=2.0.0&amp;request=DescribeFeatureType&amp;typeNames=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(layer[i].<span class="hljs-property">name</span>) + <span class="hljs-string">&#x27;&amp;outputFormat=application%2Fjson&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">//用字典存，就不存在同异步的问题</span><br>        types[layer[i].<span class="hljs-property">name</span>] = response.<span class="hljs-property">data</span>.<span class="hljs-property">featureTypes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">properties</span>[<span class="hljs-number">0</span>].<span class="hljs-property">localType</span><br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>      &#125;)<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; layer.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> WMS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/wms?&amp;layer=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;format=image/png&amp;transparent=true&#x27;</span><br>        <span class="hljs-keyword">let</span> WMS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/wms?&amp;layer=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">let</span> WMTS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/wmts?service=WMTS&amp;request=GetTile&amp;version=1.0.0&amp;layer=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;style=&amp;tilematrixset=WebMercatorQuad&amp;format=image%2Fpng&amp;width=256&amp;height=256&amp;tilematrix=&#123;z&#125;&amp;tilerow=&#123;y&#125;&amp;tilecol=&#123;x&#125;&#x27;</span><br>        <span class="hljs-keyword">let</span> WFS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/wfs?request=GetFeature&amp;version=1.1.0&amp;typeName=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;maxFeatures=50&amp;outputFormat=application/json&#x27;</span><br>        <span class="hljs-keyword">let</span> TMS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/tms/1.0.0/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;@WebMercatorQuad@png/&#123;z&#125;/&#123;x&#125;/&#123;-y&#125;.png&#x27;</span><br>        <span class="hljs-keyword">let</span> TMS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/tms/1.0.0/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;@EPSG:900913@png/&#123;z&#125;/&#123;x&#125;/&#123;reverseY&#125;.png&#x27;</span><br>        <span class="hljs-keyword">let</span> WMTS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/wmts/rest/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;/&#123;style&#125;/&#123;TileMatrixSet&#125;/&#123;TileMatrixSet&#125;:&#123;TileMatrix&#125;/&#123;TileRow&#125;/&#123;TileCol&#125;?format=image/png&#x27;</span><br>        <span class="hljs-keyword">let</span> services = [<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMS_url2<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WFS&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WFS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;TMS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: TMS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;TMS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: TMS_url2<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMTS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMTS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMTS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMTS_url2<br>          &#125;,<br>        ]<br>        <span class="hljs-keyword">let</span> temp = &#123;&#125;<br>        temp.<span class="hljs-property">name</span> = layer[i].<span class="hljs-property">name</span><br>        temp.<span class="hljs-property">id</span> = i + <span class="hljs-number">1</span><br>        temp.<span class="hljs-property">type</span> = types[layer[i].<span class="hljs-property">name</span>]<br>        temp.<span class="hljs-property">service</span> = services<br>        <span class="hljs-title class_">Layer</span>_big.<span class="hljs-title function_">push</span>(temp)<br>      &#125;<br>    &#125;, <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">Layer</span>_big)<br>    &#125;, <span class="hljs-number">200</span>);<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="wfs获取layer属性表">7. WFS获取Layer属性表</h6><ul><li>核心：WFS请求，获取json格式属性数据，解析成友好的格式</li><li>难点：从json数据中把属性数据提取出来</li><li>思路：后端向Geoserver后台发送请求，获取Json格式的图层数据。把Json中的有用AttributeTable信息，push到数组中，将数组发送到前端。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//wfs服务获取指定Layer的属性表</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">WFS_getFeatures</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> attrList = []<br>  <span class="hljs-keyword">let</span> treeCol = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">WFSUrl</span> = <span class="hljs-string">&quot;http://localhost:8080/geoserver/wfs?&quot;</span><br>  <span class="hljs-keyword">var</span> feature_url = <span class="hljs-title class_">WFSUrl</span> + <span class="hljs-string">&#x27;request=GetFeature&amp;version=1.1.0&amp;typeName=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">layer</span> + <span class="hljs-string">&#x27;&amp;outputFormat=application/json&#x27;</span>;<br>  axios.<span class="hljs-title function_">get</span>(feature_url).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">WFS_res</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//WFS请求，以json格式返回制定图层的属性数据</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">GeoObject</span> = WFS_res.<span class="hljs-property">data</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">GeoObject</span>)<br>    <span class="hljs-comment">// res.send(typeof(GeoObject))</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">for</span> (atr <span class="hljs-keyword">in</span> <span class="hljs-title class_">GeoObject</span>.<span class="hljs-property">features</span>[<span class="hljs-number">0</span>].<span class="hljs-property">properties</span>) &#123;<br>        attrList.<span class="hljs-title function_">push</span>(atr)<br>      &#125;<br>      <span class="hljs-comment">// res.send(attrList)</span><br>      <span class="hljs-keyword">let</span> attrLen = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">GeoObject</span>.<span class="hljs-property">features</span>[<span class="hljs-number">0</span>].<span class="hljs-property">properties</span>).<span class="hljs-property">length</span><br>      <span class="hljs-keyword">let</span> featureCount = <span class="hljs-title class_">GeoObject</span>.<span class="hljs-property">totalFeatures</span><br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; attrLen; i++) &#123;<br>        treeCol[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; featureCount; j++) &#123;<br>          treeCol[i][j] = <span class="hljs-title class_">GeoObject</span>.<span class="hljs-property">features</span>[j].<span class="hljs-property">properties</span>[attrList[i]];<br>          <span class="hljs-comment">//拼接属性表</span><br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error:&quot;</span> + error)<br>    &#125;<br>    res.<span class="hljs-title function_">send</span>(&#123; <span class="hljs-title class_">Attributes</span>: attrList, <span class="hljs-title class_">Value</span>: treeCol &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2022/08/11/Nginx/"/>
    <url>/2022/08/11/Nginx/</url>
    
    <content type="html"><![CDATA[<h3 id="一nginx介绍">一、Nginx介绍</h3><p><a href="https://zhuanlan.zhihu.com/p/34943332">深入浅出Nginx</a></p><p>Nginx是lgorSysoev为俄罗斯访问量第二的rambler.ru站点设计开发的。从2004年发布至今，凭借开源的力量，已经接近成熟与完善。</p><p>Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、VirtualHost、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。</p><h3 id="二常用操作">二、常用操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">//注意路径问题<br>启动<br>[root@localhost ~]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx</span><br>停止/重启<br>[root@localhost ~]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx -s stop(quit、reload)</span><br>命令帮助<br>[root@localhost ~]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx -h</span><br>验证配置文件<br>[root@localhost ~]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx -t</span><br>配置文件<br>[root@localhost ~]<span class="hljs-comment"># vim /usr/local/nginx/conf/nginx.conf</span><br></code></pre></td></tr></table></figure><h3 id="三常见bug">三、常见BUG</h3><ol type="1"><li><p>[emerg] open() “/usr/local/var/run/nginx.pid“ failed (13:Permission denied</p><ul><li><code>sudo nginx -c /usr/local/etc/nginx/nginx.conf. //你本地的nginx.config路径</code></li></ul></li><li><p>Nginx nginx: [emerg] bind() to 0.0.0.0:8083 failed (48: Addressalready in use)</p><ul><li><p><code>ps -ef|grep nginx</code></p></li><li><p><code>sudo kill PID</code></p></li></ul></li><li><p>nginx: [alert] kill(21725, 1) failed (1: Operation notpermitted)</p><ul><li><code>sudo nginx -s reload</code></li></ul></li></ol><h3 id="四还没解决的问题">四、还没解决的问题</h3><ol type="1"><li>之所以用Nginx是因为后面项目可能需要用到Nginx配置</li><li>QGIS server如何基于Nginx部署，很麻烦，目前国内的资料很少，特别是对于Mac系统来说</li><li>不像Geoserver 直接拖入到tomcat的Webapp目录里面就行</li></ol>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery笔记</title>
    <link href="/2022/08/09/jQuery%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/09/jQuery%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一jquery">一、jQuery</h3><ul><li><p>jQuery是一个JavaScript库 <code>确实</code></p></li><li><p>jQuery极大的简化了JavaScript编程 <code>Maybe</code></p></li><li><p>jQuery 很容易学习 <code>$是核心</code></p></li><li><p>本文主要涉及对DOM元素的操作`</p></li><li><p><ahref="https://www.w3school.com.cn/jquery/index.asp">w3cschool</a></p></li></ul><h3 id="二jquery与html">二、jQuery与HTML</h3><p>jQuery 中非常重要的部分，就是操作 DOM 的能力。</p><p>jQuery 提供一系列与 DOM相关的方法，这使访问和操作元素和属性变得很容易。</p><p><strong>提示：</strong>DOM = Document ObjectModel（文档对象模型）</p><p>DOM 定义访问 HTML 和 XML 文档的标准</p><p>##### 1. 获取DOM的内容</p><ul><li><p>text() 设置或者获取所选元素的文本内容</p></li><li><p>html() 设置或者获取所选元素的内容（包括HTML标记）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//获取 id为btn1的按钮</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Text: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">text</span>()); <span class="hljs-comment">//获取id为test的标签</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  </span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;HTML: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">html</span>());</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>这是段落中的<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>粗体<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>文本。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>显示文本<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>显示 HTML<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>val()</p><figure><img src="/img/jQuery_val().png" alt="val方法" /><figcaption aria-hidden="true">val方法</figcaption></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Value: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">val</span>()); <span class="hljs-comment">//获取input标签</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;米老鼠&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>attr()获取标签的属性</p><figure><img src="/img/jQuery_attr().png" alt="attr方法" /><figcaption aria-hidden="true">attr方法</figcaption></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;#w3s&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;href&quot;</span>));</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.w3school.com.cn&quot;</span><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;w3s&quot;</span>&gt;</span>W3School.com.cn<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>  <span class="hljs-comment">&lt;!--返回a标签中属性herf的值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示 href 值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="改变dom的内容设置内容">2.改变DOM的内容（设置内容）</h5><ul><li><p>text()、html()、val() 设置值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#test1&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#test2&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn3&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#test3&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;Dolly Duck&quot;</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span>这是段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>这是另一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Input field: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mickey Mouse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>设置文本<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>设置 HTML<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>设置值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>attr()设置属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#w3s&quot;</span>).<span class="hljs-title function_">attr</span>(</span><br><span class="language-javascript">      <span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;http://www.w3school.com.cn/jquery&quot;</span></span><br><span class="language-javascript">      <span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;W3School jQuery教程&quot;</span></span><br><span class="language-javascript">    );</span><br><span class="language-javascript">    <span class="hljs-comment">//注意这个属性啊啊啊啊 不然拿不到标签</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>也是<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.w3school.com.cn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;w3s&quot;</span>&gt;</span>W3School.com.cn<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>改变 href 值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请把鼠标指针移动到链接上，或者点击该链接，来查看已经改变的 href 值。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>回调函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  $(&quot;#btn1&quot;).click(function()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  $(&quot;#test1&quot;).text(function(i,origText)&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">     <span class="hljs-comment">&lt;!-- .attr()回调函数--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    return &quot;Old text: &quot; + origText + &quot; New text: Hello world!</span></span><br><span class="language-xml"><span class="language-handlebars">    (index: &quot; + i + &quot;)&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">$(&quot;#btn2&quot;).click(function()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  $(&quot;#test2&quot;).html(function(i,origText)&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!-- .text()回调函数--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    return &quot;Old html: &quot; + origText + &quot; New html: Hello <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>world!<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    (index: &quot; + i + &quot;)&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">  </span></span><br><span class="language-xml"><span class="language-handlebars">$(&quot;button&quot;).click(function()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  $(&quot;#w3s&quot;).attr(&quot;href&quot;, function(i,origValue)&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">     <span class="hljs-comment">&lt;!-- .attr()回调函数--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    return origValue + &quot;/jquery&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="追加">3.追加</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;Some appended text.&quot;</span>); <span class="hljs-comment">//在p标签文本前面拼</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">prepend</span>(<span class="hljs-string">&quot;Some prepended text.&quot;</span>); <span class="hljs-comment">//在p标签文本后面拼</span></span><br><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">appendText</span>(<span class="hljs-params"></span>)</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt1=<span class="hljs-string">&quot;&lt;p&gt;Text.&lt;/p&gt;&quot;</span>;               <span class="hljs-comment">// 以 HTML 创建新元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt2=$(<span class="hljs-string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;Text.&quot;</span>);   <span class="hljs-comment">// 以 jQuery 创建新元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt3=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>);  <span class="hljs-comment">// 以 DOM 创建新元素</span></span><br><span class="language-javascript">txt3.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;Text.&quot;</span>;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">append</span>(txt1,txt2,txt3);         <span class="hljs-comment">// 追加新元素</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">after</span>(<span class="hljs-string">&quot;Some text after&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">before</span>(<span class="hljs-string">&quot;Some text before&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">afterText</span>(<span class="hljs-params"></span>)</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt1=<span class="hljs-string">&quot;&lt;b&gt;I &lt;/b&gt;&quot;</span>;                    <span class="hljs-comment">// 以 HTML 创建新元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt2=$(<span class="hljs-string">&quot;&lt;i&gt;&lt;/i&gt;&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;love &quot;</span>);     <span class="hljs-comment">// 通过 jQuery 创建新元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt3=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;big&quot;</span>);  <span class="hljs-comment">// 通过 DOM 创建新元素</span></span><br><span class="language-javascript">txt3.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;jQuery!&quot;</span>;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">after</span>(txt1,txt2,txt3);          <span class="hljs-comment">// 在 img 之后插入新元素</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="删除">4.删除</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--删除元素 remove--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;.italic&quot;</span>); <span class="hljs-comment">//删除所有class=‘italic’的标签</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;italic&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>This is another paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;italic&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>This is another paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <br><span class="hljs-comment">&lt;!--清空元素 empty--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">empty</span>(); <span class="hljs-comment">//清空div(中)的元素</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:100px;width:300px;border:1px solid black;background-color:yellow;&quot;</span>&gt;</span><br>This is some text in the div.<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is another paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="设置样式">5.设置样式</h5><ol type="1"><li></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  &lt;!-- .表示类，所以.<span class="hljs-property">blue</span> 用 addClass 将style绑定到标签上--&gt;</span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">//将 h1、h2、p style设置为蓝色（应用.blue）</span></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;important&quot;</span>); <span class="hljs-comment">//将div 加粗加大（应用.important）</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;important blue&quot;</span>); <span class="hljs-comment">//可以同时对一个标签设置多个样式类</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"> $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">//移除blue样式</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">//toggle 来回切换样式 点一下应用，点一下取消</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.important</span></span><br><span class="language-css">&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-weight</span>:bold;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:xx-large;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.blue</span></span><br><span class="language-css">&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是另一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是非常重要的文本！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>向元素添加类<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2" type="1"><li>jQuery中CSS方法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Background color = &quot;</span> + $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>));</span><br><span class="language-javascript">    <span class="hljs-comment">//$(&quot;p&quot;).css(&quot;background-color&quot;) 返回p标签的背景颜色 格式：rgb(255, 0, 0)</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>); <span class="hljs-comment">//设置p标签背景颜色为黄色</span></span><br><span class="language-javascript">    <span class="hljs-comment">//指定css属性 语法 css(&quot;propertyname&quot;,&quot;value&quot;);</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;background-color&quot;</span>:<span class="hljs-string">&quot;yellow&quot;</span>,<span class="hljs-string">&quot;font-size&quot;</span>:<span class="hljs-string">&quot;200%&quot;</span>&#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">//同时设置多个css属性</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#ff0000&quot;</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#00ff00&quot;</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#0000ff&quot;</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>返回 p 元素的背景色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3" type="1"><li><p>jQuery与DOM尺寸</p><p><ahref="https://www.w3school.com.cn/jquery/jquery_dimensions.asp">jQuery尺寸</a></p></li></ol><h5 id="jquery遍历元素">6. jQuery遍历元素</h5><p>​ jQuery遍历，意为“移动”，用于根据其相对于其他元素的关系来“查找”（或选取）HTML元素。以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止。</p><p>下图展示了一个家族树。通过 jQuery遍历，您能够从被选（当前的）元素开始，轻松地在家族树中向上移动（祖先），向下移动（子孙），水平移动（同胞）。这种移动被称为对DOM 进行遍历。</p><p>图示解释：</p><figure><img src="/img/dom_tree.gif" alt="遍历 DOM 树" /><figcaption aria-hidden="true">遍历 DOM 树</figcaption></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div&gt; 元素是 &lt;ul&gt; 的父元素，同时是其中所有内容的祖先。<br>&lt;ul&gt; 元素是 &lt;li&gt; 元素的父元素，同时是 &lt;div&gt; 的子元素<br>左边的 &lt;li&gt; 元素是 &lt;span&gt; 的父元素，&lt;ul&gt; 的子元素，同时是 &lt;div&gt; 的后代<br>&lt;span&gt; 元素是 &lt;li&gt; 的子元素，同时是 &lt;ul&gt; 和 &lt;div&gt; 的后代。<br>两个 &lt;li&gt; 元素是同胞（拥有相同的父元素）。<br>右边的 &lt;li&gt; 元素是 &lt;b&gt; 的父元素，&lt;ul&gt; 的子元素，同时是 &lt;div&gt; 的后代。<br>&lt;b&gt; 元素是右边的 &lt;li&gt; 的子元素，同时是 &lt;ul&gt; 和 &lt;div&gt; 的后代。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong>祖先是父、祖父、曾祖父等等。后代是子、孙、曾孙等等。同胞拥有相同的父。</p><h6 id="父与子遍历">1.父与子遍历</h6><figure><img src="/img/jQuery_parent().png" alt="jQuery遍历父标签" /><figcaption aria-hidden="true">jQuery遍历父标签</figcaption></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.ancestors</span> *</span><br><span class="language-css">&#123; </span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid lightgrey;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: lightgrey;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery/jquery-1.11.1.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-comment">//遍历祖先</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//修改span标签的上一级父标签的css</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//修改span标签的所有父标签的css</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parents</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//修改span标签的div父标签，自己拓展 parents(&quot;#xxx&quot;)-id  parents(&quot;.xxx&quot;)-class</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">////修改介于 &lt;span&gt; 与 &lt;div&gt; 元素之间的所有祖先元素：</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parentsUntil</span>(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-comment">//遍历后代</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//设置div标签的所有子标签样式</span></span><br><span class="language-javascript">   $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置 &lt;div&gt; 的直接子元素中类名为 &quot;1&quot; 的所有 &lt;p&gt; 元素的样式</span></span><br><span class="language-javascript">   $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&quot;p.1&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//设置 &lt;div&gt; 的所有后代的样式：</span></span><br><span class="language-javascript">   $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;*&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ancestors&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:500px;&quot;</span>&gt;</span>div (曾祖父)<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>ul (祖父)  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>li (直接父)<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:500px;&quot;</span>&gt;</span>div (祖父)   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p (直接父)<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="同胞元素遍历">2.同胞元素遍历</h6><figure><img src="/img/jQuery_child().png" alt="jQuery遍历子标签" /><figcaption aria-hidden="true">jQuery遍历子标签</figcaption></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.sty</span> *</span><br><span class="language-css">&#123; </span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid lightgrey;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: lightgrey;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery/jquery-1.11.1.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//设置所有与h2标签同胞元素的所有标签元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置所有与h2标签同胞元素的所有 &lt;p&gt; 元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置 &lt;h2&gt; 的下一个同胞元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置 &lt;h2&gt; 的所有跟随（同级的，顺序在他下面的）的同胞元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">nextAll</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置介于 &lt;h2&gt; 与 &lt;h6&gt; 元素之间的所有同胞元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">nextUntil</span>(<span class="hljs-string">&quot;h6&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sty&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div (父)<br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="进一步过滤筛选">3.进一步过滤（筛选）</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//选取首个 &lt;div&gt; 元素内部的第一个 &lt;p&gt; 元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;div p&quot;</span>).<span class="hljs-title function_">first</span>(); </span><br><span class="language-javascript">  <span class="hljs-comment">//选取首个 &lt;div&gt; 元素内部的最后一个 &lt;p&gt; 元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;div p&quot;</span>).<span class="hljs-title function_">last</span>();</span><br><span class="language-javascript">  <span class="hljs-comment">//选取被选元素中带有指定索引号的元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">  <span class="hljs-comment">// &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;p&gt;2&lt;/p&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span></span><br><span class="language-javascript">  <span class="hljs-comment">//选取类名为 &quot;intro&quot; 的所有 &lt;p&gt; 元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-string">&quot;.intro&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-comment">//选取类名不带有 &quot;intro&quot; 的所有 &lt;p&gt; 元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">not</span>(<span class="hljs-string">&quot;.intro&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><ahref="https://www.w3school.com.cn/jquery/jquery_ref_traversing.asp">其他一些遍历的方法</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS项目《贪吃蛇》</title>
    <link href="/2022/08/08/%E9%80%8F%E8%A7%86%EF%BC%9ATS%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%B4%AA%E5%90%83%E8%9B%87%E3%80%8B/"/>
    <url>/2022/08/08/%E9%80%8F%E8%A7%86%EF%BC%9ATS%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%B4%AA%E5%90%83%E8%9B%87%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="一项目简介">一、项目简介</h3><p>在Web端，利用Html、CSS、Typescript语言，实现贪吃蛇游戏的功能</p><ol type="1"><li><h5 id="界面的搭建-htmlcss">界面的搭建 HTML、CSS</h5></li><li><h5 id="系统功能的完成">系统功能的完成</h5><ul><li>类型：蛇的实现<ul><li>蛇（头）的坐标</li><li>移动功能</li><li>转向功能</li><li>蛇身体变长功能</li><li>检测蛇是否撞到墙的功能</li><li>检测蛇是否撞到自己的功能</li></ul></li><li>类型：记分板的实现<ul><li>分数增加功能</li><li>等级（难度）增加功能</li></ul></li><li>类型：食物的实现<ul><li>随机生成食物坐标功能</li></ul></li><li>类型：游戏控制的实现（核心类）<ul><li>游戏初始化功能</li><li>键盘按下的响应功能</li><li>根据键盘响应改变蛇的方向功能</li><li>检测是否吃到食物功能</li></ul></li></ul></li></ol><h3 id="二界面搭建">二、界面搭建</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html界面--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>贪吃蛇<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stage&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;snake&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;food&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;score_panel&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                SCORE:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;score&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                LEVEL:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;leve&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>问题：div下嵌套div，下面的DOM的获取方式没见过</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 设置变量</span><br><span class="hljs-variable">@bg-color:</span> <span class="hljs-number">#b7d4a8</span>;<br><br><span class="hljs-comment">//清除默认样式</span><br>*&#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 改变盒子模型的计算方式</span><br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">body</span>&#123;<br>  <span class="hljs-attribute">font</span>: bold <span class="hljs-number">20px</span> <span class="hljs-string">&quot;Courier&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//设置主窗口的样式</span><br><span class="hljs-selector-id">#main</span>&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">360px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">420px</span>;<br>  <span class="hljs-comment">// 设置背景颜色</span><br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">@bg-color</span>;<br>  <span class="hljs-comment">// 设置居中</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>  <span class="hljs-comment">// 设置圆角</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">40px</span>;<br><br>  <span class="hljs-comment">// 开启弹性盒模型</span><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-comment">// 设置主轴的方向</span><br>  <span class="hljs-attribute">flex-flow</span>: column;<br>  <span class="hljs-comment">// 设置侧轴的对齐方式</span><br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-comment">// 设置主轴的对齐方式</span><br>  <span class="hljs-attribute">justify-content</span>: space-around;<br><br>  <span class="hljs-comment">// 游戏舞台</span><br>  <span class="hljs-selector-id">#stage</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">304px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">304px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid black;<br>    <span class="hljs-comment">// 开启相对定位</span><br>    <span class="hljs-attribute">position</span>: relative;<br><br>    <span class="hljs-comment">// 设置蛇的样式</span><br>    <span class="hljs-selector-id">#snake</span>&#123;<br>        <span class="hljs-selector-tag">&amp;</span>&gt;<span class="hljs-selector-tag">div</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-variable">@bg-color</span>;<br>            <span class="hljs-comment">//开启绝对定位</span><br>            <span class="hljs-attribute">position</span>: absolute;<br>        &#125;<br>    &#125;<br>    <span class="hljs-selector-id">#food</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-comment">// background-color: red;</span><br>        <span class="hljs-attribute">display</span>: flex; <span class="hljs-comment">//父亲开启弹性盒</span><br>        <span class="hljs-attribute">flex-flow</span>: row wrap; <span class="hljs-comment">//设置主轴横向排列 wrap表示会换行</span><br>        <span class="hljs-attribute">justify-content</span>: space-between;<span class="hljs-comment">//主轴的空白空间分配到元素之间</span><br>        <span class="hljs-attribute">align-content</span>: space-between; <span class="hljs-comment">//让四个小方块在四周</span><br><br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">40px</span>;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">40px</span>;<br>        <span class="hljs-selector-tag">&amp;</span>&gt;<span class="hljs-selector-tag">div</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">4px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">4px</span>;<br>            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>            <span class="hljs-attribute">transform</span>: rotate(<span class="hljs-number">45deg</span>); <span class="hljs-comment">//设置每个div旋转45度</span><br>        &#125; <br>      <span class="hljs-comment">//不知道这边和 直接div有什么区别</span><br>    &#125;<br>  <br>  &#125;<br><br>  <span class="hljs-comment">// 记分牌</span><br>  <span class="hljs-selector-id">#score-panel</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-comment">// 设置主轴的对齐方式</span><br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//例如div span得到的是div下所有的span元素，而div&gt;span则是取得的div下第一级的span元素。</span><br></code></pre></td></tr></table></figure><h3 id="三系统功能的完成">三、系统功能的完成</h3><h4 id="蛇类">1. 蛇类</h4><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Snake</span> &#123;<br>    <span class="hljs-comment">//表示蛇头的元素</span><br>    <span class="hljs-attr">head</span>: <span class="hljs-title class_">HTMLElement</span><br>    <span class="hljs-comment">//蛇的身体，包括蛇头</span><br>    <span class="hljs-attr">bodies</span>: <span class="hljs-title class_">HTMLCollection</span><br>    <span class="hljs-comment">//获取蛇的容器</span><br>    <span class="hljs-attr">element</span>: <span class="hljs-title class_">HTMLElement</span><br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;snake&#x27;</span>)! <span class="hljs-comment">//获取蛇在html中的容器标签</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#snake &gt; div&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span> <span class="hljs-comment">//获取蛇头 #snake下的div标签</span><br>       <span class="hljs-comment">// &lt;div id=&quot;snake&quot;&gt;</span><br>       <span class="hljs-comment">//         &lt;div&gt;&lt;/div&gt;      //‘#snake &gt; div 获取的就是这个，id是snake，子元素 div标签</span><br>       <span class="hljs-comment">//&lt;/div&gt;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>)! <span class="hljs-comment">//获取所有的div蛇身  //获取蛇下的所有div</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取蛇头的坐标</span><br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">X</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">offsetLeft</span>   <span class="hljs-comment">//距离左边的距离</span><br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">Y</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">offsetTop</span>   <span class="hljs-comment">//距离上边的距离</span><br>    &#125;<br><br>    <span class="hljs-comment">//设置蛇头坐标 构造函数</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">X</span>(<span class="hljs-params">value: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span> === value) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span> || value &gt; <span class="hljs-number">290</span>) &#123;<br>            <span class="hljs-comment">//进入判断 说明蛇撞墙了</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;蛇撞墙了&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[<span class="hljs-number">1</span>] &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">offsetLeft</span> === value) &#123;<br>            <span class="hljs-comment">//如果发生了掉头，让头向反方向继续移动</span><br>            <span class="hljs-keyword">if</span> (value &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span>) &#123;<br>                value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span> - <span class="hljs-number">10</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span> + <span class="hljs-number">10</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">moveBody</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = value + <span class="hljs-string">&#x27;px&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkHeadBody</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">Y</span>(<span class="hljs-params">value: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span> === value) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span> || value &gt; <span class="hljs-number">290</span>) &#123;<br>            <span class="hljs-comment">//进入判断 说明蛇撞墙了</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;蛇撞墙了&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[<span class="hljs-number">1</span>] &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">offsetTop</span> === value) &#123;<br>            <span class="hljs-comment">//如果发生了掉头，让头向反方向继续移动</span><br>            <span class="hljs-keyword">if</span> (value &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span>) &#123;<br>                value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span> - <span class="hljs-number">10</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span> + <span class="hljs-number">10</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">moveBody</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = value + <span class="hljs-string">&#x27;px&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkHeadBody</span>()<br>    &#125;<br><br>    <span class="hljs-comment">//设置蛇增加身体的方法</span><br>    <span class="hljs-title function_">addBody</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&#x27;beforeend&#x27;</span>, <span class="hljs-string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>)<br>        <span class="hljs-comment">//在结束标签之前的位置插入一个HTML div</span><br>    &#125;<br><br>    <span class="hljs-title function_">moveBody</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//将后边身体设置为前面身体的位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">let</span> x = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i - <span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">offsetLeft</span><br>            <span class="hljs-keyword">let</span> y = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i - <span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">offsetTop</span>;<br>            (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = x + <span class="hljs-string">&#x27;px&#x27;</span>;<br>            (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = y + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">checkHeadBody</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 获取所有的身体，检查是否和蛇头的坐标发生重叠</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> bd = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span> === bd.<span class="hljs-property">offsetLeft</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span> === bd.<span class="hljs-property">offsetTop</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;撞到自己了&#x27;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Snake</span>;  <span class="hljs-comment">//最后记得把类暴露出去 后面就可以import</span><br></code></pre></td></tr></table></figure></p><p>补充：get和set （C#都忘光了。。。）</p><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">_name</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//私有属性，外部访问不到</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;&#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>()&#123;    <span class="hljs-comment">//get 使得该类具有了访问name属性的方法 ，后面就可以直接 person.name</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span>   <span class="hljs-comment">//实现的对私有属性的“访问”</span><br>  &#125;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">set</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">inputName:<span class="hljs-built_in">string</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = inputName  <span class="hljs-comment">//实现对私有属性赋值</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="得分窗口类">2.得分窗口类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//定义表示记分牌的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorePanel</span> &#123;<br>    <span class="hljs-comment">// 记录分数和等级</span><br>    score = <span class="hljs-number">0</span><br>    level = <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 分数和等级所在的元素</span><br>    <span class="hljs-attr">scoreEle</span>: <span class="hljs-title class_">HTMLElement</span><br>    <span class="hljs-attr">levelEle</span>: <span class="hljs-title class_">HTMLElement</span><br>    <span class="hljs-attr">maxLevel</span>: <span class="hljs-built_in">number</span><br>    <span class="hljs-attr">upScore</span>: <span class="hljs-built_in">number</span><br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">maxLevel: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>, upScore: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">scoreEle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;score&#x27;</span>)!<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelEle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;level&#x27;</span>)!<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxLevel</span> = maxLevel<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">upScore</span> = upScore<br>    &#125;<br>    <span class="hljs-title function_">addScore</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//实现分数自增</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span>++<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">scoreEle</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> + <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment">//判断分数是多少</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> % <span class="hljs-variable language_">this</span>.<span class="hljs-property">upScore</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">levelUp</span>()<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">levelUp</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//实现分数自增</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxLevel</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span>++<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelEle</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span> + <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ScorePanel</span>;<br></code></pre></td></tr></table></figure><h4 id="食物类">3.食物类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span>&#123;<br>    <span class="hljs-comment">//定义一个属性来表示食物所对应的元素</span><br>    <span class="hljs-attr">element</span>:<span class="hljs-title class_">HTMLElement</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//获取页面中的food元素并赋值给Element</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;food&#x27;</span>)!<br>    &#125;<br>    <span class="hljs-comment">//定义一个获取食物x轴坐标的方法</span><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">X</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">offsetLeft</span>  <span class="hljs-comment">//使得外部可以通过 food.X 和 food.Y 访问到 Food的坐标</span><br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">Y</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">offsetTop</span><br>    &#125;<br>    <span class="hljs-comment">// 修改食物位置的方法</span><br>    <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//生成一个随机的位置</span><br>        <span class="hljs-keyword">let</span> top = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">29</span>)*<span class="hljs-number">10</span><br>        <span class="hljs-keyword">let</span> left = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">29</span>)*<span class="hljs-number">10</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = left+<span class="hljs-string">&#x27;px&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = top+<span class="hljs-string">&#x27;px&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Food</span>;<br></code></pre></td></tr></table></figure><h4 id="游戏控制类">4.游戏控制类</h4><p>```typescript //控制其他的所有类 //引入其他类 import Snake from"./snake"; import Food from "./food"; import ScorePanel from"./scorePanel";</p><p>class GameControl { //定义三个属性 snake: Snake; food: Food;scorePanel: ScorePanel; //创建属性 存储蛇的移动方向（按键方向）direction: string = ""; //创建属性 记录游戏是否结束 isLive = true;constructor() { this.snake = new Snake(); this.food = new Food();this.scorePanel = new ScorePanel(); this.init(); }</p><p>//游戏的初始化方法，调用后游戏开始 init() {document.addEventListener("keydown",this.keyDownloadHandler.bind(this)); this.run();</p><p>} //创建一个键盘按下的响应函数 keyDownloadHandler(event:KeyboardEvent) { //赋值之前需要检查方向 event.key 用户是否按了正确的按键this.direction = event.key;//用户按下按键的时候，方向值存到direction中</p><p>}</p><p>run() { //根据方向，使得蛇的位置改变 //向上 top值减小 向下 top值增加左left减少 右 left增加 //获取蛇现在的坐标 let X = this.snake.X; let Y =this.snake.Y; //根据按键的方向修改 X Y switch (this.direction) { case"ArrowUp": case "Up": Y -= 10; break; case "ArrowDown": case "Down": Y+= 10; break; case "ArrowLeft": case "Left": X -= 10; break; case"ArrowRight": case "Right": X += 10; break; }</p><pre><code class="hljs">this.checkEat(X, Y)try &#123;  this.snake.X = X;  this.snake.Y = Y;&#125; catch (error) &#123;  alert(error)  this.isLive = false&#125;//开启定时调用this.isLive &amp;&amp; setTimeout(this.run.bind(this), 100 - (this.scorePanel.level - 1) * 10);</code></pre><p>}</p><p>//检查蛇是否吃到了食物 checkEat(X: number, Y: number) { if (X ===this.food.X &amp;&amp; Y === this.food.Y) { console.log('吃到食物')//食物的位置要重置 this.food.change() this.scorePanel.addScore()this.snake.addBody() }</p><p>} }</p><p>export default GameControl;</p>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular笔记</title>
    <link href="/2022/08/06/angular%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/06/angular%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="angular-学习">Angular 学习</h2><h4 id="组件">1.组件</h4><p>angular中 一个组件由三个文件组成</p><ul><li><p>.html、.ts、.css</p></li><li><p>ts文件中</p><ul><li>Selector:’app-my01’表示组件到名称，使用的时候<app-my01></app-my01></li><li>templateUrl 组件关联的html地址</li><li>styleUrl 组件所关联使用的css文件地址</li><li>Export class 组件的类名</li></ul></li><li><p>组件制作完毕之后，必须注册到全局中才能使用</p><ul><li>app.module.ts 中 declearations</li><li>在根组件html中使用组件 <app-my01></app-my01></li></ul></li><li><p>快速制作组件</p><ul><li>ng generate component 组件名称</li><li>缩写 ng g c 组件名称</li><li>自动更新到全局module中</li></ul></li><li><p>同一组件中数据和属性的绑定</p><ul><li>在 ts脚本文件的 类中书写</li></ul><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My01Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br><br>  name =<span class="hljs-string">&#x27;01&#x27;</span><br>  age = <span class="hljs-number">18</span><br>  married = <span class="hljs-literal">false</span><br><br><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123; &#125;<br></code></pre></td></tr></table></figure></p></li></ul><h5 id="花括号的使用">花括号的使用</h5><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello world my <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;married&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ul><li><p>括号中支持</p><ul><li><p>数学运算符 加减乘除、取余</p></li><li><p>比较运算符 大于小于等于不等于。。。</p></li><li><p>三元运算符 age &gt; 30 ? “中年”：青年</p></li><li><p>逻辑运算符</p><ul><li><p>逻辑与&amp;&amp;</p></li><li><p>逻辑或 ｜｜</p></li><li><p>逻辑非 ！</p></li></ul></li><li><p>对象方法</p></li></ul><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;&#123;<span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_">toUpperCase</span>()&#125;&#125;<br></code></pre></td></tr></table></figure></p><ul><li>类中的方法</li></ul><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// html</span><br>&lt;h3&gt;可以调用方法&#123;&#123;<span class="hljs-title function_">getVal</span>()&#125;&#125;&lt;/h3<br><span class="hljs-comment">// ts</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">getVal</span>():<span class="hljs-built_in">any</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">65535</span>;<br> &#125;<br></code></pre></td></tr></table></figure></p><ul><li>局部变量</li></ul><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;input #heroInput&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;heroInput.value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure></p><ul><li>点击事件</li></ul><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//在 ts文件的类中写方法</span><br> <span class="hljs-title function_">showClick</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;触发了点击事件&#x27;</span>)<br>  &#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--在html中插入button按钮并且注册事件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;showClick()&quot;</span>&gt;</span>点击事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ul><li><p>其他一些知识点</p><ul><li>属性的绑定</li></ul></li></ul><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!--在ts类中注册了 name=&quot;朱凌一&quot; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">title</span> = <span class="hljs-string">&quot;朱凌一&quot;</span>&gt;</span>本阶段学习的学生<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> [<span class="hljs-attr">title</span>]=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>本阶段学习的学生<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>   <br><span class="hljs-comment">&lt;!--  ts // name = “朱凌一”  --&gt;</span><br></code></pre></td></tr></table></figure></p><ul><li>特殊属性 HTML绑定</li></ul><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;html&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!-- //等价于 原生DOM中的 innerHTML 里面的内容会被当作纯文本 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">innerHtml</span>]=<span class="hljs-string">&quot;html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br>        <span class="hljs-comment">&lt;!-- //数据被解析了 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></p><ul><li><p>双向数据绑定</p><ul><li><p>angular 默认不支持双向数据绑定</p><ul><li>在 全局配置文件 app.module.ts中进行引入</li></ul></li></ul></li></ul><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FormsModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//注入Forms模块</span><br>      <span class="hljs-attr">imports</span>: [<br>          <span class="hljs-title class_">BrowserModule</span>,<br>          <span class="hljs-title class_">AppRoutingModule</span>,<br>          <span class="hljs-title class_">FormsModule</span><br>        ],<br></code></pre></td></tr></table></figure></p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--对name属性进行双向绑定 []--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></p></li></ul><h5 id="样式属性-class与style的使用">样式属性 class与style的使用</h5><ul><li><p>动态样式 ngStyle</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> [<span class="hljs-attr">ngStyle</span>]=<span class="hljs-string">&quot;&#123;color:&#x27;red&#x27;,&#x27;font-size&#x27;:size&#125;&quot;</span>&gt;</span>&#123;&#123;size&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> [<span class="hljs-attr">ngStyle</span>]=<span class="hljs-string">&quot;&#123;color:&#x27;red&#x27;,fontSize:size&#125;&quot;</span>&gt;</span>&#123;&#123;size&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></p></li><li><p>对象类型属性名不能含有中划线</p><ul><li>小驼峰命名法或者用字符串包裹起来</li></ul></li><li><p>html不支持++、+=等复合运算符</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;size=size+1&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;&#123;danger:true&#125;&quot;</span>&gt;</span>变大<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;size=size+1&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;&#123;danger:size&gt;20&#125;&quot;</span>&gt;</span>变大<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;size=size+1&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;&#123;success:size&gt;=30&#125;&quot;</span>&gt;</span>变大<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.css</span> 文件中<br><span class="hljs-selector-tag">h1</span>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.danger</span>&#123;<br>    <span class="hljs-attribute">color</span>:white;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.success</span>&#123;<br>    <span class="hljs-attribute">color</span>:white;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p></li></ul><h5 id="常用指令">常用指令</h5><h6 id="条件指令">条件指令</h6><ol type="1"><li><p>if指令</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">*ngif=<span class="hljs-string">&quot;expression&quot;</span><br>&lt;div *ngIf=<span class="hljs-string">&quot;score&lt;=90&quot;</span>&gt;良好&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>if-else指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;score&gt;=100; else elseTemplate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>及格<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">elseTemplate</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>不及格<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span><br><span class="hljs-comment">&lt;!-- elseTemplate 标记else方法执行的跳转位置 --&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>switch指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> [<span class="hljs-attr">ngSwitch</span>]=<span class="hljs-string">&quot;type&quot;</span>&gt;</span> <br>         <span class="hljs-comment">&lt;!-- ngSwitch 变量值 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> 普通会员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> 黄金会员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span> 钻石会员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> *<span class="hljs-attr">ngSwitchDefault</span>&gt;</span>啥也不是<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="循环指令">循环指令</h6><ol type="1"><li><p>for 循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"> *ngFor = &quot;let item of items&quot;<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of names&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>带有序号的for循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- i 元素在数组中的序号 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of names; let i=index&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;&#123;i&#125;&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="自定义指令">自定义指令</h6><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 自定义指令： ng generate directive 指令名 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 简化写法 ng g d 指令名 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- eg: 自定义指令 appfocus 让输入框自动获取焦点 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">appFocus</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure> 在 ng g d focus 生成的ts配置文件中 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//使得 input标签获得焦点</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Directive</span>, <span class="hljs-title class_">ElementRef</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[appFocus]&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FocusDirective</span> &#123;<br>  <span class="hljs-comment">//生成新的指令必须重启服务器，否则不生效</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">e:ElementRef</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-keyword">let</span> input = e.<span class="hljs-property">nativeElement</span> <span class="hljs-comment">//用指令绑定标签</span><br>    input.<span class="hljs-title function_">focus</span>() <span class="hljs-comment">//通过指令使得标签获得了 nativeElement.foucs的原生功能</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//使得 input标签中的值变为大写</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Directive</span>, <span class="hljs-title class_">ElementRef</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[appUpper]&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpperDirective</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">e:ElementRef</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    e.<span class="hljs-property">nativeElement</span>.<span class="hljs-property">value</span> = e.<span class="hljs-property">nativeElement</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">toUpperCase</span>()<br><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//e.nativeElement 当前标签 如 input </span><br></code></pre></td></tr></table></figure></p><h5 id="过滤器管道pipe">过滤器、管道（pipe）</h5><p>常常用来格式化数据</p><h6 id="常用的系统管道">1.常用的系统管道</h6><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>大写:&#123;&#123;&#x27;hello&#x27;|uppercase&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小写:&#123;&#123;&#x27;WORLD&#x27;|lowercase&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>首字母大写&#123;&#123;&#x27;my name is xx&#x27;|titlecase&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>百分数:&#123;&#123;0.33|percent&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>百分数小数位：&#123;&#123;0.565656|percent:&#x27;2.2&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!-- 整数位两位，小数位两位 56.56%  不足要求的位数会用0补全--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>钱：&#123;&#123;123456.789|currency&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自带四舍五入，带千进位 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>钱：&#123;&#123;123456.789|currency:&#x27;¥&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日期格式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 时间戳需要ts中文件支持 距离1970年1月1日的秒数 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>时间戳:&#123;&#123;time&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 转化为日期格式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>日期格式:&#123;&#123;time|date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过参数定制日期格式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 年y 月M（大M） 日d 小时h 分钟m 秒s --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>日期：&#123;&#123;time|date:&#x27;yyyy-MM-dd HH:mm:ss&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>日期：&#123;&#123;time|date:&#x27;yyyy-M-d hh:mm:ss&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h6 id="自定义管道">2.自定义管道</h6><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//ng g p gender 生成管道文件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Pipe</span>, <span class="hljs-title class_">PipeTransform</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-meta">@Pipe</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;gender&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenderPipe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PipeTransform</span> &#123;<br><br>  <span class="hljs-comment">// transform(value: unknown, ...args: unknown[]): unknown &#123;</span><br>  <span class="hljs-comment">//   return null;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// 管道生成之后必须重启</span><br>  <span class="hljs-comment">// 固定的管道写法问题&#123;&#123;value|管道名&#125;&#125;</span><br>  <span class="hljs-comment">//value值 会固定传递到下方transform方法的参数中</span><br>  <span class="hljs-comment">// 返回值就会作为管道的处理结果</span><br>  <span class="hljs-title function_">transform</span>(<span class="hljs-params">value:<span class="hljs-built_in">any</span>,lang=<span class="hljs-string">&#x27;zh&#x27;</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>     <span class="hljs-keyword">if</span>(lang==<span class="hljs-string">&#x27;zh&#x27;</span>)&#123;<br>      <span class="hljs-keyword">if</span>(value==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>      <span class="hljs-keyword">if</span>(value==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;女&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(lang==<span class="hljs-string">&#x27;en&#x27;</span>)&#123;<br>      <span class="hljs-keyword">if</span>(value==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;male&#x27;</span>;<br>      <span class="hljs-keyword">if</span>(value==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;female&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 自定义管道--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别:en<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of emps;let i = index&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;&#x27;序号:&#x27;+(i+1)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- 制作gender性别 pipe管道 --&gt;</span><br>          <span class="hljs-comment">&lt;!-- 生成自定义管道 ng g p  --&gt;</span><br>          <span class="hljs-comment">&lt;!-- 管道的可选、非可选参数声明 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.sex|gender&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.sex|gender:&quot;en&quot;&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure></p><h5 id="组件的生命周期">组件的生命周期</h5><p>定义：一个组件从生成到出现，然后最终销毁的过程 就是组件的生命周期</p><p>生命周期的每个阶段都会触发对应的函数，利用这些函数可以在不同周期完成对应的任务</p><ol type="1"><li><p>constructor()</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//面向对象中类的构造方法</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件出生的第一时间触发&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ngOnDestroy()</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">ngOnDestroy</span>():<span class="hljs-built_in">void</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;组件销毁时触发&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ngOnInit() <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">ngOnOInit</span>():<span class="hljs-built_in">void</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件中的内容开始初始化&quot;</span>) <span class="hljs-comment">//类似vue中mounted</span><br>&#125;<br></code></pre></td></tr></table></figure></p></li><li><p>总览 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; <br>  <span class="hljs-comment">//组件的构造函数 第一个执行的</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My02Component进行constructor完成&#x27;</span>)<br>&#125;<br>show02 = <span class="hljs-literal">true</span><br><span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Init执行完成&#x27;</span>)<br>  <span class="hljs-comment">//常常在这个方法中发送一些网络请求</span><br>&#125;<br><span class="hljs-title function_">ngAfterContentInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called after ngOnInit when the component&#x27;s or directive&#x27;s content has been initialized.</span><br>  <span class="hljs-comment">//Add &#x27;implements AfterContentInit&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;组件中的数据初始化完毕时候触发&#x27;</span>);  <br>&#125;<br><span class="hljs-title function_">ngAfterViewInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called after ngAfterContentInit when the component&#x27;s view has been initialized. Applies to components only.</span><br>  <span class="hljs-comment">//Add &#x27;implements AfterViewInit&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件上的UI，显示的时候用户的界面初始化完成时候的时候触发&quot;</span>);<br>&#125;<br><br><span class="hljs-title function_">ngAfterContentChecked</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called after every check of the component&#x27;s or directive&#x27;s content.</span><br>  <span class="hljs-comment">//Add &#x27;implements AfterContentChecked&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;专门用来监听组件上的数据发生变化，数据发生变化的时候触发&quot;</span>);<br>  <br>&#125;<br><span class="hljs-title function_">ngAfterViewChecked</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called after every check of the component&#x27;s view. Applies to components only.</span><br>  <span class="hljs-comment">//Add &#x27;implements AfterViewChecked&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件上的UI随着数据更新而变化时候触发&quot;</span>);<br>  <br>&#125;<br><span class="hljs-title function_">ngOnDestroy</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called once, before the instance is destroyed.</span><br>  <span class="hljs-comment">//Add &#x27;implements OnDestroy&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;OnDestroy组件销毁完成&#x27;</span>)<br>  <span class="hljs-comment">//组件销毁的时候做一些清理工作</span><br>&#125;<br></code></pre></td></tr></table></figure></p></li></ol><h4 id="组件通信">2.组件通信</h4><h5 id="父元素与子元素">父元素与子元素</h5><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 给要掌控的子元素组件一个唯一标识 类似 id=&#x27;xxx&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- 与语法糖 #代替了 id --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-my03</span> #<span class="hljs-attr">my03</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-my03</span>&gt;</span><br></code></pre></td></tr></table></figure> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;my03&#x27;</span>)my03!:<span class="hljs-title class_">My03Component</span><br>    <br><span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123; <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">my03</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">my03</span>.<span class="hljs-property">age</span> +=<span class="hljs-number">10</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">my03</span>.<span class="hljs-title function_">show</span>()<br>&#125;<br></code></pre></td></tr></table></figure></p><h5 id="父子传参">父子传参</h5><figure><img src="/img/input-output-diagram.svg" alt="input-output-diagram" /><figcaption aria-hidden="true">input-output-diagram</figcaption></figure><ol type="1"><li><h6 id="父组件传值给子组件">父组件传值给子组件</h6><ol type="1"><li>父组件可以直接访问子组件中的public变量</li></ol><ul><li>父组件中声明子组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--父组件的html文件，引入子组件  设置父组件ts中ViewChild的属性（索引）：#child--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>father works!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-child</span> #<span class="hljs-attr">child</span> [<span class="hljs-attr">childReceivefatherMsg</span>]=<span class="hljs-string">&quot;fatherMsg&quot;</span> [<span class="hljs-attr">childUseFatherRun</span>]=<span class="hljs-string">&quot;fatherRun&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-child</span>&gt;</span><br><span class="hljs-comment">&lt;!--子中：childReceivefatherMsg属性，绑定接受父组件中fatherMsg属性--&gt;</span><br><span class="hljs-comment">&lt;!--子中：childUseFatherRun，绑定调用父组件中childUseFatherRun方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;fatherUseChild()&quot;</span>&gt;</span>调用子组件属性<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//父组件的TS文件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">OnInit</span>, <span class="hljs-title class_">ViewChild</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-father&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./father.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./father.component.css&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FatherComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br><br>  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;child&#x27;</span>) <span class="hljs-attr">child</span>: <span class="hljs-built_in">any</span>  <span class="hljs-comment">//获取对应的子组件，赋值给child变量</span><br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">fatherMsg</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;这是父组件中的信息&#x27;</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br><br>  <span class="hljs-title function_">fatherRun</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父组件正在跑&quot;</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">fatherUseChild</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//父组件调用子组件的方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">child</span>.<span class="hljs-property">childMsg</span>)<br>  &#125;<br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>子组件中声明接受与调用的变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My04Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>  <span class="hljs-meta">@Input</span>() name!:<span class="hljs-built_in">string</span>  <span class="hljs-comment">//核心 利用@Input 获取父组件中指定的name属性，作为自己一个属性</span><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!--子组件的html中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>child works!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;clildRunsFather()&quot;</span>&gt;</span>子组件调用父组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript">   <span class="hljs-comment">//子组件的TS文件中</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">Input</span>, <span class="hljs-title class_">OnInit</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-child&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./child.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./child.component.css&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br><br>  <span class="hljs-meta">@Input</span>()<br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">childReceivefatherMsg</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span><br>  <span class="hljs-meta">@Input</span>()<br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">childUseFatherRun</span>: <span class="hljs-built_in">any</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">childMsg</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;这是子组件中的属性信息&#x27;</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br><br><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br><br>  <span class="hljs-title function_">clildRunsFather</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">childReceivefatherMsg</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">childUseFatherRun</span>()<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></p></li><li><p>子元素传值给父元素 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;1--父组件&gt;&lt;/1--&gt;<br><span class="hljs-comment">&lt;!--父组件中安排一个间谍--&gt;</span>   <br><span class="hljs-tag">&lt;<span class="hljs-name">app-my05</span> (<span class="hljs-attr">msgEvent</span>)=<span class="hljs-string">&quot;show($event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-my05</span>&gt;</span><br></code></pre></td></tr></table></figure></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//父组件中设置show方法</span><br><span class="hljs-title function_">show</span>(<span class="hljs-params">msg:<span class="hljs-built_in">string</span></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;msg:&#x27;</span>,msg)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">pMsg</span> = msg<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;msgEvent.emit(&#x27;东东&#x27;)&quot;</span>&gt;</span>东东<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;msgEvent.emit(&#x27;亮亮&#x27;)&quot;</span>&gt;</span>亮亮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;msgEvent.emit(&#x27;然然&#x27;)&quot;</span>&gt;</span>然然<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//子组件中注册间谍事件并声明Output传参</span><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My05Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <span class="hljs-meta">@Output</span>()msgEvent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>()<br> <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>（根）核型组件中的设置 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!--根组件中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-father</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-father</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h5 id="服务">服务</h5><p>angular中利用服务实现状态管理，在组件之间共享数据</p><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ng g s name 生成名为name的服务，类为NameService</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>(&#123;<br>  <span class="hljs-attr">providedIn</span>: <span class="hljs-string">&#x27;root&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameService</span> &#123;<br><span class="hljs-comment">//nameS下的names属性 nameS.names</span><br>  names =[<span class="hljs-string">&#x27;亮亮&#x27;</span>,<span class="hljs-string">&#x27;然呢&#x27;</span>,<span class="hljs-string">&#x27;东东&#x27;</span>]<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//在组件ts文件中 注册服务</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My06Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <br>  <span class="hljs-comment">//声明属性 来保存传入的服务 </span><br>  <span class="hljs-comment">//只有属性才能在html中使用  ：类型给VScode看，能够解析</span><br>  <span class="hljs-attr">nameS</span>:<span class="hljs-title class_">NameService</span> <br><br>  <span class="hljs-comment">//声明依赖 要想初始化当前组件必须传入一个 NameService类型的变量</span><br>  <span class="hljs-comment">//变量名是自定义的，最好需要有一定的含义</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">nameS:NameService</span>) &#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">nameS</span> = nameS<br>  &#125;<br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//语法糖写法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My06Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <br>  <span class="hljs-comment">//声明属性 来保存传入的服务 </span><br>  <span class="hljs-comment">//只有属性才能在html中使用  ：类型给VScode看，能够解析</span><br><br>  <span class="hljs-comment">//声明依赖 要想初始化当前组件必须传入一个 NameService类型的变量</span><br>  <span class="hljs-comment">//变量名是自定义的，最好需要有一定的含义</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> nameS:NameService</span>) &#123;  <span class="hljs-comment">//加上public</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">nameS</span> = nameS<br>  &#125;<br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p><h4 id="网络请求">4.网络请求</h4><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Angular 中自带 HttpClient模块</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">HttpClientModule</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/common/http&#x27;</span>  <span class="hljs-comment">//加载网络模块</span><br><span class="hljs-comment">//下方imports中</span><br><span class="hljs-attr">imports</span>:[<span class="hljs-title class_">HttpClientModule</span>]<br></code></pre></td></tr></table></figure></p><p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript">res!:<span class="hljs-title class_">Result</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> http:HttpClient</span>) &#123;<br>    <span class="hljs-keyword">let</span> url = <span class="hljs-string">&quot;http://localhost:8082/server&quot;</span><br>    <span class="hljs-keyword">let</span> body = <span class="hljs-string">&#x27;pn0=1&#x27;</span><br>    <span class="hljs-keyword">let</span> options =&#123;<br>      <span class="hljs-attr">headers</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>(&#123;<br>        <span class="hljs-comment">//内容类型： 代表参数格式是字符串类型</span><br>        <span class="hljs-string">&#x27;content-type&#x27;</span>:<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>      &#125;)<br>    &#125;<br>    <span class="hljs-comment">// @ts-ignore</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">http</span>.<span class="hljs-title function_">get</span>(url).<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">res:Result</span>)=&gt;</span>&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">name</span>)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">res</span> = res<br>    &#125;)<br>   &#125;<br><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Result</span>&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver（四 其他）</title>
    <link href="/2022/07/09/Geoserver4/"/>
    <url>/2022/07/09/Geoserver4/</url>
    
    <content type="html"><![CDATA[<h3 id="一wms-问题">一、WMS 问题</h3><ul><li><p><ahref="https://www.osgeo.cn/geoserver-user-manual/services/wms/reference.html">WMS参考</a></p><span id="more"></span></li></ul><h5 id="getcapabilities">1. GetCapabilities</h5><ul><li>``` http://localhost:8080/geoserver/wms? service=wms&amp; //服务名称version=1.1.1&amp;//服务版本 request=GetCapabilities//请求功能<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><br>+ 有三个参数传递给WMS服务器， `<span class="hljs-attr">service</span><span class="hljs-operator">=</span>wms` ， `<span class="hljs-attr">version</span><span class="hljs-operator">=</span><span class="hljs-number">1.1</span><span class="hljs-number">.1</span>` 和 `<span class="hljs-attr">request</span><span class="hljs-operator">=</span>GetCapabilities` . 这个 `service` 参数告诉WMS服务器即将发出WMS请求。这个 `version` 参数引用正在请求的WMS版本。这个 `request` 参数指定getCapabilities操作。<br><br><span class="hljs-meta">##### 2. GetMap</span><br><br>+ ```<br><span class="hljs-symbol">  http:</span><span class="hljs-comment">//localhost:8080/geoserver/wms?</span><br>  <span class="hljs-attr">request</span><span class="hljs-operator">=</span>GetMap <span class="hljs-comment">//请求功能</span><br>  <span class="hljs-variable">&amp;service</span>=WMS<span class="hljs-comment">//服务名称</span><br>  <span class="hljs-variable">&amp;version</span>=<span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-comment">//服务版本</span><br>  <span class="hljs-variable">&amp;layers</span>=topp%<span class="hljs-number">3</span>Astates<br>  <span class="hljs-variable">&amp;styles</span>=population<br>  <span class="hljs-variable">&amp;srs</span>=EPSG%<span class="hljs-number">3</span>A4326 <span class="hljs-comment">// SRS 坐标</span><br>  <span class="hljs-variable">&amp;bbox</span>=<span class="hljs-number">-145.15104058007</span>,<span class="hljs-number">21.731919794922</span>,<span class="hljs-number">-57.154894212888</span>,<span class="hljs-number">58.961058642578</span>&amp;<br>  <span class="hljs-variable">&amp;width</span>=<span class="hljs-number">780</span><br>  <span class="hljs-variable">&amp;height</span>=<span class="hljs-number">330</span><br>  <span class="hljs-variable">&amp;format</span>=image%<span class="hljs-number">2F</span>png<br></code></pre></td></tr></table></figure></li></ul><h5 id="getfeatureinfo">3.GetFeatureInfo</h5><ul><li><p>请求XML</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:8080/geoserver/wms?</span><br><span class="hljs-attr">request</span><span class="hljs-operator">=</span>GetFeatureInfo<br><span class="hljs-variable">&amp;service</span>=WMS<br><span class="hljs-variable">&amp;version</span>=<span class="hljs-number">1.1</span><span class="hljs-number">.1</span><br><span class="hljs-variable">&amp;layers</span>=topp%<span class="hljs-number">3</span>Astates<br><span class="hljs-variable">&amp;styles</span>=<br><span class="hljs-variable">&amp;srs</span>=EPSG%<span class="hljs-number">3</span>A4326<br><span class="hljs-variable">&amp;format</span>=image%<span class="hljs-number">2F</span>png<br><span class="hljs-variable">&amp;bbox</span>=<span class="hljs-number">-145.151041</span>%<span class="hljs-number">2</span>C21<span class="hljs-number">.73192</span>%<span class="hljs-number">2</span>C<span class="hljs-number">-57.154894</span>%<span class="hljs-number">2</span>C58<span class="hljs-number">.961059</span><br><span class="hljs-variable">&amp;width</span>=<span class="hljs-number">780</span><br><span class="hljs-variable">&amp;height</span>=<span class="hljs-number">330</span><br><span class="hljs-variable">&amp;query_layers</span>=topp%<span class="hljs-number">3</span>Astates<br><span class="hljs-variable">&amp;info_format</span>=text%<span class="hljs-number">2F</span>html<br><span class="hljs-variable">&amp;feature_count</span>=<span class="hljs-number">50</span><br><span class="hljs-variable">&amp;x</span>=<span class="hljs-number">353</span><br><span class="hljs-variable">&amp;y</span>=<span class="hljs-number">145</span><br><span class="hljs-variable">&amp;exceptions</span>=application%<span class="hljs-number">2F</span>vnd.ogc.se_xml<br></code></pre></td></tr></table></figure></li><li><p>请求GeoJson</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:8080/geoserver/wms?</span><br><span class="hljs-variable">&amp;</span>INFO_FORMAT=application/json<br><span class="hljs-variable">&amp;</span>REQUEST=GetFeatureInfo<br><span class="hljs-variable">&amp;</span>EXCEPTIONS=application/vnd.ogc.se_xml<br><span class="hljs-variable">&amp;</span>SERVICE=WMS<br><span class="hljs-variable">&amp;</span>VERSION=<span class="hljs-number">1.1</span><span class="hljs-number">.1</span><br><span class="hljs-variable">&amp;</span>WIDTH=<span class="hljs-number">970</span><span class="hljs-variable">&amp;</span>HEIGHT=<span class="hljs-number">485</span><span class="hljs-variable">&amp;</span>X=<span class="hljs-number">486</span><span class="hljs-variable">&amp;</span>Y=<span class="hljs-number">165</span><span class="hljs-variable">&amp;</span>BBOX=<span class="hljs-number">-180</span>,<span class="hljs-number">-90</span>,<span class="hljs-number">180</span>,<span class="hljs-number">90</span><br><span class="hljs-variable">&amp;</span>LAYERS=COUNTRYPROFILES:grp_administrative_map<br><span class="hljs-variable">&amp;</span>QUERY_LAYERS=COUNTRYPROFILES:grp_administrative_map<br><span class="hljs-variable">&amp;</span>TYPENAME=COUNTRYPROFILES:grp_administrative_map<br></code></pre></td></tr></table></figure></li></ul><h5 id="describe-layer">4.Describe Layer</h5><ul><li><pre><code class="hljs">  http://localhost:8080/geoserver/wms?service=WMS  &amp;version=1.1.1  &amp;request=DescribeLayer  &amp;layers=sf:roads,topp:tasmania_roads,nurc:mosaic  &amp;outputFormat=application/json</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver（三 发布与服务）</title>
    <link href="/2022/07/05/Geoserver3/"/>
    <url>/2022/07/05/Geoserver3/</url>
    
    <content type="html"><![CDATA[<h3 id="一发布shapefile文件">一、发布Shapefile文件</h3><span id="more"></span><h6 id="shapefile实际上是文件的集合.shp.dbf.shx.prj">1.Shapefile实际上是文件的集合[.shp、.dbf、.shx、.prj]</h6><ul><li>同一个shapefile的文件最好放在同一个目录中</li><li>缺少.prj文件，Geoserver可能无法加载shapefile</li></ul><h6 id="创建工作区空间以后的内容都可以在该工作空间中发布">2.创建工作区(空间)，以后的内容都可以在该工作(空间)中发布</h6><h6 id="点击左侧-数据--数据存储-添加新的数据仓库">3. 点击左侧数据--&gt;数据存储 添加新的数据仓库</h6><ol type="1"><li>新建数据源--&gt;矢量数据源--&gt;shapefile(.shp)文件</li><li>字符集<ul><li>英文：默认</li><li>中文: GBK</li><li><img src="/img/Geoserver3_2.png" /></li></ul></li></ol><h6 id="发布">4. 发布</h6><ul><li><p>默认存储完直接跳转到发布</p></li><li><p>在图层中选择刚刚存储的图层点击发布</p></li></ul><h6 id="编辑发布的图层信息">5. 编辑发布的图层信息</h6><ul><li>关键字：提供快速索引</li><li><img src="/img/Geoserver3_3.png" /></li></ul><h6 id="预览">6. 预览</h6><ul><li>图层预览: OpenLayers</li></ul><h3 id="二发布geotiff-文件">二、发布GeoTIFF 文件</h3><p>与发布Shapefile文件类似</p><h3 id="三发布postgis">三、发布PostGIS</h3><h3 id="四发布切片服务">四、发布切片服务</h3><ul><li>参考 <a href="#WMS">WMS</a>和<a href="#WTMS">WMTS</a></li></ul><h3 id="五地图服务">五、地图服务</h3><h4 id="preface">0. Preface</h4><ul><li><p>地理数据形式： 矢量、栅格</p></li><li><p>矢量(Vector)</p><ul><li><p>shp文件 ，核心：点坐标</p></li><li><p>在数据库中的存储形式：表</p></li><li><p>e.g. arcgis中矢量数据的属性表dbf</p></li><li><p>和前端的交互方式：</p><ol type="1"><li>json格式，地理数据常用Geojson格式<ul><li>GeoJSON的强大之处在于它可以作为一种数据格式媒介，和其它几种数据格式进行相互转化，他也可以直接和shape格式的文件做转化。非常方便。而且它保存的数据是完整的，数据体积也很小。</li></ul></li><li>xml格式，地理数据常用KML，GML格式</li></ol></li></ul></li><li><p>栅格(Grid)</p><ul><li><p>Grid、Rater、Tiff文件，类似图片。</p></li><li><p>可以概括为Image类型的</p></li></ul></li></ul><h4 id="wms"><span id="WMS">1.WMS</span></h4><ul><li><p>全称：Web Map Service 网络地图服务 <ahref="https://docs.geoserver.org/stable/en/user/services/wms/index.html">官方文档</a></p></li><li><p>它是利用具有地理空间位置信息的数据制作地图，其中将地图定义为地理数据的可视化表现。WMS定义了一个规范的HTTP接口，支持标准HTTP协议的GET和POST请求，但多基于GET方式进行服务请求。能够根据用户请求返回相应的地图（包括<strong>PNG，GIF，JPEG</strong>等栅格形式或者是<strong>SVG和WEBCGM</strong>等矢量形式）。</p></li><li><p>WMS提供如下操作:</p><ol type="1"><li><p>GetCapabitities</p><p>返回服务级元数据，它是对服务信息内容和要求参数的一种描述。</p></li><li><p>GetMap</p><p>返回一个地图影像，其地理空间参考和大小参数是明确定义了的。</p></li><li><p>GetFeatureInfo</p><p>返回显示在地图上的某些特殊要素的信息。</p></li><li><p>GetLegendGraphic</p><p>返回地图的图例信息。</p></li></ol></li><li><p>简单概括：<strong>图片格式</strong>的地图被封装成了叫做WMS的服务。把你的数据源想方设法转化成一张和你数据源长得一样的图片。</p></li><li><p>但是无论怎么放大缩小，它就只是一张完整的图片。</p></li></ul><h4 id="wfs">2.WFS</h4><ul><li><p>全称：Web Feature Service Web矢量要素服务 <ahref="https://docs.geoserver.org/stable/en/user/services/wfs/index.html">官方文档</a></p></li><li><p>矢量类型的数据源被封装成了WFS服务。服务返回矢量级的GML编码，可以对矢量进行增加、修改、删除等事务操作。</p></li><li><p>优点</p><ol type="1"><li>矢量图形不会随着放大程度的改变而失真，图片做不到。</li><li>.两要素方便与交互和编辑，修改形状等，这一点图片也做不到。</li></ol></li><li><p>WFS提供如下操作</p><ol type="1"><li>GetCapabilities获取WFS服务的元数据（介绍服务中的要素类和支持的操作）</li><li>DescribeFeatureType获取WFS服务支持的要素类的定义（要素类的元数据，比如要素包含哪些字段）</li><li>GetFeature 获取要素数据</li><li>GetGmlObject 通过XLink获取GML对象</li><li>Transaction 创建、更新、删除要素数据的事务操作</li><li>LockFeature 在事务过程中锁定要素。</li></ol></li></ul><h4 id="wcs">3.WCS</h4><ul><li><p>全称：Web Coverage Service Web栅格服务 <ahref="https://docs.geoserver.org/stable/en/user/services/wcs/index.html">官方文档</a></p></li><li><p>它将包含地理位置值的地理空间数据作为“<strong>栅格或者说“覆盖”（Coverage）</strong>”在网上相互交换。</p></li><li><p>WCS提供如下操作</p><ol type="1"><li><p>GetCapabilities</p><p>返回描述服务和数据集的XML文档。</p></li><li><p>GetCoverage</p><p>是在GetCapabilities确定什么样的查询可以执行、什么样的数据能够获取之后执行的，它使用通用的栅格格式返回地理位置的值或属性。</p></li><li><p>DescribeCoverageType</p><p>允许客户端请求由具体的WCS服务器提供的任一覆盖层的完全描述。</p></li></ol></li></ul><h4 id="tms">4.TMS</h4><ul><li>全称 ：Tile Map Service（OSGeo的）切片地图服务规范，提供的操作允许用户按需访问切片地图。将切片保存到了本地，使得访问速度更快，还支持修改坐标系，是一种纯RESTful的服务。</li><li>Tile（切片）思想<ul><li>使用瓦片地图时，我们看到的是一张铺满整个屏幕的大的地图图片。实际上，这张大的图片是多个尺寸相同（通常是256*256像素）的小图片按照既定规则无缝拼接而成的，这些小图片就是瓦片。瓦片按照如下图所示的金字塔结构组织，每张瓦片都可通过级别、行列号唯一标记。在平移地图、缩放地图时，浏览器根据金字塔规则，计算出所需的瓦片，从瓦片服务器获取并拼接。</li><li>由于瓦片是静态的图片，可预先生成，通过缓存和CDN技术，瓦片服务器可提供高效的瓦片读取服务。此外，浏览器并行获取和显示多张小图片，比获取和显示一张大图片要高效的多。显示地图变成和显示图片一样简单，这也是互联网地图能够承载亿级规模用户的原因。</li></ul></li></ul><h4 id="wmts"><span id="WMTS">5.WMTS</span></h4><ul><li>全称：Web Map Tile Service Web地图瓦片服务</li><li>WMTS提供了一种采用<strong>预定义图块方法</strong>发布数字地图服务的标准化解决方案。</li><li>WMTS弥补了WMS不能提供分块地图的不足，在服务器端把地图切割为一定不同级别大小的瓦片（瓦片矩阵集合），对客户端预先提供这些预定义的瓦片，将更多的数据处理操作如叠加和切割等放在客户端，降低服务器端的载荷。</li><li>WMTS牺牲了提供定制地图的灵活性，代之以通过提供静态数据（基础地图）来增强伸缩性，这些静态数据的范围框和比例尺被限定在各个图块内。</li><li>这些固定的图块集使得对WMTS服务的实现可以使用一个仅简单返回已有文件的Web服务器即可，同时使得可以利用一些标准的诸如分布式缓存的网络机制实现伸缩性。</li><li>概括：WMTS比WMS好的地方就是它能够加快加载速度，提升加载效率。可是它同时也失去了灵活性，你看的每一个区域都是被提前划分好的，限制在固定条带内的。</li><li>WMTS提供如下操作：<ol type="1"><li>GetCapabilities：获取WMTS的能力文档（即元数据文档），里面包含服务的所有信息</li><li>GetTile：获取地图瓦片。该操作根据客户端发出的请求参数在服务端进行检索，服务器端返回地图瓦片图像。</li><li>GetFeatureInfo：通过在WMTS图层上指定一定的条件，返回指定的地图瓦片内容对应的要素信息</li></ol></li></ul><h4 id="wmts与tms对比">WMTS与TMS对比</h4><p><ahref="https://blog.csdn.net/df1445/article/details/104997308">TMS和WMTS大概对比</a></p><h4 id="概括">概括</h4><p>概括地来说：</p><ol type="1"><li>WMS：是一种<strong>动态地图</strong>服务，根据用户请求返回相应地图数据的可视化结果，实时切片，因此速度较慢。是GeoServer发布地图时较为常用的服务。</li><li>WMTS：是一种采用<strong>预定义图块方法</strong>发布数字地图服务，将地图切分成瓦片矩阵集合，牺牲了提供定制地图的灵活性，代之以通过提供静态数据（基础地图）来增强伸缩性，这些静态数据的范围框和比例尺被限定在各个图块内，但是提升了服务速度。例如我国的天地图就是使用这一服务进行组织的，详情见我另一篇博客：<ahref="https://www.cnblogs.com/ssjxx98/p/10877692.html">关于天地图的瓦片下载</a>。</li><li>WFS：是为了返回<strong>纯地理数据</strong>而设计的，它不包含任何关于绘制数据的建议，它提供了对矢量的<strong>增加、修改、删除</strong>等事务操作。</li><li>WCS：是面向<strong>空间影像数据</strong>服务，它将包含地理位置值的地理空间数据作为“<strong>栅格或者说“覆盖”（Coverage）</strong>”在网上相互交换。</li><li>WPS：我理解的是一种提供和执行<strong>地理空间处理</strong>的服务，用于在web上发起空间运算操作。</li><li>WMSC：是一种预先缓存数据的方法，以提升地图请求的速度。目前已被WMTS和TMS取代。</li><li>TMS：也是一种瓦片地图服务，与WMTS类似，本质上遵循同样的切片规则。</li></ol><figure><img src="/img/Geoserver3_1.png" alt="Relation" /><figcaption aria-hidden="true">Relation</figcaption></figure><h4 id="参考资料">参考资料</h4><p><ahref="https://zhuanlan.zhihu.com/p/398998331">几种互联网地图服务背后的解读(WMS，WFS，WMTS，TMS)</a></p><p><ahref="https://blog.csdn.net/oYinHeZhiGuang/article/details/115731622">Web地图服务规范(WMS、WMTS、TMS)简析</a></p><p><ahref="https://younghappy.blog.csdn.net/article/details/85630292?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4-85630292-blog-112880522.pc_relevant_aa2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4-85630292-blog-112880522.pc_relevant_aa2&amp;utm_relevant_index=9">常见地图服务：WMS,WMS-C,TMS,WMTS,WFS,WCS,WPS</a></p><p><ahref="https://blog.csdn.net/Tmraz/article/details/108749365#:~:text=服务操作列表,WMTS服务支持RESTful访问，其接口包括GetCapabilities、GetTile和GetFeatureInfo3个操作，这些操作允许用户访问切片地图。">WMS、WFS、WMTS服务接口说明</a></p><p><ahref="https://www.cnblogs.com/ssjxx98/p/12531525.html">WMS、WFS、WCS、WPS、WMTS、WMSC、TMS等常见地图服务的区别</a></p><p><ahref="https://blog.csdn.net/ranran_5300/article/details/50435086">WMSWFS WCS 的区别</a></p><h3 id="注意事项">注意事项：</h3><ol type="1"><li><p>发布服务都是要在工作区里面的</p></li><li><p>基本流程</p><pre><code class=" mermaid">graph LR    准备好数据源 --&gt; 创建工作区--&gt; 创建数据存储 --&gt; 数据源发布图层 --&gt; 图层预览-客户端调用</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver（二 入门）</title>
    <link href="/2022/07/05/GeoServer2/"/>
    <url>/2022/07/05/GeoServer2/</url>
    
    <content type="html"><![CDATA[<h3 id="一从tomcat启动服务">一、从TomCat启动服务</h3><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">D:\\geo\\tomcat8\\bin <span class="hljs-comment">//文件夹</span><br>cmd<br>startup<br></code></pre></td></tr></table></figure><h5 id="登录">登录</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">UserName: admin<br>PassWord: geoserver<br></code></pre></td></tr></table></figure><h3 id="二界面">二、界面</h3>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver（一 安装）</title>
    <link href="/2022/07/05/Geoserver/"/>
    <url>/2022/07/05/Geoserver/</url>
    
    <content type="html"><![CDATA[<h2 id="section"></h2><h4 id="一什么是geoserver">一、什么是GeoServer</h4><span id="more"></span><p>用于专门分享地理空间数据的开源服务器</p><h4 id="二安装">二、安装</h4><ol type="1"><li><p>安装环境需要Java 推荐安装JDK <ahref="https://repo.huaweicloud.com/java/jdk/">华为JDK镜像</a></p></li><li><p>下载TomCat <a href="https://tomcat.apache.org/">TomCat官方网站Apache Tomcat® - Welcome!</a></p><p>Tomcat简单的说就是一个运行JAVA的网络服务器，底层是Socket的一个程序，它也是JSP和Serlvet的一个容器。</p><ul><li><p>JSP(JavaServer Page)：JSP是一种Java servlet，主要用于实现Javaweb应用程序的用户界面部分。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p></li><li><p>Servlet: Java Servlet 是运行在 Web服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p></li></ul><figure><img src="/img/tomcat.jpg" alt="tomcat和servlet在网络中的位置" /><figcaptionaria-hidden="true">tomcat和servlet在网络中的位置</figcaption></figure></li><li><p>下载Geoserver</p><p><ahref="%5BGeoServer%5D(https://geoserver.org/)">GeoServer官方网站</a></p></li></ol><h4 id="三配置">三、配置</h4><ol type="1"><li>Java、TomCat、GeoServer的版本匹配问题参考如下，三者的安装版本必须要匹配，不然容易出问题</li></ol><figure><img src="/img/Geoserver_2.png" alt="Java JDK与Geoserver版本" /><figcaption aria-hidden="true">Java JDK与Geoserver版本</figcaption></figure><figure><img src="/img/Geoserver_3.png" alt="TomCat版本" /><figcaption aria-hidden="true">TomCat版本</figcaption></figure><ol start="2" type="1"><li><p>Java环境变量的配置</p><ul><li>系统变量</li></ul><figure><img src="/img/Geoserver_4.png" alt="系统变量" /><figcaption aria-hidden="true">系统变量</figcaption></figure><ul><li>系统变量中Path</li></ul><figure><img src="/img/Geoserver_5.png" alt="Path" /><figcaption aria-hidden="true">Path</figcaption></figure></li><li><p>TomCat安装</p><ul><li>一路Next</li></ul></li><li><p>GeoServer安装</p><ol type="1"><li>Windows installer.exe文件安装 （不推荐）</li><li>通过war包导入TomCat安装（推荐）<ul><li>将war包放入tomcat</li><li>运行bin/startup.bat</li><li>内部网址:localhost:端口号/geoserver</li></ul></li></ol></li></ol><h4 id="四遇到的问题">四、遇到的问题</h4><ol type="1"><li><p>运行startup.bat程序秒退，服务不能成功启动</p><ul><li>解决方法<ul><li>检查环境变量是否配置好 控制台输入 java、Java-version、javac测试</li><li>检查Java JDK、TomCat、GeoServer版本是否对应 e.g. JDK8 TomCat8</li></ul></li></ul></li><li><p>运行startup.bat中文乱码问题</p><ul><li><p>windows下的cmd的默认编码是GBK编码，Tomcat控制台默认输出设置为UTF-8编码</p></li><li><p>解决方法</p><ul><li><p>（方式一）修改CMD命令行的编码格式为UTF-8</p></li><li><p>（方式二）将tomcat控制台日志输出编码格式更改为GBK，修改tomcat根目录下conf/logging.properties文件中的ConsoleHandler.encoding=utf-8，这种方式能解决cmd控制台中文乱码，但<code>不建议使用</code>。</p></li><li><p><strong>因为更改了tomcat默认编码，如果我们使用idea启动tomcat，idea的默认编码不是GBK，就会同样产生idea控制台下tomcat乱码问题</strong></p></li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 在GIS中的使用(一)</title>
    <link href="/2022/06/27/pythonInGIS/"/>
    <url>/2022/06/27/pythonInGIS/</url>
    
    <content type="html"><![CDATA[<h4 id="preface">1.Preface</h4><ul><li><p>Python之所以强大是因为能用（依赖）的库多罢了</p></li><li><p>但是较为繁琐的是环境的搭建、配置和维护</p><ul><li>使用初期 包、库的安装</li><li>库的更新、Python版本的更新也会带来问题<ul><li>新版本库不支持老Python</li><li>新版本Python不支持老库</li></ul></li><li>语法规范？感觉像是双刃剑<ul><li>写起来方便</li><li>有时候理解需要一点时间反应</li></ul></li><li>Python运行有时候还是比较慢的</li></ul></li><li><p>可能优点是？</p><ul><li>在Win和Mac双系统切换的时候，都能正常使用</li><li>不像某些专业软件比如ArcGIS只有Win版</li><li>有相同的安装环境就能跑</li><li>网上可复用的代码块较多、案例较多</li><li>弥补局限性，代码代替多次操作，Arcpy代替ModelBuilder</li></ul></li></ul><h4 id="有关环境">2.有关环境</h4><h5 id="使用工具">1.使用工具</h5><ul><li>Anacoda3 2022.5 MacOSX</li><li>Spyder 5.1.5</li><li>Python 3.8.13</li></ul><h5 id="配置流程">2.配置流程</h5><ul><li><p>安装Anaconda <ahref="https://www.anaconda.com/">官网下载</a></p></li><li><p>Environments中配置自己的编程环境 OSGIS</p><ul><li>Create 创建环境</li><li>Import 导入环境</li><li>Backup 备份环境</li></ul></li><li><p>安装库</p><ul><li><p>方法1: 环境下利用终端 conda install 或者 pip install</p><ul><li>优点 直接</li><li>缺点 非可视化</li></ul></li><li><p>方法2: 更新Channels 从 conda Channels中导入</p><ul><li><p>问题:文件夹写入权限问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">NotWritableError: The current user does not have write permissions to a required path.<br></code></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">cd /users/o1/opt   <span class="hljs-comment">//操作opt文件夹下的anaconda3</span><br>sū<span class="hljs-keyword">do</span> chown -R o1 anaconda3 <span class="hljs-comment">//赋予权限</span><br></code></pre></td></tr></table></figure></li><li><p>更新具体Channels</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C">conda config --get channels <span class="hljs-comment">//获取当前环境OSGIS下Channels</span><br>conda config --add channels conda-forge <span class="hljs-comment">//有强大的社区支持，提供了大多数安装包，并且更新及时</span><br>conda config --remove-key channels <span class="hljs-comment">//删除Channel</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br>pip config <span class="hljs-built_in">set</span> global.index-url https:<span class="hljs-comment">//mirrors.ustc.edu.cn/pypi/web/simple</span><br>conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br><span class="hljs-meta"># activate my environment</span><br>conda activate OSGIS<br><span class="hljs-meta"># update all packages <span class="hljs-keyword">if</span> needed</span><br>conda update --all<br><span class="hljs-meta"># set channel priority as strict 设置优先级</span><br>conda config --<span class="hljs-built_in">set</span> channel_priority strict<br></code></pre></td></tr></table></figure></li></ul></li><li><p>常见的库</p><ul><li>numpy</li><li>GDAL</li></ul></li></ul></li></ul><h4 id="基本流程">3. 基本流程</h4><p>读取、处理、写入(更新)</p>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>GIS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO设置</title>
    <link href="/2022/06/26/Hexo%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/06/26/Hexo%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="背景设置">1.背景设置</h4><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">https:<span class="hljs-comment">//blog.csdn.net/weixin_43828250/article/details/114379300</span><br></code></pre></td></tr></table></figure><h4 id="图片插入的包">2.图片插入的包</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">npm install hexo-image-link --save<br>npm uninstall hexo-renderer-marker --save  #卸载 marked<br>npm install hexo-renderer-markdown-it --save  #安装markdown-it<br>https:<span class="hljs-comment">//blog.csdn.net/rentonhe/article/details/123666769</span><br></code></pre></td></tr></table></figure><p>或者直接使用 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">&#123;% asset_img example.png This is an example image %&#125; <br></code></pre></td></tr></table></figure> + example.jpg放在同目录下同名资源文件夹中+ 见<ahref="https://www.freesion.com/article/9410594097/">HEXO基本操作</a><!--more--></p><h4 id="设置paddingmargin等">3.设置Padding、Margin等</h4><ul><li>在浏览器中查看Layout和对应的代码块</li><li>到CSS文件中找</li></ul><h4 id="关于本地端口占用">4.关于本地端口占用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">Error: listen EADDRINUSE: address already in use :::<span class="hljs-number">4000</span><br>sudo lsof -i:端口号<br>sudo kill <span class="hljs-number">-9</span> pid<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象、Web API</title>
    <link href="/2022/06/26/%E5%AF%B9%E8%B1%A1%E3%80%81WebAPI/"/>
    <url>/2022/06/26/%E5%AF%B9%E8%B1%A1%E3%80%81WebAPI/</url>
    
    <content type="html"><![CDATA[<h3 id="对象web-api">对象、Web API</h3><h4 id="对象">1. 对象</h4><h6 id="构造">构造</h6><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<span class="hljs-comment">//空对象</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;01&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<br>    <span class="hljs-attr">sayHi</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hi~&#x27;</span>);<br>    &#125;<br>&#125;<span class="hljs-comment">//名称，年龄，匿名函数,属性逗号隔开</span><br><br><span class="hljs-comment">//第二种方法 Object</span><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;01&#x27;</span>;<br>obj.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br>obj.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;SayHi&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//第三种方法 构造函数 对象里一些相同的属性和方法抽象出来封装到函数里</span><br><span class="hljs-keyword">function</span> 构造函数名(参数)&#123;    <br>    <span class="hljs-variable language_">this</span>.属性 = 参数；<br>    <span class="hljs-variable language_">this</span>.方法 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> sth = <span class="hljs-keyword">new</span> 构造函数名(参数) <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sth.属性)<br><span class="hljs-comment">////构造函数名首字母要大写、用构造函数必须要new、属性和方法之前必须使用this</span><br><br></code></pre></td></tr></table></figure><h6 id="使用">使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">uname</span>)<span class="hljs-comment">//对象.属性名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-string">&#x27;age&#x27;</span>])<span class="hljs-comment">//对象[&#x27;属性名&#x27;]</span><br>obj.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">//对象名.方法名</span><br><span class="hljs-comment">//遍历属性</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> 对象)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(对象[key])<span class="hljs-comment">//输出属性值</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="常用方法">常用方法</h6><ol type="1"><li>Math</li><li>Date</li><li>String</li><li>Array</li></ol><h6 id="甄别">甄别</h6><ol type="1"><li><p>函数和方法：都是实现某种功能，在外面的叫函数，在对象里面的叫方法</p></li><li><p>构造函数和对象</p><p>构造函数是泛指的某一大类</p><p>对象是一个具体的事物，是构造函数的实例化</p></li></ol><h4 id="web-api">2. Web API</h4><p>应用程序编程接口，实现页面交互功能 + BOM 浏览器功能 交互效果 + alert+ DOM树 页面元素 + 文档页面从上往下加载得现有标签，script脚本写在标签下</p><h5 id="dom">1.DOM</h5><h6 id="获取元素">获取元素</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>() <span class="hljs-comment">//返回的是一个元素对象Object</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
