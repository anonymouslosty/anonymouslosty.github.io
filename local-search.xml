<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++ 进阶笔记</title>
    <link href="/2023/03/31/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/31/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/C++%20%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="C-进阶笔记"><a href="#C-进阶笔记" class="headerlink" title="C++进阶笔记"></a>C++进阶笔记</h3><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>​    数组是具有一定顺序关系的若干对象的集合。</p><p>​    <code>array[N]</code>  数组的下标从<code>0</code>开始。</p><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><p>​    <strong>数据类型 标识符 [常量表达式1] [常量表达式2]</strong></p><p>​    数据类型: 整型、浮点型、<strong>结构体</strong>、<strong>类</strong>等</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>​    <strong>数组名 [常量表达式1] [常量表达式2]</strong></p><h6 id="范围for循环"><a href="#范围for循环" class="headerlink" title="范围for循环"></a>范围for循环</h6><p>​    对给定序列中每一个元素按序列中元素的顺序逐一访问，配合<code>auto</code>自动判断元素类型。用来实现数组元素的快速遍历。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp;e : a)&#123;<br>    cout &lt;&lt; e &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="下标迭代for循环"><a href="#下标迭代for循环" class="headerlink" title="下标迭代for循环"></a>下标迭代for循环</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>    cout &lt;&lt; b[i] &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="关于二维数组"><a href="#关于二维数组" class="headerlink" title="关于二维数组"></a>关于二维数组</h5><p>​    C++中二维数组被当作一维的数组，<code>int m[2][3]</code>可以看作大小是<code>2</code>，每个元素都是一个大小为<code>3</code>，类型为<code>int</code>类型的数组。</p><h5 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> a[<span class="hljs-number">3</span>]= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br><span class="hljs-type">int</span> a[][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-type">int</span> a[][<span class="hljs-number">3</span>] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br><br><span class="hljs-comment">//对象数组 注意有缺省值的时候，需要适当改动默认构造函数</span><br>Location loc[<span class="hljs-number">2</span>] =&#123;<span class="hljs-built_in">Location</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>),<span class="hljs-built_in">Location</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)&#125;<br><br></code></pre></td></tr></table></figure><h5 id="数组作为函数参数"><a href="#数组作为函数参数" class="headerlink" title="数组作为函数参数"></a>数组作为函数参数</h5><p>​    传递的是<strong>地址</strong>。数组作为参数时，函数里一般不指定第一维的大小。</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>​    <strong>注意.h文件的 def</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Point.h 类的定义</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _POINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _POINT_H</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>();<br>~<span class="hljs-built_in">Point</span>();<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">movePoints</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span></span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Point.cpp</span><br><span class="hljs-comment">//Point.h 类的具体实现</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Point.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>Point::<span class="hljs-built_in">Point</span>():<span class="hljs-built_in">x</span>(<span class="hljs-number">0</span>),<span class="hljs-built_in">y</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Deafult constructor called.&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>Point::~<span class="hljs-built_in">Point</span>() &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Destructor called&quot;</span> &lt;&lt; endl;<br>&#125;<br><br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y):<span class="hljs-built_in">x</span>(x),<span class="hljs-built_in">y</span>(y)&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Constructor called&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Point::movePoints</span><span class="hljs-params">(<span class="hljs-type">int</span> newX, <span class="hljs-type">int</span> newY)</span> </span>&#123;<br>x = newX;<br>y = newY;<br>cout &lt;&lt; <span class="hljs-string">&quot;Move to new Points(&quot;</span> &lt;&lt; newX &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; newY &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//主函数 .cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Point.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Point a[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)&#123;<br>a[i].<span class="hljs-built_in">movePoints</span>(i + <span class="hljs-number">10</span>, i + <span class="hljs-number">11</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Point.h 类的定义 头文件</span><br><span class="hljs-comment">//注意使用了友元函数 linefit函数中，可以直接访问 x,y</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _Point_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _Point_H</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">float</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">float</span> y = <span class="hljs-number">0</span>) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> x; &#125;<br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> y; &#125;<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">float</span> <span class="hljs-title">lineFit</span><span class="hljs-params">(<span class="hljs-type">const</span> Point points[], <span class="hljs-type">int</span> nPoint)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">float</span> x, y;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//main.cpp</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&quot;Point.h&quot;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//友元函数 直接访问Point的私有属性 x,y</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">lineFit</span><span class="hljs-params">(<span class="hljs-type">const</span> Point points[], <span class="hljs-type">int</span> nPoint)</span> </span>&#123;<br><span class="hljs-type">float</span> avgX = <span class="hljs-number">0</span>, avgY = <span class="hljs-number">0</span>;<br><span class="hljs-type">float</span> lxx = <span class="hljs-number">0</span>, lyy = <span class="hljs-number">0</span>, lxy = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nPoint; i++)&#123;<br>avgX += points[i].x/nPoint;<br>avgY += points[i].y/nPoint;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nPoint; i++)&#123;<br>lxx += (points[i].x - avgX) * (points[i].x - avgX);<br>lyy += (points[i].y - avgY) * (points[i].y - avgY);<br>lxy += (points[i].x - avgX) * (points[i].y - avgY);<br>&#125;<br>cout &lt;&lt; <span class="hljs-string">&quot;This lien can be fitted by y=ax+b.&quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;a=&quot;</span> &lt;&lt; lxy / lxx &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;b=&quot;</span> &lt;&lt; avgY - lxy * avgX / lxx &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">float</span>&gt;(lxy / <span class="hljs-built_in">sqrt</span>(lxx * lyy));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>Point p[<span class="hljs-number">10</span>] = &#123; <span class="hljs-built_in">Point</span>(<span class="hljs-number">6</span>,<span class="hljs-number">10</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">14</span>,<span class="hljs-number">20</span>), <span class="hljs-built_in">Point</span>(<span class="hljs-number">26</span>,<span class="hljs-number">30</span>), <span class="hljs-built_in">Point</span>(<span class="hljs-number">33</span>,<span class="hljs-number">40</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">46</span>,<span class="hljs-number">50</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">54</span>,<span class="hljs-number">60</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">67</span>,<span class="hljs-number">70</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">75</span>,<span class="hljs-number">80</span>),<span class="hljs-built_in">Point</span>(<span class="hljs-number">84</span>,<span class="hljs-number">90</span>), <span class="hljs-built_in">Point</span>(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>) &#125;;<br><span class="hljs-type">float</span> r = <span class="hljs-built_in">lineFit</span>(p, <span class="hljs-number">10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;Line coefficient r=&quot;</span> &lt;&lt; r &lt;&lt; endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a><strong>指针</strong></h4><p>​    <strong>指针</strong>也是一种数据类型，具有指针类型的变量称为<strong>指针变量</strong>，指针变量是用来存放<strong>内存单元地址</strong>的。</p><h5 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h5><p>​    *<em>数据类型 <em>标识符</em></em></p><p>​    <strong>数据类型</strong>可以是任意类型，代表指针所指向的对象的类型。</p><p>​    举例:</p><p>​    <code>int *ptr</code></p><p>​     定义了一个指向<code>int</code>类型数据的指针变量，这个指针的名字是<code>ptr</code>，存放<code>int</code>型数据的地址。</p><h5 id="与地址相关的运算-和-amp"><a href="#与地址相关的运算-和-amp" class="headerlink" title="与地址相关的运算 * 和 &amp;"></a>与地址相关的运算 * 和 &amp;</h5><p>​    ***** 表示获取指针变量所指向的值，一元操作符。</p><p>​    <strong>&amp;</strong> 表示获得一个对象的地址，一元操作符。</p><p>​    <em><strong>注意：</strong></em></p><p>​    ***** 出现在声明语句中，在被声明的变量名之前时，表面声明的是指针。</p><p>​     <code>int *p</code> 声明指针变量<code>p</code></p><p>​    ***** 出现在执行语句中或者声明语句的初值表达式中作为一元运算符时，表示指针所访问的对象的内容。</p><pre><code class="hljs"> `cout&lt;&lt; *p`  打印`p`所指向的内存单元的值</code></pre><p>​    <strong>&amp;</strong> 出现在<strong>变量声明语句</strong>中位于<strong>被声明变量的左边</strong>时，表示声明的是<strong>引用</strong>。</p><p>​    <code>int &amp;rf</code>  表明<code>rf</code>是个引用</p><p>​    <strong>&amp;</strong> 在<strong>给变量赋初值</strong>的时候出现在<strong>等号右边</strong>或者在<strong>执行语句中作为一元运算符出现</strong>时，表示取对象的地址。</p><p>​    <code>int a,b;</code> </p><p>​    <code>int *pa,*pb = &amp;b;</code> 声明指针变量<code>pa、pb</code>，<code>b</code>的地址赋给指针<code>pb</code>.</p><p>​    <code> pa = &amp;a;</code> <code>a</code>的地址赋给指针<code>pa</code>.</p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 基础复习笔记</title>
    <link href="/2023/03/31/C++%20%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/C++%20%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/03/31/C++%20%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/C++%20%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="C-基础复习笔记"><a href="#C-基础复习笔记" class="headerlink" title="C++ 基础复习笔记"></a>C++ 基础复习笔记</h3><h4 id="1、Hello-World"><a href="#1、Hello-World" class="headerlink" title="1、Hello World"></a>1、Hello World</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>    cout&lt;&lt; <span class="hljs-string">&quot;Hello world!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、-别名"><a href="#2、-别名" class="headerlink" title="2、 别名"></a>2、 别名</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-type">double</span> Area,Volume;<br><span class="hljs-keyword">using</span> Area = <span class="hljs-type">double</span>; <span class="hljs-comment">//只能为已有数据类型声明别名</span><br></code></pre></td></tr></table></figure><h4 id="3、-auto与decltype"><a href="#3、-auto与decltype" class="headerlink" title="3、 auto与decltype"></a>3、 auto与decltype</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">1</span>;<br>autp i=<span class="hljs-number">0</span>,pi=<span class="hljs-number">3.14</span>; <span class="hljs-comment">//不行，输入数据只能同一类型</span><br></code></pre></td></tr></table></figure><h4 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs &#123;">double power(double x,int n)&#123;<br>    double val = 1.0;<br>    while(n--)<br>        val*=x;<br>    return val;<br>&#125;<br><br>int power(int x,int y)&#123;<br>//函数重载<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、类与对象"><a href="#5、类与对象" class="headerlink" title="5、类与对象"></a>5、类与对象</h4><h5 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//类的定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH, <span class="hljs-type">int</span> newM, <span class="hljs-type">int</span> newS)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//类中有函数成员需要被频繁调用，代码比较简单的，可以直接在类里面定义(内联函数)</span><br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> hour, minute, second;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="函数成员"><a href="#函数成员" class="headerlink" title="函数成员"></a>函数成员</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//类的定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH, <span class="hljs-type">int</span> newM, <span class="hljs-type">int</span> newS)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//类中有函数成员需要被频繁调用，代码比较简单的，可以直接在类里面定义(内联函数)</span><br>    &#125;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> hour, minute, second;<br>&#125;;<br><br><span class="hljs-comment">//函数成员</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Clock::setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS)</span></span>&#123;<br>    hour = newH;<br>    minute = newM;<br>    secodne = newS;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Clock::showTime</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hour:&quot;</span>&lt;&lt;hour&lt;&lt;<span class="hljs-string">&quot;Minutes:&quot;</span>&lt;&lt;minute&lt;&lt;<span class="hljs-string">&quot;Seconds&quot;</span>&lt;&lt;second&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="内联函数的两种写法"><a href="#内联函数的两种写法" class="headerlink" title="内联函数的两种写法"></a>内联函数的两种写法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>&#123;<br>    <span class="hljs-keyword">public</span>：<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span>&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;这是内联函数的隐式写法&quot;</span>&lt;&lt;<span class="hljs-string">&quot;当代码简单，用的次数比较多的时候可以用内联函数&quot;</span><br>        &#125;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> hour,minute,second;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Clock::func</span><span class="hljs-params">()</span></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;这是内联函数的显式写法&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h5><p>​    作用：在对象被创建时利用特定的值构造对象，将对象初始化为一个特定的状态。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//类的定义</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//默认构造函数</span><br>    <span class="hljs-built_in">Clock</span>();<br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-built_in">Clock</span>(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH, <span class="hljs-type">int</span> newM, <span class="hljs-type">int</span> newS)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> hour, minute, second;<br>&#125;;<br><br>Clock::<span class="hljs-built_in">Clock</span>(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS):<span class="hljs-built_in">hour</span>(<span class="hljs-keyword">new</span>)<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">mian</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>&#123;<br>    <span class="hljs-built_in">Clock</span>();<span class="hljs-comment">//调用默认构造函数</span><br>    <span class="hljs-built_in">Clock</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//调用构造函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="委托构造函数"><a href="#委托构造函数" class="headerlink" title="委托构造函数"></a><strong>委托构造函数</strong></h6><p>​    构造函数 <code>class_c(int, int, int)</code> 首先调用构造函数 <code>class_c(int, int)</code>，该构造函数反过来调用 <code>class_c(int)</code>。 每个构造函数将仅执行其他构造函数不会执行的工作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">class_c</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> max;<br>    <span class="hljs-type">int</span> min;<br>    <span class="hljs-type">int</span> middle;<br><br>    <span class="hljs-built_in">class_c</span>() &#123;&#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max) &#123;<br>        max = my_max &gt; <span class="hljs-number">0</span> ? my_max : <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max, <span class="hljs-type">int</span> my_min) &#123;<br>        max = my_max &gt; <span class="hljs-number">0</span> ? my_max : <span class="hljs-number">10</span>;<br>        min = my_min &gt; <span class="hljs-number">0</span> &amp;&amp; my_min &lt; max ? my_min : <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max, <span class="hljs-type">int</span> my_min, <span class="hljs-type">int</span> my_middle) &#123;<br>        max = my_max &gt; <span class="hljs-number">0</span> ? my_max : <span class="hljs-number">10</span>;<br>        min = my_min &gt; <span class="hljs-number">0</span> &amp;&amp; my_min &lt; max ? my_min : <span class="hljs-number">1</span>;<br>        middle = my_middle &lt; max &amp;&amp; my_middle &gt; min ? my_middle : <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">class_c</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> max;<br>    <span class="hljs-type">int</span> min;<br>    <span class="hljs-type">int</span> middle;<br><br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max) &#123;<br>        max = my_max &gt; <span class="hljs-number">0</span> ? my_max : <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max, <span class="hljs-type">int</span> my_min) : <span class="hljs-built_in">class_c</span>(my_max) &#123;<br>        min = my_min &gt; <span class="hljs-number">0</span> &amp;&amp; my_min &lt; max ? my_min : <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">class_c</span>(<span class="hljs-type">int</span> my_max, <span class="hljs-type">int</span> my_min, <span class="hljs-type">int</span> my_middle) : <span class="hljs-built_in">class_c</span> (my_max, my_min)&#123;<br>        middle = my_middle &lt; max &amp;&amp; my_middle &gt; min ? my_middle : <span class="hljs-number">5</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    class_c c1&#123; <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span> &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a><strong>复制构造函数</strong></h6><p>​    作用：使用一个已经存在的对象，去初始化同类的一个新对象。把初始对象的每个数据成员的值都复制到新建立的对象中。在用户没有指定复制构造函数时，系统会自动生成复制构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> xx=<span class="hljs-number">0</span>,<span class="hljs-type">int</span> yy=<span class="hljs-number">0</span>)&#123;<br>            x=xx;<br>            y=yy;<br>        &#125;<br>    <span class="hljs-comment">//</span><br>    <span class="hljs-built_in">Point</span> (Point &amp;p);<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> x;&#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> y;&#125;<br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> x,y;<br>    <br>&#125;<br>Point::<span class="hljs-built_in">Point</span>(Point &amp;p)&#123;<br>    x = p.x;<br>    y = p.y;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Calling the copy constructor&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a><strong>析构函数</strong></h6><p>​    作用：用来完成对象被删除前的一些清理工作。在对象生命周期即将结束的时候被自动调用，不接受任何参数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clock</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Clock</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">(<span class="hljs-type">int</span> newH,<span class="hljs-type">int</span> newM,<span class="hljs-type">int</span> newS)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showTime</span><span class="hljs-params">()</span></span>;<br>   ~<span class="hljs-built_in">Clock</span>()&#123;&#125; <span class="hljs-comment">//析构函数</span><br>    <span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> hour,minute,second;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="枚举类型与Union类型"><a href="#枚举类型与Union类型" class="headerlink" title="枚举类型与Union类型"></a><strong>枚举类型与Union类型</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">枚举类元素按常量处理，但不能对他们赋值，可以在声明时候另行定义值。</span><br><span class="hljs-comment">enum Weekday &#123;MON,TUE,SAT,THU&#125;</span><br><span class="hljs-comment">默认值依次为0,1,2,3;</span><br><span class="hljs-comment">enum Weekday &#123;Sun=7,Mon=1,TUE,WED,THU&#125;</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">GameResult</span> &#123;WIN,LOSE,TIE,CANCEL&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>GameResult result;<br>    <span class="hljs-comment">//指定 omit 为枚举类型 GameResult类中的CANCEL</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">GameResult</span> omit = CANCEL; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> count = WIN; count &lt;= CANCEL; count++) &#123;<br>result = <span class="hljs-built_in">GameResult</span>(count);<br><span class="hljs-keyword">if</span> (result == omit) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;The Game was cancelled&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;The game was played&quot;</span>&lt;&lt;endl;<br><span class="hljs-keyword">if</span> (result == WIN) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Won&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Lose&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ExamInfo</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">ExamInfo</span>(string name,<span class="hljs-type">char</span> grade);<br><span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">bool</span> pass);<br><span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">int</span> percent);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br>string name;<br>    <span class="hljs-comment">//枚举类型 类型名未命名，在分号前声明变量</span><br><span class="hljs-keyword">enum</span> &#123;<br>GRADE,<br>PASS,<br>PERCENTAGE<br>&#125;mode;<br>    <span class="hljs-comment">//联合类型</span><br><span class="hljs-keyword">union</span> &#123;<br><span class="hljs-type">char</span> grade;<br><span class="hljs-type">bool</span> pass;<br><span class="hljs-type">int</span> percent;<br>&#125;;<br>&#125;;<br><br>ExamInfo::<span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">char</span> grade) :<span class="hljs-built_in">name</span>(name), <span class="hljs-built_in">mode</span>(GRADE), <span class="hljs-built_in">grade</span>(grade) &#123;&#125;;<br>ExamInfo::<span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">bool</span> pass) :<span class="hljs-built_in">name</span>(name), <span class="hljs-built_in">mode</span>(PASS), <span class="hljs-built_in">pass</span>(pass) &#123;&#125;;<br>ExamInfo::<span class="hljs-built_in">ExamInfo</span>(string name, <span class="hljs-type">int</span> percent) :<span class="hljs-built_in">name</span>(name), <span class="hljs-built_in">mode</span>(PERCENTAGE), <span class="hljs-built_in">percent</span>(percent) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ExamInfo::show</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">switch</span> (mode)<br>&#123;<br><span class="hljs-keyword">case</span> ExamInfo::GRADE:<br>cout&lt;&lt;grade;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> ExamInfo::PASS:<br>cout &lt;&lt; pass ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> ExamInfo::PERCENTAGE:<br>cout &lt;&lt; percent;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-function">ExamInfo <span class="hljs-title">course1</span><span class="hljs-params">(<span class="hljs-string">&quot;CPU&quot;</span>, <span class="hljs-string">&#x27;N&#x27;</span>)</span></span>;<br><span class="hljs-function">ExamInfo <span class="hljs-title">course2</span><span class="hljs-params">(<span class="hljs-string">&quot;GPU&quot;</span>, <span class="hljs-number">0</span>)</span></span>;<br><span class="hljs-function">ExamInfo <span class="hljs-title">course3</span><span class="hljs-params">(<span class="hljs-string">&quot;Tem&quot;</span>, <span class="hljs-number">80</span>)</span></span>;<br>course1.<span class="hljs-built_in">show</span>();<br>course2.<span class="hljs-built_in">show</span>();<br>course3.<span class="hljs-built_in">show</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SavingAccount</span> &#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> id;<br><span class="hljs-type">double</span> balance;<br><span class="hljs-type">double</span> rate;<br><span class="hljs-type">int</span> lastDate;<br><span class="hljs-type">double</span> accummulation;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">record</span><span class="hljs-params">(<span class="hljs-type">int</span> date,<span class="hljs-type">double</span> amount)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">accumulate</span><span class="hljs-params">(<span class="hljs-type">int</span> date)</span> <span class="hljs-type">const</span> </span>&#123;<br><span class="hljs-keyword">return</span> accummulation + balance * (date - lastDate);<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">SavingAccount</span>(<span class="hljs-type">int</span> date, <span class="hljs-type">int</span> id, <span class="hljs-type">double</span> rate);<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getID</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> id; &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> balance;  &#125;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getRate</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> rate; &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deposit</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">settle</span><span class="hljs-params">(<span class="hljs-type">int</span> date)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br>&#125;;<br><br>SavingAccount::<span class="hljs-built_in">SavingAccount</span>(<span class="hljs-type">int</span> date, <span class="hljs-type">int</span> id, <span class="hljs-type">double</span> rate) :<span class="hljs-built_in">id</span>(id), <span class="hljs-built_in">balance</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">rate</span>(rate), <span class="hljs-built_in">lastDate</span>(date), <span class="hljs-built_in">accummulation</span>(<span class="hljs-number">0</span>) &#123;<br>cout &lt;&lt; date &lt;&lt; <span class="hljs-string">&quot;\t#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;is created&quot;</span> &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::record</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span> </span>&#123;<br>accummulation = <span class="hljs-built_in">accumulate</span>(date);<br>lastDate = date;<br>amount = <span class="hljs-built_in">floor</span>(amount * <span class="hljs-number">100</span> + <span class="hljs-number">0.5</span>) / <span class="hljs-number">100</span>;<br>balance += amount;<br>cout &lt;&lt; date &lt;&lt; <span class="hljs-string">&quot;\t#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; amount &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span> &lt;&lt; balance &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::deposit</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span> </span>&#123;<br><span class="hljs-built_in">record</span>(date, amount);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::withdraw</span><span class="hljs-params">(<span class="hljs-type">int</span> date, <span class="hljs-type">double</span> amount)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-built_in">getBalance</span>()) &#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Error : not enough money&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">record</span>(date, -amount);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::settle</span><span class="hljs-params">(<span class="hljs-type">int</span> date)</span> </span>&#123;<br><span class="hljs-type">double</span> interest = <span class="hljs-built_in">accumulate</span>(date) * rate / <span class="hljs-number">365</span>;<br><span class="hljs-keyword">if</span> (interest != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">record</span>(date, interest);<br>&#125;<br>accummulation = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SavingAccount::show</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;#&quot;</span> &lt;&lt; id &lt;&lt; <span class="hljs-string">&quot;\tBalance:&quot;</span> &lt;&lt; balance&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br><span class="hljs-function">SavingAccount <span class="hljs-title">sa0</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">21325302</span>, <span class="hljs-number">0.015</span>)</span></span>;<br><span class="hljs-function">SavingAccount <span class="hljs-title">sa1</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">58320212</span>, <span class="hljs-number">0.015</span>)</span></span>;<br>sa0.<span class="hljs-built_in">deposit</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5000</span>);<br>sa1.<span class="hljs-built_in">deposit</span>(<span class="hljs-number">25</span>, <span class="hljs-number">10000</span>);<br>sa0.<span class="hljs-built_in">deposit</span>(<span class="hljs-number">45</span>, <span class="hljs-number">5500</span>);<br>sa1.<span class="hljs-built_in">withdraw</span>(<span class="hljs-number">60</span>, <span class="hljs-number">4000</span>);<br>sa0.<span class="hljs-built_in">settle</span>(<span class="hljs-number">90</span>);<br>sa1.<span class="hljs-built_in">settle</span>(<span class="hljs-number">90</span>);<br>sa0.<span class="hljs-built_in">show</span>();<br>sa1.<span class="hljs-built_in">show</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="深度搜索"><a href="#深度搜索" class="headerlink" title="深度搜索"></a>深度搜索</h5><h6 id="位域"><a href="#位域" class="headerlink" title="位域"></a><strong>位域</strong></h6><p>​    将类中的多个数据成员打包，从而使不同成员可以共享相同的字节的机制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/**</span><br><span class="hljs-comment">用 : 后的位数来指定一个位域所占用的二进制位数</span><br><span class="hljs-comment">只有 bool,char,int,enum的成员才能被指定位域</span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">student</span>(<span class="hljs-type">unsigned</span> number, Level level, Grade grade) :<span class="hljs-built_in">number</span>(number), <span class="hljs-built_in">level</span>(level), <span class="hljs-built_in">grade</span>(grade) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">unsigned</span> number : <span class="hljs-number">27</span>; <span class="hljs-comment">//number 占用27个字节</span><br>Level level : <span class="hljs-number">2</span>; <span class="hljs-comment">//level 占用两个字节</span><br>Grade grade : <span class="hljs-number">2</span>;<span class="hljs-comment">//grade 占用两个字节</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="6、数据的共享与保护"><a href="#6、数据的共享与保护" class="headerlink" title="6、数据的共享与保护"></a>6、数据的共享与保护</h4><h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><h6 id="类作用域"><a href="#类作用域" class="headerlink" title="类作用域"></a>类作用域</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//类X中 m成员的类作用域</span><br><br><span class="hljs-comment">//没有声明同名的局部作用域标识符，在函数内可以直接访问成员m</span><br>x.m<br>x::m <span class="hljs-comment">//访问类的静态成员</span><br><br>ptr-&gt;m  <span class="hljs-comment">//ptr为指向X类的一个对象的指针</span><br></code></pre></td></tr></table></figure><h6 id="enum作用域"><a href="#enum作用域" class="headerlink" title="enum作用域"></a>enum作用域</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">color</span> &#123;red,yellow,green&#125;; <span class="hljs-comment">//不限定作用域 可以直接访问</span><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">color2</span> &#123;red,yellow,green&#125;; <span class="hljs-comment">//限定作用域 通过color2::访问</span><br><br>color c =red;<br>color c2 = color::red;<br>color2 c3 = color2::red;<br></code></pre></td></tr></table></figure><h5 id="生存周期"><a href="#生存周期" class="headerlink" title="生存周期"></a>生存周期</h5><h6 id="静态生存周期"><a href="#静态生存周期" class="headerlink" title="静态生存周期"></a>静态生存周期</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//文件作用域 全局直接声明</span><br><span class="hljs-comment">//在局部作用域中以 static 声明</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> i = <span class="hljs-number">5</span>; <span class="hljs-comment">//只赋值一次，下次使用时会保持上一次的值</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> j;  <span class="hljs-comment">//未指定初值的基本类型静态生存变量会被以0初始化</span><br></code></pre></td></tr></table></figure><h5 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h5><p>​    类属性：某个属性为整个类所共有，不属于某个具体对象，采用<code>static</code>声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> y = <span class="hljs-number">0</span>);<br><span class="hljs-built_in">Point</span>(Point&amp; p);<br>~<span class="hljs-built_in">Point</span>();<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span></span>;<br><span class="hljs-comment">//静态函数成员</span><br><span class="hljs-comment">//主要用来访问同一个类中的静态数据成员</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">showCount</span><span class="hljs-params">()</span></span>; <br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> count; <span class="hljs-comment">//静态数据成员 不指定初值，默认为0</span><br><span class="hljs-comment">//constexpr static int origin = 0;</span><br>&#125;;<br><br>Point::<span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x , <span class="hljs-type">int</span> y ) :<span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;<br>count++;<br>&#125;;<br>Point::<span class="hljs-built_in">Point</span>(Point&amp; p) :<span class="hljs-built_in">x</span>(p.x), <span class="hljs-built_in">y</span>(p.y) &#123;<br>count++;<br>&#125;;<br>Point::~<span class="hljs-built_in">Point</span>() &#123;<br>count--;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Point::getX</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> x;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Point::getY</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> y;<br>&#125;<br><br> <span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">Point::showCount</span><span class="hljs-params">()</span>  </span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;Object count=&quot;</span> &lt;&lt; count &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-type">int</span> Point::count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//constexpr int Point::origin;</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//静态函数调用</span><br>Point::<span class="hljs-built_in">showCount</span>();<br><span class="hljs-function">Point <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Point A  &quot;</span> &lt;&lt; a.<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; a.<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>a.<span class="hljs-built_in">showCount</span>();<br><br><span class="hljs-function">Point <span class="hljs-title">b</span><span class="hljs-params">(a)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Point B  &quot;</span> &lt;&lt; b.<span class="hljs-built_in">getX</span>() &lt;&lt; <span class="hljs-string">&quot;,&quot;</span> &lt;&lt; b.<span class="hljs-built_in">getY</span>() &lt;&lt; endl;<br>Point::<span class="hljs-built_in">showCount</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    静态成员函数中访问类的非静态成员必须指明对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span> :<br><span class="hljs-built_in">A</span>();<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">g</span><span class="hljs-params">(A a)</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> y;<br>&#125;;<br><br>A::<span class="hljs-built_in">A</span>() &#123;<br>    <span class="hljs-comment">//构造函数，直接访问private x可以</span><br>cout &lt;&lt; x;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A::f</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//静态成员函数中访问类的非静态成员必须指明对象。</span><br>cout &lt;&lt; x; <span class="hljs-comment">//错误，不能访问，非静态成员引用必须与特定对象相对</span><br>    cout &lt;&lt; y; <span class="hljs-comment">//可以 能访问 静态成员函数可以直接访问静态成员</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A::g</span><span class="hljs-params">(A a)</span> </span>&#123;<br>cout &lt;&lt; a.x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h5><p>​    友元关系提供了不同类或对象的成员函数之间，类的成员函数与一般函数之间进行数据共享的机制。通过友元关系，一个普通函数或者类的成员函数可以访问封装于另一个类中的函数。</p><p>​    友元关系单向、不能传递、不能继承。</p><h6 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a><strong>友元函数</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,<span class="hljs-type">int</span> y=<span class="hljs-number">0</span>);<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getX</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getY</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(Point &amp;p1,Point &amp;p2)</span></span>;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> x,y;<br>&#125;;<br><br><span class="hljs-comment">//dist 函数在Point类的外面，但是可以通过Point对象访问Point内部的数据</span><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(Point &amp;p1,Point &amp;p2)</span></span>&#123;<br>  <span class="hljs-comment">//友元函数可以通过对象名直接访问Point类的私有数据成员</span><br>    <span class="hljs-type">double</span> x = p1.x-p2.x;<br>    <span class="hljs-type">double</span> y = p1.y-p2.y;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">float</span>&gt;(<span class="hljs-built_in">sqrt</span>(x*x+y*y));<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a><strong>友元类</strong></h6><p>​    <code>A</code>为<code>B</code>的友元类，<code>A</code>类中所有成员都是<code>B</code>的友元函数，都可以访问<code>B</code>类的私有和保护成员</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>;<br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">int</span> x;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br>  A a;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">B::set</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>  <span class="hljs-comment">//B 是 A 的友元，在B的成员函数中可以访问A类对象的私有成员</span><br>  a.x = i;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="new和delete"><a href="#new和delete" class="headerlink" title="new和delete"></a>new和delete</h5><p>​    先分配<code>memory</code>，再调用<code>ctor</code>构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">Complex* pc = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Complex</span>(<span class="hljs-number">1</span>,)<span class="hljs-number">2</span>;<br><br>Complex* pc;<br><br><span class="hljs-type">void</span>* men = operate <span class="hljs-built_in">new</span> (<span class="hljs-built_in">sizeof</span>(Complex)); <span class="hljs-comment">//分配内存</span><br>pc = <span class="hljs-built_in">static_cast</span>&lt;Complex*&gt;(mem);<span class="hljs-comment">//转型</span><br>pc-&gt;Complex::<span class="hljs-built_in">Complex</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//构造函数</span><br></code></pre></td></tr></table></figure><p>​    先调用<code>dtor</code>析构函数，再释放Memory</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">String* ps = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>...<br><span class="hljs-keyword">delete</span> ps;<br><br>String::~<span class="hljs-built_in">String</span>(ps);<br><span class="hljs-function"><span class="hljs-keyword">operator</span> <span class="hljs-title">delete</span> <span class="hljs-params">(ps)</span></span>;<br></code></pre></td></tr></table></figure><h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p>​    修饰常量、常对象。<strong>常对象不能被更新。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//常成员函数</span><br><span class="hljs-comment">//常成员函数调用期间，目的对象都被视为常对象，因此不能更新目的对象的数据成员。</span><br><span class="hljs-comment">//常对象只能调用常函数</span><br>类型说明符 函数名（参数表） <span class="hljs-type">const</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">R</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">R</span>(<span class="hljs-type">int</span> r1, <span class="hljs-type">int</span> r2);<br>    <span class="hljs-comment">//普通成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>; <br>    <span class="hljs-comment">//常成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print2</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> r1, r2;<br>&#125;;<br><br>R::<span class="hljs-built_in">R</span>(<span class="hljs-type">int</span> r1, <span class="hljs-type">int</span> r2) :<span class="hljs-built_in">r1</span>(r1), <span class="hljs-built_in">r2</span>(r2) &#123;&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">R::print</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; r2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">R::print2</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>cout &lt;&lt; r1 &lt;&lt; <span class="hljs-string">&quot;;;&quot;</span> &lt;&lt; r2 &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//普通对象 可以调用普通股成员函数、常成员函数</span><br><span class="hljs-function">R <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>)</span></span>;<br>a.<span class="hljs-built_in">print</span>();<br>a.<span class="hljs-built_in">print2</span>();<br>    <span class="hljs-comment">//常对象</span><br>    <span class="hljs-comment">//常对象只能调用常成员函数</span><br><span class="hljs-function"><span class="hljs-type">const</span> R <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">20</span>, <span class="hljs-number">52</span>)</span></span>;<br><span class="hljs-comment">//b.print(); 报错</span><br>b.<span class="hljs-built_in">print2</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="常数据成员与静态常数据成员"><a href="#常数据成员与静态常数据成员" class="headerlink" title="常数据成员与静态常数据成员"></a><strong>常数据成员与静态常数据成员</strong></h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> i);<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> a;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> b;<br>  <span class="hljs-comment">//静态常量如果具有整数类型后者枚举类型 可以直接定义</span><br>  <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> b = <span class="hljs-number">10</span>;<br>&#125;;<br><br><span class="hljs-comment">//static const int b,</span><br><span class="hljs-comment">//b 定义了就不能改</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> A::b = <span class="hljs-number">10</span>;<br><br>A::<span class="hljs-built_in">A</span>(<span class="hljs-type">int</span> i) :<span class="hljs-built_in">a</span>(i) &#123;&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">A::print</span><span class="hljs-params">()</span> </span>&#123;<br>cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot;:&quot;</span> &lt;&lt; b &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-function">A <span class="hljs-title">a1</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span>, <span class="hljs-title">a2</span><span class="hljs-params">(<span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-comment">//set(a1.b=100) 不行，定义了就不能改了</span><br>a1.<span class="hljs-built_in">print</span>();<br>a2.<span class="hljs-built_in">print</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a><strong>常引用</strong></h6><p>​    常引用的对象不能被更新。函数中无需修改两个传入对象的值，因此将传参方式改为传递常引用更合适。</p><p>​    无需改变其值的参数，不宜使用<strong>普通引用</strong>方式加以传递。可以采用传值方式或者传递常引用方式。</p><p>​    对于大对象来说，传值耗时较多，因此传递常引用为宜。</p><p>​    复制构造函数的参数也宜采用常引用的方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br><span class="hljs-keyword">public</span>:<br>  ...<br><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(<span class="hljs-type">const</span> Point &amp;p1,<span class="hljs-type">const</span> Point &amp;p2)</span></span>;  <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">dist</span><span class="hljs-params">(cosnt Point &amp;p1,<span class="hljs-type">const</span> Point &amp;p2)</span></span>&#123;&#125;;<br></code></pre></td></tr></table></figure><p>​    <strong>总结</strong></p><p>​    const 数据成员 只在某个对象生存期内是常量，而对于整个类而言却是可变的。因为类可以创建多个对象，不同的对象其 const 数据成员的值可以不同。所以不能在类的声明中初始化 const 数据成员，因为类的对象没被创建时，编译器不知道 const 数据成员的值是什么。</p><p>​    const 数据成员的初始化只能在类的构造函数的初始化列表中进行。要想建立在整个类中都恒定的常量，应该用类中的枚举常量来实现，或者static cosnt。</p><p>​    cosnt 成员函数主要目的是防止成员函数修改对象的内容。即 const 成员函数不能修改成员变量的值，但可以访问成员变量。当方法成员函数时，该函数只能是 const 成员函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>();<br>    <span class="hljs-keyword">enum</span> &#123;size1=<span class="hljs-number">100</span>,size2=<span class="hljs-number">200</span>&#125;;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> a;<span class="hljs-comment">//只能在构造函数初始化列表中初始化</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> b;<span class="hljs-comment">//在类的实现文件中定义并初始化</span><br>    conststatic <span class="hljs-type">int</span> c;<span class="hljs-comment">//与 static const int c;相同。</span><br>&#125;;<br> <br>Test::<span class="hljs-built_in">Test</span>():<span class="hljs-built_in">a</span>(<span class="hljs-number">0</span>);<br><span class="hljs-type">int</span> Test::b=<span class="hljs-number">0</span>;<span class="hljs-comment">//static成员变量不能在构造函数初始化列表中初始化，因为它不属于某个对象。</span><br><span class="hljs-type">const</span> intTest::c=<span class="hljs-number">0</span>;<span class="hljs-comment">//注意：给静态成员变量赋值时，不需要加static修饰符，但要加const</span><br></code></pre></td></tr></table></figure><h5 id="const-与-static-变量定义很重要"><a href="#const-与-static-变量定义很重要" class="headerlink" title="const 与 static 变量定义很重要"></a>const 与 static 变量定义<strong>很重要</strong></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//-----------------Test.h----------------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span><br>&#123;<br><span class="hljs-keyword">private</span> :<br>    <span class="hljs-type">int</span> var1;<br>    <span class="hljs-comment">// int var11= 4; 错误的初始化方法</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> var2 ;<br>    <span class="hljs-comment">// const int var2 =22222; 错误的初始化方法</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> var3;<br>    <span class="hljs-comment">// static int var3=33333; 错误，只有静态常量int成员才能直接赋值来初始化</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> var4=<span class="hljs-number">4444</span>; <span class="hljs-comment">//正确，静态常量成员可以直接初始化    </span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> var44;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Test</span>(<span class="hljs-type">void</span>);<br>    ~<span class="hljs-built_in">Test</span>(<span class="hljs-type">void</span>);<br>&#125;;<br><span class="hljs-comment">//--------------------Test.cpp-----------------------------------</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;.\test.h&quot;</span></span><br> <br><span class="hljs-type">int</span> Test::var3 = <span class="hljs-number">3333333</span>; <span class="hljs-comment">//静态成员的正确的初始化方法</span><br> <br><span class="hljs-comment">// int Test::var1 = 11111;; 错误静态成员才能初始化</span><br><span class="hljs-comment">// int Test::var2 = 22222; 错误</span><br><span class="hljs-comment">// int Test::var44 = 44444; // 错误的方法，提示重定义</span><br>Test::<span class="hljs-built_in">Test</span>(<span class="hljs-type">void</span>)：<span class="hljs-built_in">var1</span>(<span class="hljs-number">11111</span>),<span class="hljs-built_in">var2</span>(<span class="hljs-number">22222</span>)正确的初始化方法<span class="hljs-comment">//var3(33333)不能在这里初始化</span><br>&#123;<br>    var1 =<span class="hljs-number">11111</span>; <span class="hljs-comment">//正确, 普通变量也可以在这里初始化</span><br>    <span class="hljs-comment">//var2 = 222222; 错误，因为常量不能赋值，只能在 &quot;constructor initializer （构造函数的初始化列表）&quot; 那里初始化</span><br>          <br>    var3 =<span class="hljs-number">44444</span>; <span class="hljs-comment">//这个赋值是正确的，不过因为所有对象一个静态成员，所以会影响到其他的，这不能叫做初始化了吧</span><br>&#125;<br>Test::~<span class="hljs-built_in">Test</span>(<span class="hljs-type">void</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><h5 id="mutable"><a href="#mutable" class="headerlink" title="mutable"></a>mutable</h5><p>​    <code>mutalble</code>使得常成员函数可以修改他们的值。被<code>mutable</code>修饰的成员对象任何时候都不会被视为常对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Line</span>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">Line</span>(<span class="hljs-type">const</span> Point &amp;p1,<span class="hljs-type">const</span> Point &amp;p2):<span class="hljs-built_in">p1</span>(p1),<span class="hljs-built_in">p2</span>(p2),<span class="hljs-built_in">len</span>(<span class="hljs-number">-1</span>)&#123;&#125;;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getLen</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br><span class="hljs-keyword">private</span>:<br>    Point p1,p2;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">double</span> len;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">Line::getLen</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(len&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-type">double</span> x = p1.<span class="hljs-built_in">getX</span>()-p2.<span class="hljs-built_in">getX</span>();<br>        <span class="hljs-type">double</span> y = p1.<span class="hljs-built_in">getY</span>()-p2.<span class="hljs-built_in">getY</span>();<br>        len = <span class="hljs-built_in">sqrt</span>(x*x+y*y);<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="文件结构与外部引用"><a href="#文件结构与外部引用" class="headerlink" title="文件结构与外部引用"></a>文件结构与外部引用</h5><p>​    <code>C++</code>文件结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">.h 头文件 类定义文件 <br>.cpp 类实现文件<br>.cpp 类使用文件<br></code></pre></td></tr></table></figure><p>​    <strong>外部引用</strong></p><p>​    一个变量除了在定义他的源文件中引用，还被其他文件引用。需要加<code>extern</code>文件关键字。</p><p>​    <code>extern</code>关键字声明的变量，如果同时指定类初值，则是定义性声明（声明的同时定义，分配内存初始化），否则是引用性声明。</p><p>​    <strong>通常情况下，变量和函数的定义都放在源文件中，而对外部变量和外部函数的引用性声明则放在头文件中。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// .cpp 1</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">// .cpp2</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> i ;<br></code></pre></td></tr></table></figure><p>​    <strong>将变量和函数限制在编译单元内</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//被namespace括起的区域都属于匿名的命名空间</span><br><span class="hljs-comment">//不会暴露给其他源文件</span><br><span class="hljs-keyword">namespace</span>&#123;<br>  <span class="hljs-type">int</span> n;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;<br>    n++;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><p>​    <strong>预定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">undef</span></span><br></code></pre></td></tr></table></figure><p>​    <strong>条件编译</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 形式1</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span>  ...</span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br> <br><span class="hljs-comment">// 形式2    </span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">// 形式3</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">else</span> ...</span><br> ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br><span class="hljs-comment">// 形式4</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> ... <span class="hljs-comment">//如果经过#define并且未经#undef删除</span></span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br><span class="hljs-comment">// 形式5</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> ...</span><br>    ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br></code></pre></td></tr></table></figure><p>​    <strong>defined操作符</strong></p><p>​    <code>defined</code>是一个预处理操作符，而不是指令，因此不用<code>#</code>开头。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYHEAD_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYHEAD_H</span><br>...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>  <br><span class="hljs-comment">//等价于</span><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(MYHEAD_H)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYHEAD_H</span><br>  ...<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h5 id="堆栈内存管理"><a href="#堆栈内存管理" class="headerlink" title="堆栈内存管理"></a>堆栈内存管理</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span>&#123;...&#125;;<br>...<br>    <br>&#123;<br>    <span class="hljs-comment">//c1所占空间来自Stack栈 存在于某一块作用域之内的空间</span><br>    <span class="hljs-comment">// 作用域结束生命结束 会被自动清理</span><br>    <span class="hljs-function">Complex <span class="hljs-title">c1</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</span></span>; <span class="hljs-comment">//local object  auto object</span><br>    <br>    <span class="hljs-comment">// p所占空间来自Heap堆 内存来自于全局内存，动态分配</span><br>    Complex* p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Complex</span>(<span class="hljs-number">3</span>); <br>    ...<br>    <span class="hljs-keyword">delete</span> p;<br>    <span class="hljs-comment">//static object 离开作用域生命仍然存在</span><br>    <span class="hljs-function"><span class="hljs-type">static</span> Complex <span class="hljs-title">c2</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)</span></span>; <br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度学习 线性回归 笔记</title>
    <link href="/2023/02/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%20%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%20%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、知识储备"><a href="#一、知识储备" class="headerlink" title="一、知识储备"></a>一、知识储备</h3><h5 id="1-公式"><a href="#1-公式" class="headerlink" title="1.  公式"></a>1.  公式</h5><p>   线性回归一般模型：$$\begin{equation} \hat y = w_1x_1+w_2x_2+\cdots+w_nx_n+b\end{equation} $$</p><p>   线性代数表示：$$\begin{equation}\hat y= w^Tx+b\end{equation}$$</p><p>   损失函数：$$\begin{equation}\ l^{(i)}(w,b)=\frac{1}{2}(\hat y^{(i)}-y^{(i)}) \end{equation}$$</p><p>   ==模型更新过程==：</p><p>   $\begin{split}\begin{aligned} \mathbf{w} &amp;\leftarrow \mathbf{w} -   \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \partial_{\mathbf{w}} l^{(i)}(\mathbf{w}, b) = \mathbf{w} - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \mathbf{x}^{(i)} \left(\mathbf{w}^\top \mathbf{x}^{(i)} + b - y^{(i)}\right),\ b &amp;\leftarrow b -  \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \partial_b l^{(i)}(\mathbf{w}, b)  = b - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \left(\mathbf{w}^\top \mathbf{x}^{(i)} + b - y^{(i)}\right). \end{aligned}\end{split}\Longrightarrow(\mathbf{w},b) \leftarrow (\mathbf{w},b) - \frac{\eta}{|\mathcal{B}|} \sum_{i \in \mathcal{B}} \partial_{(\mathbf{w},b)} l^{(i)}(\mathbf{w},b).$</p><h5 id="2-函数"><a href="#2-函数" class="headerlink" title="2.  函数"></a>2.  函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span>  torch<br><br>torch.tensor([[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]]) <br><span class="hljs-comment">#为张量中每个元素赋值 最外层的列表对应于轴0，内层的列表对应于轴1</span><br><br>X = torch.arange(<span class="hljs-number">12</span>, dtype=torch.float32).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br>Y = torch.tensor([[<span class="hljs-number">2.0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]])<br>torch.cat((X, Y), dim=<span class="hljs-number">0</span>), torch.cat((X, Y), dim=<span class="hljs-number">1</span>) <br><span class="hljs-comment">#dim== 0 行增加，拼到行后面， dim==1 列增加，拼到列后面</span><br><br>loss.backward() <br><span class="hljs-comment">#自动微分，计算变量的反向传播，意味着跟踪整个计算图，填充关于每个参数的偏导数</span><br><br><span class="hljs-comment">#https://www.cnblogs.com/tangjunjun/p/14437631.html</span><br><span class="hljs-comment"># Eg1:</span><br>x = torch.arange(<span class="hljs-number">4.0</span>) <span class="hljs-comment"># X=[0,1,2,3]</span><br>x.requires_grad_(<span class="hljs-literal">True</span>)<br>y = <span class="hljs-number">2</span> * torch.dot(x, x)  <span class="hljs-comment"># y = 2 * X^T*X 标量</span><br>y.backward()  <span class="hljs-comment"># y标量 y_i&#x27; = 4*(Dy/Dx_i)  [0,4,8,12]</span><br>x.grad<br><span class="hljs-comment"># 输出： tensor([ 0.,  4.,  8., 12.])</span><br><br><span class="hljs-comment"># Eg2:</span><br>x.grad.zero_()<br>y = x.<span class="hljs-built_in">sum</span>()  <span class="hljs-comment"># y = x1 + x2 + x3 + x4 标量</span><br>y.backward() <span class="hljs-comment"># y&#x27; = Dy/x_1 Dy/x_2 Dy/x_3 Dy/x_4</span><br>x.grad<br><span class="hljs-comment"># 输出： tensor([1., 1., 1., 1.])</span><br><br><span class="hljs-comment"># Eg3:</span><br>x.grad.zero_()<br>y = x * x <span class="hljs-comment"># y 向量</span><br><span class="hljs-comment">#y.sum().backward() #求和为标量再backward yi&#x27; = Dy/Dx_i = 2x_i</span><br><span class="hljs-comment">#等价于y.backward(torch.ones(len(x))) ==&gt; 赋予每个参数x_i前的权重系数为1  ==&gt; x1+x2+x3+x4 ==&gt;y.sum()</span><br>y.backward(torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.01</span>,<span class="hljs-number">0.001</span>])) <br><span class="hljs-comment">#==&gt;赋予每个参数x_i的权重为对应值 0.1x1+1.0x2+0.01x3+0.0001x4</span><br><span class="hljs-built_in">print</span>(x.grad)<br><span class="hljs-comment">#输出：tensor([0., 2., 4., 6.])</span><br></code></pre></td></tr></table></figure><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br>true_w = torch.tensor([-<span class="hljs-number">2</span>,<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">2</span><br><span class="hljs-comment"># y = -2x1 + 3.4x2 +2</span><br><br>features,labels = d2l.synthetic_data(true_w,true_b,<span class="hljs-number">1000</span>)<br><span class="hljs-comment">#synthetic_data(w,b,num_samples)</span><br><span class="hljs-comment">#生成 1000 x 2 x 的集合 和 对应的 y的结果 作为初始数据</span><br><span class="hljs-comment"># features 用来存输入的x</span><br><span class="hljs-comment"># labels 用来存y</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_array</span>(<span class="hljs-params">data_arrays,batch_size,is_train=<span class="hljs-literal">True</span></span>):<br>    dataset = data.TensorDataset(*data_arrays)<br>    <span class="hljs-keyword">return</span> data.DataLoader(dataset,batch_size,shuffle=is_train)<br><br><br>batch_size = <span class="hljs-number">10</span><br>dataset = load_array((features,labels),batch_size)<br><br>loss = nn.MSELoss()<br>net = nn.Sequential(nn.Linear(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))<br>trainer = torch.optim.SGD(net.parameters(),lr=<span class="hljs-number">0.03</span>)<br><br>epochs = <span class="hljs-number">3</span><br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epochs):<br>    <span class="hljs-keyword">for</span> X,y <span class="hljs-keyword">in</span> dataset:<br>        l = loss(net(X),y)<br>        trainer.zero_grad()<br>        l.backward()<br>        trainer.step()<br>    l = loss(net(X),y)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch<span class="hljs-subst">&#123;epoch+<span class="hljs-number">1</span>&#125;</span>,loss<span class="hljs-subst">&#123;l:f&#125;</span>&#x27;</span>)<br><br>w = net[<span class="hljs-number">0</span>].weight.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w的估计误差：&#x27;</span>, true_w - w.reshape(true_w.shape))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;W:&#x27;</span>,w)<br>b = net[<span class="hljs-number">0</span>].bias.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b的估计误差：&#x27;</span>, true_b - b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b&#x27;</span>,b)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DeepLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python笔记</title>
    <link href="/2022/09/24/Python%E7%AC%94%E8%AE%B0/Python%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/24/Python%E7%AC%94%E8%AE%B0/Python%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="0-Preface"><a href="#0-Preface" class="headerlink" title="0. Preface"></a>0. Preface</h5><p>整理一些杂七杂八的东西</p><h5 id="1-推导式"><a href="#1-推导式" class="headerlink" title="1. 推导式"></a>1. 推导式</h5><ul><li><p>能简化对数据进行筛选的语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">[表达式 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表] <br>[out_exp_res <span class="hljs-keyword">for</span> out_exp <span class="hljs-keyword">in</span> input_list]<br><br><span class="hljs-comment">#或者 </span><br><br>[表达式 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表 <span class="hljs-keyword">if</span> 条件]<br>[out_exp_res <span class="hljs-keyword">for</span> out_exp <span class="hljs-keyword">in</span> input_list <span class="hljs-keyword">if</span> condition]<br><br>[结果值<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> 结果<span class="hljs-number">2</span>  <span class="hljs-keyword">for</span> 变量名 <span class="hljs-keyword">in</span> 列表]<br>[out_exp_res1 <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> out_exp_res2 <span class="hljs-keyword">for</span> 变量 <span class="hljs-keyword">in</span> 列表 ]<br><br></code></pre></td></tr></table></figure></li></ul><h5 id="2-列表、元组、字典、集合"><a href="#2-列表、元组、字典、集合" class="headerlink" title="2. 列表、元组、字典、集合"></a>2. 列表、元组、字典、集合</h5><ul><li><p>列表,常用方法都行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">False</span>]<br></code></pre></td></tr></table></figure></li><li><p>元组，和列表类似，组内元素不能更改（初始化的时候指定了一片内存）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">tuple</span>=(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure></li><li><p>字典，对象，键值对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">d=&#123;<span class="hljs-string">&#x27;Name&#x27;</span>:<span class="hljs-string">&#x27;zly&#x27;</span>,<span class="hljs-string">&#x27;key&#x27;</span>:<span class="hljs-string">&#x27;value&#x27;</span>&#125;<br><br><br>dict0 = <span class="hljs-built_in">dict</span>()  <span class="hljs-comment"># 1、传一个空字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict0:&#x27;</span>, dict0)<br> <br>dict1 = <span class="hljs-built_in">dict</span>(&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">24</span>&#125;)  <span class="hljs-comment"># 2、传一个字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict1:&#x27;</span>, dict1)<br> <br>dict2 = <span class="hljs-built_in">dict</span>(user=<span class="hljs-string">&#x27;admin&#x27;</span>, password=<span class="hljs-number">123456</span>)  <span class="hljs-comment"># 3、传关键字</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict2:&#x27;</span>, dict2)<br> <br>dict3 = <span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;student&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;teacher&#x27;</span>, <span class="hljs-number">2</span>)])  <span class="hljs-comment"># 4、传一个包含一个或多个元组的列表</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict3:&#x27;</span>, dict3)<br> <br>dict5 = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]))  <span class="hljs-comment"># 5、传一个zip()函数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;dict5:&#x27;</span>, dict5)<br><br><span class="hljs-comment"># 使用大括号或者dict()内建函数构造字典</span><br></code></pre></td></tr></table></figure></li><li><p>集合 无序、不重复（自动去除重复值）</p></li><li><ul><li>创建空集合不能用<code>&#123;&#125;</code>，要用<code>set()</code></li><li>集合之间可以使用关系运算符进行运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">num=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-comment">#&#123;1,2,3,4&#125;</span><br><br></code></pre></td></tr></table></figure></li></ul><h5 id="3-关于流程控制语句"><a href="#3-关于流程控制语句" class="headerlink" title="3.关于流程控制语句"></a>3.关于流程控制语句</h5><ul><li><p><strong>break</strong> 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>,<span class="hljs-string">&#x27;12&#x27;</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-keyword">if</span> site == <span class="hljs-string">&quot;Runoob&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;菜鸟教程!&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + site)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)  <span class="hljs-comment">#break之后这里的else没有执行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<br><br><span class="hljs-comment"># Baidu</span><br><span class="hljs-comment">#循环数据 Google</span><br><span class="hljs-comment">#菜鸟教程!</span><br><span class="hljs-comment">#完成循环!</span><br></code></pre></td></tr></table></figure></li><li><p><strong>continue</strong> 语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">sites = [<span class="hljs-string">&quot;Baidu&quot;</span>, <span class="hljs-string">&quot;Google&quot;</span>,<span class="hljs-string">&quot;Runoob&quot;</span>,<span class="hljs-string">&quot;Taobao&quot;</span>]<br><span class="hljs-keyword">for</span> site <span class="hljs-keyword">in</span> sites:<br>    <span class="hljs-keyword">if</span> site == <span class="hljs-string">&quot;Runoob&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;菜鸟教程!&quot;</span>)<br>        <span class="hljs-keyword">continue</span>  <span class="hljs-comment">#continue下面的没有执行</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;循环数据 &quot;</span> + site)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有循环数据!&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成循环!&quot;</span>)<br><br><span class="hljs-comment">#循环数据 Baidu</span><br><span class="hljs-comment">#循环数据 Google</span><br><span class="hljs-comment">#菜鸟教程!</span><br><span class="hljs-comment">#循环数据 Taobao</span><br><span class="hljs-comment">#没有循环数据!</span><br><span class="hljs-comment">#完成循环!</span><br></code></pre></td></tr></table></figure></li><li><p>Python pass是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句，如下实例</p><ul><li>没事做就用<code>pass</code>吧</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;Runoob&#x27;</span>: <br>   <span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;o&#x27;</span>:<br>      <span class="hljs-keyword">pass</span><br>      <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;执行 pass 块&#x27;</span>)<br>   <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;当前字母 :&#x27;</span>, letter)<br> <br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Good bye!&quot;</span>)<br><br><span class="hljs-comment"># 当前字母 : R</span><br><span class="hljs-comment"># 当前字母 : u</span><br><span class="hljs-comment"># 当前字母 : n</span><br><span class="hljs-comment"># 执行 pass 块</span><br><span class="hljs-comment"># 当前字母 : o</span><br><span class="hljs-comment"># 执行 pass 块</span><br><span class="hljs-comment"># 当前字母 : o</span><br><span class="hljs-comment"># 当前字母 : b</span><br><span class="hljs-comment"># Good bye!</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h5><ul><li><p>感觉没什么好看的</p><ul><li><p>注意默认参数 <code>max(a,b=0)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">max</span>(<span class="hljs-params">a,b</span>):<br> <span class="hljs-keyword">if</span> a&gt;b:<br> <span class="hljs-keyword">return</span> a<br> <span class="hljs-keyword">else</span>:<br>  <span class="hljs-keyword">return</span> b<br></code></pre></td></tr></table></figure></li><li><p>注意可选参数<code>max(a,*b)</code>,<code>max(a,**b)</code></p><ul><li>加了<code>*</code>号，参数以<strong>元组</strong>存入，存放所有未命名的变量参数</li><li>加了两个<code>**</code>号，参数以<strong>字典</strong>的方式存入</li></ul></li><li><p>声明的时候<code>*</code>可以单独出现</p><ul><li>单独出现的时候,<code>*</code>后面的参数必须使用关键字输入</li><li>关键字输入 <code>max(5,b=15)</code>，指定为哪个参数赋值</li><li>调用的时候，关键字参数必须为最后一个参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fucntion</span>(<span class="hljs-params">i,j=<span class="hljs-number">1.1</span>,k=<span class="hljs-string">&#x27;hello&#x27;</span></span>)<br><span class="hljs-built_in">print</span>(i,j,j)<br>  <br>function(<span class="hljs-number">1</span>,k=<span class="hljs-string">&#x27;world&#x27;</span>)<br><span class="hljs-comment">#1 1.1 world  </span><br><span class="hljs-comment">#指定为参数k赋值，</span><br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typescript笔记</title>
    <link href="/2022/09/21/Typescript%E7%AC%94%E8%AE%B0/Typescript%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/21/Typescript%E7%AC%94%E8%AE%B0/Typescript%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="0-概述"><a href="#0-概述" class="headerlink" title="0.概述"></a>0.概述</h5><p>本来报道之前看过一段时间<code>Typescript</code>，暑假又接受了“锻炼”，然后这几天仿佛无所事事（其实有事）。找闫明洋师兄聊天，师兄问了我一个<code>Typescript</code>的面试题，<code>interface</code>和<code>type</code>两者有什么区别。我才意识到之前看的比较快，细枝末节都略过了，所以这篇笔记记录自己想记的地方，不一定按顺序组织了。</p><h5 id="1-基础类型"><a href="#1-基础类型" class="headerlink" title="1.基础类型"></a>1.基础类型</h5><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><ul><li><p>注意模版字符串的使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`Gene`</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">37</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">sentence</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`Hello, my name is <span class="hljs-subst">$&#123; name &#125;</span>.I&#x27;ll be <span class="hljs-subst">$&#123; age + <span class="hljs-number">1</span> &#125;</span> years old next month.`</span>;<br><span class="hljs-comment">//等于</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">sentence</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;Hello, my name is &quot;</span> + name + <span class="hljs-string">&quot;.\n\n&quot;</span> +<br>    <span class="hljs-string">&quot;I&#x27;ll be &quot;</span> + (age + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot; years old next month.&quot;</span>;<br><span class="hljs-comment">//写很长，一直加，不美观</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><ul><li><p>两种方式</p><ul><li>```typescript<br>let list: number[] = [1, 2, 3];<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>+ ```typescript<br><span class="hljs-title">  let list:</span> Array&lt;number&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h6 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h6><ul><li><p>“数”组中可以定义不同类型的元素</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">x</span>:[<span class="hljs-built_in">string</span>,<span class="hljs-built_in">number</span>];<br>x=[<span class="hljs-string">&#x27;zifuchuan&#x27;</span>,<span class="hljs-number">456</span>];<br><span class="hljs-comment">//必须按照声明的元组类型进行初始化</span><br><span class="hljs-comment">//对元组中数据进行操作的时候，操作的方法必须和操作的元组对象对应</span><br></code></pre></td></tr></table></figure></li><li><p>当对元组中新数据进行赋值的时候</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">x[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;World&#x27;</span>;<br><span class="hljs-comment">//x[3]可以赋值为(string|number)类型，x[4]=true;报错，x中没有布尔型</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h6><ul><li><p>很友好，用起来很舒服</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-title class_">Red</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br></code></pre></td></tr></table></figure></li><li><p>可以选择手动赋值、加序号</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-title class_">Red</span> = <span class="hljs-number">1</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123;<span class="hljs-title class_">Red</span> = <span class="hljs-number">2</span>, <span class="hljs-title class_">Green</span>=<span class="hljs-number">4</span>, <span class="hljs-title class_">Blue</span>=<span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">c</span>: <span class="hljs-title class_">Color</span> = <span class="hljs-title class_">Color</span>.<span class="hljs-property">Green</span>;<br></code></pre></td></tr></table></figure></li></ul><h6 id="any"><a href="#any" class="headerlink" title="any"></a>any</h6><ul><li><p>已知数组的一部分值，可以用</p></li><li><p>不清楚值是什么类型的时候可以用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">list</span>: <span class="hljs-built_in">any</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;free&quot;</span>];<br>list[<span class="hljs-number">1</span>] = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure></li></ul><h6 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a><strong>类型断言</strong></h6><ul><li><p>有的时候类型不通过，强制告诉编译器这个类型是我指定的类型</p></li><li><p>两种方式</p><ul><li>```typescript<br>let someValue: any = “this is a string”;<br>let strLength: number = (<string>someValue).length;<br>//&lt;&gt; 尖括号写法<figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim"><br>+ ```typescript<br>  <span class="hljs-keyword">let</span> someValue: <span class="hljs-type">any</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br>  <span class="hljs-keyword">let</span> strLength: number = (someValue <span class="hljs-keyword">as</span> <span class="hljs-type">string</span>).length;\<br>  //<span class="hljs-keyword">as</span>写法<br></code></pre></td></tr></table></figure></li></ul></li></ul><h5 id="2-有关接口"><a href="#2-有关接口" class="headerlink" title="2.有关接口"></a>2.有关接口</h5><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><ul><li><p><code>Typescript</code>会对值所具有的结构进行检查</p></li><li><p>传入的对象参数实际上会包含很多数学</p><ul><li>但是编译器只会检查那些必要的属性和定义的类型是否匹配</li><li>类检查器不会去检查属性的顺序，只需要相应的属性存在并且类型符合就行</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">LabelledValue</span> &#123;<br>  <span class="hljs-attr">label</span>: <span class="hljs-built_in">string</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printLabel</span>(<span class="hljs-params">labelledObj: LabelledValue</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(labelledObj.<span class="hljs-property">label</span>);<br>&#125;<br><span class="hljs-keyword">let</span> myObj = &#123;<span class="hljs-attr">size</span>: <span class="hljs-number">10</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">&quot;Size 10 Object&quot;</span>&#125;;<br><span class="hljs-title function_">printLabel</span>(myObj); <br><span class="hljs-comment">//只要这个label属性存在就行了</span><br></code></pre></td></tr></table></figure></li></ul><h6 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h6><ul><li><p>用<code>?</code>解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">interface <span class="hljs-title class_">SquareConfig</span>&#123;<br>  color?:string;<br>  width?:number;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createSquare</span>(<span class="hljs-params">config:SquareConfig</span>):(<span class="hljs-attr">color</span>:string,<span class="hljs-attr">area</span>:number)&#123;...&#125;<br><span class="hljs-comment">// createSquare函数，接收SquareConfig类型的参数，返回参数类型为：&#123;color:string,area:number&#125;;</span><br><span class="hljs-keyword">let</span> mySquare = <span class="hljs-title function_">createSquare</span>(&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;black&#x27;</span>&#125;) <span class="hljs-keyword">as</span> <span class="hljs-title class_">SquareConfig</span>;<br><span class="hljs-comment">// 使用as，将createSquare()函数的返回值类型强制转化为SquareConfig,赋值给mySquare                                                                 </span><br></code></pre></td></tr></table></figure></li></ul><h6 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h6><ul><li><p>用<code>readonly</code>解决</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Point</span>&#123;<br>  <span class="hljs-keyword">readonly</span> <span class="hljs-attr">x</span>:<span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">readonly</span> <span class="hljs-attr">y</span>:<span class="hljs-built_in">number</span>;<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">p1</span>:<span class="hljs-title class_">Point</span> =&#123;<span class="hljs-attr">x</span>:<span class="hljs-number">10</span>,<span class="hljs-attr">y</span>:<span class="hljs-number">20</span>&#125;;<br>p1.<span class="hljs-property">x</span>=<span class="hljs-number">5</span>; <span class="hljs-comment">//错误 只能读取，不能修改（重新赋值）</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">ro</span>: <span class="hljs-title class_">ReadonlyArray</span>&lt;<span class="hljs-built_in">number</span>&gt; = a;  <span class="hljs-comment">//ReadonlyArray相当于readonly的二维实现</span><br>ro[<span class="hljs-number">0</span>] = <span class="hljs-number">12</span>; <span class="hljs-comment">// error!</span><br>ro.<span class="hljs-title function_">push</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// error!</span><br>ro.<span class="hljs-property">length</span> = <span class="hljs-number">100</span>; <span class="hljs-comment">// error!</span><br>a = ro; <span class="hljs-comment">// error!</span><br></code></pre></td></tr></table></figure></li><li><p>和<code>const</code>的区别</p><ul><li><code>const</code>用来声明变量</li><li><code>readonly</code>用来声明属性</li></ul></li></ul><h6 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h6><ul><li><p><code>implemens</code>关键字继承接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> firstClock&#123;<br> <span class="hljs-attr">hours</span>:<span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> secondClock&#123;<br>  <span class="hljs-attr">minutes</span>:<span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> trueClock implements fisrtClock,secondClock&#123;<br>  <span class="hljs-attr">seconds</span>:<span class="hljs-built_in">number</span><br>&#125;<br><span class="hljs-keyword">let</span> time = &lt;trueClock&gt;&#123;&#125;;<br>time.<span class="hljs-property">hours</span>=<span class="hljs-number">12</span>;<br>time.<span class="hljs-property">minutes</span>=<span class="hljs-number">32</span>;<br>time.<span class="hljs-property">seconds</span>=<span class="hljs-number">17</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>extends</code>关键字继承类</p><ul><li>会继承类的成员但不包括其实现，接口中类的成员只能由这个类的子类实现</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Control</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">state</span>: <span class="hljs-built_in">any</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">SelectableControl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Control</span> &#123;<br>    <span class="hljs-title function_">select</span>(): <span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Control</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SelectableControl</span> &#123;<br>    <span class="hljs-title function_">select</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Control</span> &#123;<br>    <span class="hljs-title function_">select</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><br><span class="hljs-comment">// 错误：“Image”类型缺少“state”属性。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Image</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SelectableControl</span> &#123;<br>    <span class="hljs-title function_">select</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Location</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="3-有关类"><a href="#3-有关类" class="headerlink" title="3.有关类"></a>3.有关类</h5><ul><li><p>就正常定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span>&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">enterName:<span class="hljs-built_in">string</span>,enterAge:<span class="hljs-built_in">number</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = enterName;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = enterAge;<br>  &#125;<br>  <span class="hljs-title function_">study</span>():<span class="hljs-built_in">void</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`I have been studied for <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span> years`</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>但是继承的时候要理解一下原理</p><ul><li>一个是附加属性的加入，和父类中一样的属性要放在<code>super()</code>里给父类调用</li><li><code>super()</code> 表示父类的构造函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">animal</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">enterName: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = enterName;<br>    &#125;<br>    <span class="hljs-title function_">func</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我的名字叫:&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">animal</span> &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>; <span class="hljs-comment">//子类中新添加的属性</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">enterDogName: <span class="hljs-built_in">string</span>, enterAge: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-variable language_">super</span>(enterDogName); <span class="hljs-comment">//调用父类的构造函数，</span><br>      <span class="hljs-comment">//调用子类实例的时候(name,age),name属性是父类中有的，用super()去调用父类的构造函数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = enterAge;<br>      <span class="hljs-comment">//新添加的属性，需要用this关键字</span><br>      <span class="hljs-comment">//this关键字必须在super()函数后面</span><br>    &#125;<br>  <span class="hljs-comment">//重写override 父类中的方法 函数名、参数一样，代码不一样</span><br>    <span class="hljs-title function_">func</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This is a Dog and I override parent\&#x27;s name&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//同理</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">human</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">animal</span> &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-attr">language</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">enterName: <span class="hljs-built_in">string</span>, enterAge: <span class="hljs-built_in">number</span>, enterLanguage: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">super</span>(enterName);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = enterAge;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">language</span> = enterLanguage;<br>    &#125;<br>    <span class="hljs-title function_">func</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I am human and I can say&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">language</span>);<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> pe1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">human</span>(<span class="hljs-string">&#x27;zly&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;CHN&#x27;</span>);<br><span class="hljs-comment">//前两个参数都给传到子类human的constructor里,&#x27;zly&#x27;再传给super()</span><br>pe1.<span class="hljs-title function_">func</span>();<br></code></pre></td></tr></table></figure></li></ul><h6 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h6><p><code>public</code></p><ul><li>程序里定义的所有成员都可以访问 </li></ul><p><code>protected</code></p><ul><li>程序里定义的成员阿崽派生类(子类)中仍然可以访问</li></ul><p><code>private</code></p><ul><li><p>不能在声明它的类外部访问</p></li><li><p>使用<code>get</code>、<code>set</code>关键字进行访问（存取器）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> passcode = <span class="hljs-string">&quot;secret passcode&quot;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-attr">_fullName</span>: <span class="hljs-built_in">string</span>;<br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">fullName</span>(): <span class="hljs-built_in">string</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fullName</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">fullName</span>(<span class="hljs-params">newName: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (passcode &amp;&amp; passcode == <span class="hljs-string">&quot;secret passcode&quot;</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">_fullName</span> = newName;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error: Unauthorized update of employee!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> employee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>();<br>employee.<span class="hljs-property">fullName</span> = <span class="hljs-string">&quot;Bob Smith&quot;</span>;<br><span class="hljs-keyword">if</span> (employee.<span class="hljs-property">fullName</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(employee.<span class="hljs-property">fullName</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h6><ul><li><p>不能直接被实例化</p></li><li><p>可以包含实现细节，但具体实现<strong>必须</strong>在子类中有体现</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name: <span class="hljs-built_in">string</span></span>) &#123;<br>    &#125;<br><br>    <span class="hljs-title function_">printName</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Department name: &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-title function_">printMeeting</span>(): <span class="hljs-built_in">void</span>; <span class="hljs-comment">// 必须在派生类中实现</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountingDepartment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Department</span> &#123;<br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>(<span class="hljs-string">&#x27;Accounting and Auditing&#x27;</span>); <span class="hljs-comment">// 在派生类的构造函数中必须调用 super()</span><br>    &#125;<br><br>    <span class="hljs-title function_">printMeeting</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">generateReports</span>(): <span class="hljs-built_in">void</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Generating accounting reports...&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">department</span>: <span class="hljs-title class_">Department</span>; <span class="hljs-comment">// 允许创建一个对抽象类型的引用</span><br>department = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(); <span class="hljs-comment">// 错误: 不能创建一个抽象类的实例</span><br>department = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountingDepartment</span>(); <span class="hljs-comment">// 允许对一个抽象子类进行实例化和赋值</span><br>department.<span class="hljs-title function_">printName</span>();<br>department.<span class="hljs-title function_">printMeeting</span>();<br>department.<span class="hljs-title function_">generateReports</span>(); <span class="hljs-comment">// 错误: 方法在声明的抽象类中不存在</span><br><span class="hljs-keyword">let</span> newDepartment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Department</span>(); <br>newDepartment.<span class="hljs-title function_">generateReports</span>()<span class="hljs-comment">//可以的</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h5><h6 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h6><ul><li><p>命名函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>)&#123;<br><span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> myAdd = <span class="hljs-keyword">function</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>完整的函数类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">myAdd</span>:<span class="hljs-function">(<span class="hljs-params">x:<span class="hljs-built_in">number</span>,y:<span class="hljs-built_in">number</span></span>)=&gt;</span><span class="hljs-built_in">number</span>=<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params">x:<span class="hljs-built_in">number</span>,y:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">number</span>&#123;<br>  <span class="hljs-keyword">return</span> x+y;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h6><ol><li><p>可选参数 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myAdd</span>(<span class="hljs-params">x:<span class="hljs-built_in">number</span>,y:<span class="hljs-built_in">number</span>,z?:<span class="hljs-built_in">number</span></span>):<span class="hljs-built_in">number</span>&#123;<br>  <span class="hljs-keyword">return</span> x+y+z;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>初始默认值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildName</span>(<span class="hljs-params">firstName:<span class="hljs-built_in">string</span>,secondName=<span class="hljs-string">&#x27;Ling yi&#x27;</span></span>)&#123;<br>  <span class="hljs-keyword">return</span> firstName+secondName;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>剩余参数</p><p>不知道有多少个变量、想同时操作多个变量的时候使用</p><p><code>Typescript</code>自动创建参数数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">buildName</span>(<span class="hljs-params">firstName:<span class="hljs-built_in">string</span>,secondName:<span class="hljs-built_in">string</span>,...restofName:<span class="hljs-built_in">string</span>[]</span>)&#123;<br>  <span class="hljs-keyword">return</span> firstName+secondName+restofName.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 编译器创建参数数组，名字是你在省略号（ ...）后面给定的名字，你可以在函数体内使用这个数组。</span><br></code></pre></td></tr></table></figure></li><li><p><strong>函数中的this</strong></p><p>独立调用对象中的方法需要注意<code>this</code>关键字的使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> deck = &#123;<br>    <span class="hljs-attr">suits</span>: [<span class="hljs-string">&quot;hearts&quot;</span>, <span class="hljs-string">&quot;spades&quot;</span>, <span class="hljs-string">&quot;clubs&quot;</span>, <span class="hljs-string">&quot;diamonds&quot;</span>],<br>    <span class="hljs-attr">cards</span>: <span class="hljs-title class_">Array</span>(<span class="hljs-number">52</span>),<br>    <span class="hljs-attr">createCardPicker</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">//返回一个函数</span><br>    <span class="hljs-comment">//    return function() &#123;</span><br>    <span class="hljs-comment">//        let pickedCard = Math.floor(Math.random() * 52);</span><br>    <span class="hljs-comment">//        let pickedSuit = Math.floor(pickedCard / 13);</span><br><br>    <span class="hljs-comment">//        return &#123;suit: this.suits[pickedSuit], card: pickedCard % 13&#125;;</span><br>          <span class="hljs-comment">//这里的this是指当前窗口window</span><br>    <span class="hljs-comment">//    &#125;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-function">()=&gt;</span> &#123;<br>        <span class="hljs-comment">//箭头函数能保存函数创建时的 this值，而不是调用时的值</span><br>        <span class="hljs-keyword">let</span> pickCard = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">52</span>);<br>        <span class="hljs-keyword">let</span> pickedSuit = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(pickCard/<span class="hljs-number">13</span>);<br>        <br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">suit</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">suits</span>[pickedSuit],<span class="hljs-attr">card</span>:pickCard%<span class="hljs-number">13</span>&#125;;<br>      &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> cardPicker = deck.<span class="hljs-title function_">createCardPicker</span>();<br><span class="hljs-keyword">let</span> pickedCard = <span class="hljs-title function_">cardPicker</span>(); <span class="hljs-comment">//报错</span><br><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;card: &quot;</span> + pickedCard.<span class="hljs-property">card</span> + <span class="hljs-string">&quot; of &quot;</span> + pickedCard.<span class="hljs-property">suit</span>);<br></code></pre></td></tr></table></figure></li><li><p>方法的重载overload 允许不同参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> suits = [<span class="hljs-string">&quot;hearts&quot;</span>, <span class="hljs-string">&quot;spades&quot;</span>, <span class="hljs-string">&quot;clubs&quot;</span>, <span class="hljs-string">&quot;diamonds&quot;</span>];<br><br><span class="hljs-comment">// pickCard方法重载</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pickCard</span>(<span class="hljs-params">x: &#123;suit: <span class="hljs-built_in">string</span>; card: <span class="hljs-built_in">number</span>; &#125;[]</span>): <span class="hljs-built_in">number</span>;<br><span class="hljs-comment">//提供type &#123;suit: string; card: number; &#125;[] 也就是object</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pickCard</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span></span>): &#123;<span class="hljs-attr">suit</span>: <span class="hljs-built_in">string</span>; <span class="hljs-attr">card</span>: <span class="hljs-built_in">number</span>; &#125;;<br><span class="hljs-comment">//提供type number 也就是number</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pickCard</span>(<span class="hljs-params">x</span>): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-comment">// Check to see if we&#x27;re working with an object/array</span><br>    <span class="hljs-comment">// if so, they gave us the deck and we&#x27;ll pick the card</span><br>  <br>    <span class="hljs-comment">//因为有了重载函数，可以输入两种预先重载的参数，然后在主函数中进行判断</span><br>    <span class="hljs-comment">//根据参数类型进行相应的操作</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x == <span class="hljs-string">&quot;object&quot;</span>) &#123;<br>        <span class="hljs-keyword">let</span> pickedCard = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * x.<span class="hljs-property">length</span>);<br>        <span class="hljs-keyword">return</span> pickedCard;<br>    &#125;<br>    <span class="hljs-comment">// Otherwise just let them pick the card</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> x == <span class="hljs-string">&quot;number&quot;</span>) &#123;<br>        <span class="hljs-keyword">let</span> pickedSuit = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(x / <span class="hljs-number">13</span>);<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">suit</span>: suits[pickedSuit], <span class="hljs-attr">card</span>: x % <span class="hljs-number">13</span> &#125;;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> myDeck = [&#123; <span class="hljs-attr">suit</span>: <span class="hljs-string">&quot;diamonds&quot;</span>, <span class="hljs-attr">card</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">suit</span>: <span class="hljs-string">&quot;spades&quot;</span>, <span class="hljs-attr">card</span>: <span class="hljs-number">10</span> &#125;, &#123; <span class="hljs-attr">suit</span>: <span class="hljs-string">&quot;hearts&quot;</span>, <span class="hljs-attr">card</span>: <span class="hljs-number">4</span> &#125;];<br><span class="hljs-keyword">let</span> pickedCard1 = myDeck[<span class="hljs-title function_">pickCard</span>(myDeck)];<br><span class="hljs-comment">//输入卡片</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;card: &quot;</span> + pickedCard1.<span class="hljs-property">card</span> + <span class="hljs-string">&quot; of &quot;</span> + pickedCard1.<span class="hljs-property">suit</span>);<br><br><span class="hljs-keyword">let</span> pickedCard2 = <span class="hljs-title function_">pickCard</span>(<span class="hljs-number">15</span>);<br><span class="hljs-comment">//输入数字</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;card: &quot;</span> + pickedCard2.<span class="hljs-property">card</span> + <span class="hljs-string">&quot; of &quot;</span> + pickedCard2.<span class="hljs-property">suit</span>);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">overF</span>(<span class="hljs-params">enterNum: <span class="hljs-built_in">number</span></span>): <span class="hljs-built_in">number</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">overF</span>(<span class="hljs-params">enterStr: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">string</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">overF</span>(<span class="hljs-params">enter</span>): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> enter == <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(enter);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> enter == <span class="hljs-string">&#x27;number&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是数字&#x27;</span> + enter);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-title function_">overF</span>(<span class="hljs-string">&#x27;sssss&#x27;</span>);<br><span class="hljs-title function_">overF</span>(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure></li></ol><h5 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5.泛型"></a>5.泛型</h5><ul><li><p>提供一个类型变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">function</span> fn&lt;T&gt;(<span class="hljs-attr">para</span>: T) &#123;<br>    <span class="hljs-keyword">return</span> para;<br>&#125;<br><span class="hljs-comment">//可以不指定泛型</span><br><span class="hljs-keyword">let</span> result1 = <span class="hljs-title function_">fn</span>(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//指定泛型</span><br><span class="hljs-keyword">let</span> result2 = fn&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;123&#x27;</span>);<br><br><span class="hljs-keyword">function</span> fn2&lt;T, K&gt;(<span class="hljs-attr">para1</span>: T, <span class="hljs-attr">para2</span>: K) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(para1);<br>    <span class="hljs-keyword">return</span> para2;<br>&#125;<br><span class="hljs-comment">//可以同时指定两个泛型</span><br><span class="hljs-keyword">let</span> result3 = fn2&lt;<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">123</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Inter</span> &#123;<br>    <span class="hljs-attr">length</span>: <span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-comment">//泛型继承接口，泛型T必须是Inter的一个实现类</span><br><span class="hljs-keyword">function</span> fn3&lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Inter</span>&gt;(<span class="hljs-attr">a</span>: T) &#123;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-property">length</span>;<br>&#125;<br><br><span class="hljs-comment">//泛型实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>&lt;T&gt;&#123;<br>    <span class="hljs-attr">name</span>: T;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: T</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> mc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mapNews项目</title>
    <link href="/2022/09/16/mapNews/mapNews/"/>
    <url>/2022/09/16/mapNews/mapNews/</url>
    
    <content type="html"><![CDATA[<h4 id="0-概述"><a href="#0-概述" class="headerlink" title="0.概述"></a>0.概述</h4><ol><li>项目需求：利用地图展示当天各地的新闻（新闻发生点可视化）<ul><li>想法：龙老师的当代地图学进展，地图是信息的载体</li><li>新闻这种信息（时间<code>t</code>、地点<code>x,y</code>、任务<code>z</code>）完美适合地图</li><li>之前对地图的信息理解只停留在地理数据上，没有人文数据</li><li>暑期项目没有使用到数据库的知识，可能需要学习</li><li>想测试一下数据在数据库中处理和在后端代码中处理的速度对比</li></ul></li><li>项目框架：<ul><li>前端框架：<code>Angular</code>  （真的只是框架，搭了个界面而已）</li><li>后端：<code>Nodejs</code></li><li>数据库服务：<code>Sqlite</code></li></ul></li><li>具体需求<ul><li>具有可视化地图功能，利用<code>leafletJS</code>实现</li><li>后端自动爬取<a href="www.chinanews.com">中国新闻网</a>内容，并将相关数据存储到数据库<code>News.db</code>中<ul><li>标题、内容、发布时间</li><li>网页链接、内容摘要、编码格式、爬取时间    </li></ul></li><li>（提前）建立<code>Position.db</code>数据库，存储地名以及坐标（经纬度）</li><li><code>New.db</code>中新闻内容<code>News.content</code>与<code>Position.db</code>中地名<code>Position.city</code>模糊匹配得到新闻经纬度</li><li>前端利用新闻经纬度进行可视化</li></ul></li></ol><h4 id="1-用到的模块"><a href="#1-用到的模块" class="headerlink" title="1.用到的模块"></a>1.用到的模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myCheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<br><span class="hljs-comment">//cheerio 用在服务器端需要对DOM进行操作的地方</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-comment">//用于前后端通信</span><br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-comment">//用于前后端通信</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">SqliteDB</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./sqlite.js&#x27;</span>).<span class="hljs-property">SqliteDB</span>;<br><span class="hljs-comment">//用于操作Sqlite数据库，sqlite.js封装好的文件 </span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//sqlite.js</span><br><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> sqlite3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sqlite3&#x27;</span>).<span class="hljs-title function_">verbose</span>();<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">DB</span> = <span class="hljs-variable constant_">DB</span> || &#123;&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;<br>    filePath = <span class="hljs-string">&#x27;/Users/lingyi/postGraduate/codeMapNews/server/Database/&#x27;</span> + file;<br>  <span class="hljs-comment">//存储路径</span><br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span> = <span class="hljs-keyword">new</span> sqlite3.<span class="hljs-title class_">Database</span>(filePath);<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">exist</span> = fs.<span class="hljs-title function_">existsSync</span>(filePath);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">DB</span>.<span class="hljs-property">exist</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Creating db file!&quot;</span>);<br>        fs.<span class="hljs-title function_">openSync</span>(filePath, <span class="hljs-string">&#x27;w&#x27;</span>);<br>    &#125;;<br><br>&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">printErrorInfo</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error Message:&quot;</span> + err.<span class="hljs-property">message</span> + <span class="hljs-string">&quot; ErrorNumber:&quot;</span>);<br>&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">createTable</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">sql</span>) &#123;<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">serialize</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">run</span>(sql, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != err) &#123;<br>                <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">printErrorInfo</span>(err);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;;<br><br><span class="hljs-comment">/// insert newsData Format </span><br><span class="hljs-comment">//[[title, content, publish_date, url, source_name,source_encoding, crawltime]]</span><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">insertData</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">sql, objects</span>) &#123;<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">serialize</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> stmt = <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">prepare</span>(sql);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; objects.<span class="hljs-property">length</span>; ++i) &#123;<br>            stmt.<span class="hljs-title function_">run</span>(objects[i]);<br>        &#125;<br>        stmt.<span class="hljs-title function_">finalize</span>();<br>    &#125;);<br><br>&#125;;<br><br><span class="hljs-comment">//这里对数据库的插入操作进行了改写，后端代码需要等数据库数据读取完之后在进行操作</span><br><span class="hljs-comment">//写成Promise的格式</span><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">queryData</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">sql</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">all</span>(sql, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, rows</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != err) &#123;<br>                <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">printErrorInfo</span>(err);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-title function_">resolve</span>(rows)<br>        &#125;);<br>    &#125;)<br>&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">executeSql</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">sql</span>) &#123;<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">run</span>(sql, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != err) &#123;<br>            <span class="hljs-variable constant_">DB</span>.<span class="hljs-title function_">printErrorInfo</span>(err);<br>        &#125;<br>    &#125;);<br>&#125;;<br><br><span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">close</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">close</span>();<br>&#125;;<br><br><span class="hljs-comment">/// export SqliteDB.</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">SqliteDB</span> = <span class="hljs-variable constant_">DB</span>.<span class="hljs-property">SqliteDB</span>;<br></code></pre></td></tr></table></figure><h4 id="2-具体功能的实现"><a href="#2-具体功能的实现" class="headerlink" title="2. 具体功能的实现"></a>2. 具体功能的实现</h4><h5 id="1-服务的启动"><a href="#1-服务的启动" class="headerlink" title="1. 服务的启动"></a>1. 服务的启动</h5><ul><li>使用到了<code>express模块</code></li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8082</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server is running on localhost:8082&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">//在8082端口启动服务</span><br></code></pre></td></tr></table></figure><h5 id="2-响应前端请求"><a href="#2-响应前端请求" class="headerlink" title="2.响应前端请求"></a>2.响应前端请求</h5><ul><li>用到的模块：<code>axios</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/server&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>   <span class="hljs-comment">//设置请求头 允许跨域</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>    <span class="hljs-title function_">reqNewsData</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>      <span class="hljs-comment">//向前端发送数据</span><br>        res.<span class="hljs-title function_">send</span>(data)<br>    &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h5 id="3-数据库的建立"><a href="#3-数据库的建立" class="headerlink" title="3. 数据库的建立"></a>3. 数据库的建立</h5><ul><li>使用到了<code>sqlite.js</code>（见上文）</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> file = <span class="hljs-string">&#x27;News.db&#x27;</span>;<br><span class="hljs-keyword">var</span> sqliteDBNews = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqliteDB</span>(file); <br><span class="hljs-comment">//在本地新建名为News.db的数据库</span><br><span class="hljs-keyword">let</span> createNewsTableSql = <span class="hljs-string">&quot;create table if not exists News(title TEXT,content TEXT,publish_date TEXT,url TEXT,source_name TEXT,source_encoding TETX,crawltime TEXT)&quot;</span>;<br><span class="hljs-comment">//News.db数据库建表规则</span><br><span class="hljs-keyword">let</span> insertNewsSql = <span class="hljs-string">&quot;insert OR IGNORE into News(title,content,publish_date,url,source_name,source_encoding,crawltime) values(?,?,?,?,?,?,?)&quot;</span>;<br><span class="hljs-comment">//News.db数据库News表数据插入规则</span><br>sqliteDBNews.<span class="hljs-title function_">createTable</span>(createNewsTableSql);<br><span class="hljs-comment">//创建News表</span><br></code></pre></td></tr></table></figure><h5 id="4-新闻数据的处理"><a href="#4-新闻数据的处理" class="headerlink" title="4. 新闻数据的处理"></a>4. 新闻数据的处理</h5><ul><li>使用到了<code>cheerio</code>模块</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//设置头文件 避免爬虫被屏蔽</span><br><span class="hljs-keyword">let</span> headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.65 Safari/537.36&#x27;</span><br>&#125;<br><br><span class="hljs-comment">//发送请求,获得根页面所有信息，利用reqCallback()函数对根网页中的新闻页面进行进一步解析</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reqNewsData</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        axios.<span class="hljs-title function_">get</span>(seedURL, &#123;<br>            <span class="hljs-attr">params</span>: &#123;<br>                <span class="hljs-attr">url</span>: seedURL,<br>                <span class="hljs-attr">encoding</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">headers</span>: headers,<br>                <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span> <span class="hljs-comment">//</span><br>            &#125;<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>            <span class="hljs-title function_">reqCallback</span>(response.<span class="hljs-property">data</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(data)<br>            &#125;)<br>        &#125;)<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//解析根页面中的网页链接，得到具体新闻的链接，交给newsGet()函数处理具体的</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reqCallback</span>(<span class="hljs-params">body</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>         <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// console.log(html);</span><br>        <span class="hljs-comment">//用cheerio解析html</span><br>        <span class="hljs-keyword">var</span> $ = myCheerio.<span class="hljs-title function_">load</span>(body, &#123; <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">true</span> &#125;);<br>         &#125; <span class="hljs-keyword">catch</span> (e) &#123; <br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读种子页面并转码出错：&#x27;</span> + e)<br>         &#125;;<br>        <span class="hljs-keyword">var</span> seedurl_news;<br>        <span class="hljs-keyword">try</span> &#123;<br>            seedurl_news = <span class="hljs-built_in">eval</span>(seedURL_format);<br>            <span class="hljs-comment">// console.log(seedurl_news);</span><br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;url列表所处的html块识别出错：&#x27;</span> + e) &#125;;<br>        seedurl_news.<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">i, e</span>) &#123; <span class="hljs-comment">//遍历种子页面里所有的a链接</span><br>            <span class="hljs-keyword">var</span> myURL = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//得到具体新闻url</span><br>                <span class="hljs-keyword">var</span> href = <span class="hljs-string">&quot;&quot;</span>;<br>                href = $(e).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;href&quot;</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (href) == <span class="hljs-string">&quot;undefined&quot;</span>) &#123;  <span class="hljs-comment">// 有些网页地址undefined</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (href.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;http://&#x27;</span>) &gt;= <span class="hljs-number">0</span> || href.<span class="hljs-title function_">toLowerCase</span>().<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;https://&#x27;</span>) &gt;= <span class="hljs-number">0</span> &amp;&amp; href.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;shtml&#x27;</span>))<br>                    myURL = href; <span class="hljs-comment">//http://开头的或者https://开头</span><br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (href.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;//&#x27;</span>))<br>                    myURL = <span class="hljs-string">&#x27;http:&#x27;</span> + href; <span class="hljs-comment">//开头的</span><br>                <span class="hljs-keyword">else</span><br>                    myURL = seedURL.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, seedURL.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>) + href; <span class="hljs-comment">//其他</span><br>            &#125;<br>            <span class="hljs-keyword">catch</span> (e) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;识别种子页面中的新闻链接出错：&#x27;</span> + e)<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!url_reg.<span class="hljs-title function_">test</span>(myURL)) &#123;<br>                <span class="hljs-comment">//检验是否符合新闻url的正则表达式</span><br>                <span class="hljs-comment">// console.log(url_reg.test(myURL));</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>          <span class="hljs-comment">//利用newsGet()函数解析具体的网页</span><br>            <span class="hljs-title function_">newsGet</span>(myURL).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                <span class="hljs-title function_">resolve</span>(data)    <br>            &#125;); <br>        &#125;);<br>    &#125;)<br>&#125;<br><br><span class="hljs-comment">//设置具体新闻网页的解析规范，要自己到具体的网页Elemens里去查找、获取DOM元素</span><br><span class="hljs-comment">//利用了jQuery  eval函数 计算某个字符串，并执行其中的JS代码 因此将jQuery写为String模板</span><br><span class="hljs-keyword">const</span> seedURL_format = <span class="hljs-string">&quot;$(&#x27;a&#x27;)&quot;</span>;<br><span class="hljs-keyword">const</span> keywords_format = <span class="hljs-string">&quot; $(&#x27;meta[name=\&quot;keywords\&quot;]&#x27;).eq(0).attr(\&quot;content\&quot;)&quot;</span>;<br><span class="hljs-keyword">const</span> title_format = <span class="hljs-string">&quot;$(&#x27;title&#x27;).text()&quot;</span>;<br><span class="hljs-keyword">const</span> date_format = <span class="hljs-string">&quot;$(&#x27;#pubtime_baidu&#x27;).text()&quot;</span>;<br><span class="hljs-keyword">const</span> engDate_format = <span class="hljs-string">&quot;$(&#x27;.downinfo.dottlne&#x27;).children(&#x27;span&#x27;).eq(0).text()&quot;</span><br><span class="hljs-keyword">const</span> author_format = <span class="hljs-string">&quot;$(&#x27;#author_baidu&#x27;).text()&quot;</span><br><span class="hljs-keyword">const</span> engAuthor_format = <span class="hljs-string">&quot;$(&#x27;.downinfo.dottlne&#x27;).children(&#x27;span&#x27;).eq(2).text()&quot;</span><br><span class="hljs-keyword">const</span> content_format = <span class="hljs-string">&quot;$(&#x27;.left_zw&#x27;).children(&#x27;p&#x27;).text()&quot;</span>;<br><span class="hljs-keyword">const</span> engContent_format = <span class="hljs-string">&quot;$(&#x27;.content&#x27;).children(&#x27;p&#x27;).text()&quot;</span>;<br><span class="hljs-keyword">const</span> desc_format = <span class="hljs-string">&quot; $(&#x27;meta[name=\&quot;description\&quot;]&#x27;).eq(0).attr(\&quot;content\&quot;)&quot;</span>;<br><span class="hljs-keyword">const</span> source_format = <span class="hljs-string">&quot;$(&#x27;#source_baidu&#x27;).text()&quot;</span>;<br><span class="hljs-comment">//匹配具体的新闻网页格式</span><br><span class="hljs-keyword">const</span> url_reg = <span class="hljs-regexp">/[a-zA-z]+:\/\/[^\s]*[1-9]\d&#123;5&#125;(?!\d).shtml/</span>;<br><br><span class="hljs-comment">//解析新闻页面并进行后续处理</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">newsGet</span>(<span class="hljs-params">myURL</span>) &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        axios.<span class="hljs-title function_">get</span>(myURL, &#123;<br>            <span class="hljs-attr">params</span>: &#123;<br>                <span class="hljs-attr">url</span>: myURL,<br>                <span class="hljs-attr">encoding</span>: <span class="hljs-literal">null</span>,<br>                <span class="hljs-attr">headers</span>: headers,<br>            &#125;<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> response =&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//用cheerio解析html</span><br>            <span class="hljs-keyword">var</span> $ = myCheerio.<span class="hljs-title function_">load</span>(response.<span class="hljs-property">data</span>, &#123; <span class="hljs-attr">decodeEntities</span>: <span class="hljs-literal">true</span> &#125;);<br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;    <br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读新闻页面并转码出错：&#x27;</span> + e);<br>            &#125;;<br>            <span class="hljs-comment">// console.log(&quot;转码读取成功:&quot; + myURL);</span><br>            <span class="hljs-comment">//动态执行format字符串，构建json对象准备写入文件或数据库</span><br>            <span class="hljs-keyword">var</span> fetch = &#123;&#125;;<br>            fetch.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;&quot;</span>;<br>            fetch.<span class="hljs-property">content</span> = <span class="hljs-string">&quot;&quot;</span>;<br>            fetch.<span class="hljs-property">publish_date</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">toFormat</span>(<span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>);<br>            <span class="hljs-comment">//fetch.html = myhtml;</span><br>            fetch.<span class="hljs-property">url</span> = myURL;<br>            fetch.<span class="hljs-property">source_name</span> = source_name;<br>            fetch.<span class="hljs-property">source_encoding</span> = myEncoding; <span class="hljs-comment">//编码</span><br>            fetch.<span class="hljs-property">crawltime</span> = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).<span class="hljs-title function_">toFormat</span>(<span class="hljs-string">&quot;YYYY-MM-DD&quot;</span>);<br><br>            <span class="hljs-comment">//没有关键词就用sourcename</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(keywords_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">keywords</span> = source_name;  <br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">keywords</span> = <span class="hljs-built_in">eval</span>(keywords_format);<br>            &#125;<br><span class="hljs-comment">//没有title就用空字符串，不过一般都会有</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(title_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;&quot;</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">title</span> = <span class="hljs-built_in">eval</span>(title_format); <span class="hljs-comment">//标题</span><br>            &#125;<br><span class="hljs-comment">//日期格式处理</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(date_format) != <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">publish_date</span> = <span class="hljs-built_in">eval</span>(date_format); <span class="hljs-comment">//刊登日期</span><br>                <span class="hljs-keyword">let</span> regExp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(fetch.<span class="hljs-property">publish_date</span>)<br>                fetch.<span class="hljs-property">publish_date</span> = regExp.<span class="hljs-title function_">exec</span>(fetch.<span class="hljs-property">publish_date</span>)[<span class="hljs-number">0</span>];<br>                fetch.<span class="hljs-property">publish_date</span> = fetch.<span class="hljs-property">publish_date</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;年&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>)<br>                fetch.<span class="hljs-property">publish_date</span> = fetch.<span class="hljs-property">publish_date</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;月&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>)<br>                fetch.<span class="hljs-property">publish_date</span> = fetch.<span class="hljs-property">publish_date</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;日&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>                <span class="hljs-comment">// fetch.publish_date = new Date(fetch.publish_date).toFormat(&quot;YYYY-MM-DD HH:mm:ss&quot;);</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">publish_date</span> = <span class="hljs-built_in">eval</span>(engDate_format);<br>            &#125;<br><span class="hljs-comment">//作者信息处理</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(author_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">author</span> = <span class="hljs-built_in">eval</span>(engAuthor_format).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//eval(author_format);  //作者</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">author</span> = <span class="hljs-built_in">eval</span>(author_format);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(content_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">content</span> = <span class="hljs-built_in">eval</span>(engContent_format);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">content</span> = <span class="hljs-built_in">eval</span>(content_format).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\r\n&quot;</span> + fetch.<span class="hljs-property">author</span>, <span class="hljs-string">&quot;&quot;</span>); <br>              <span class="hljs-comment">//内容,是否要去掉作者信息自行决定</span><br>            &#125;<br>          <span class="hljs-comment">//来源处理</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(source_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">source</span> = fetch.<span class="hljs-property">source_name</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">source</span> = <span class="hljs-built_in">eval</span>(source_format).<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//来源    </span><br>            &#125;<br>          <span class="hljs-comment">//摘要信息处理</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">eval</span>(desc_format) == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                fetch.<span class="hljs-property">desc</span> = fetch.<span class="hljs-property">title</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fetch.<span class="hljs-property">desc</span> = <span class="hljs-built_in">eval</span>(desc_format); <span class="hljs-comment">//摘要   </span><br>            &#125;<br>          <span class="hljs-comment">//如果新闻中没有文字正文，或者没有发布日期，跳过该文章，return</span><br>            <span class="hljs-keyword">if</span> (fetch.<span class="hljs-property">content</span> == <span class="hljs-string">&quot;&quot;</span> || fetch.<span class="hljs-property">publish_date</span> == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-comment">//设置数据库插入元组</span><br>                <span class="hljs-keyword">var</span> newsCell = [[fetch.<span class="hljs-property">title</span>, fetch.<span class="hljs-property">content</span>, fetch.<span class="hljs-property">publish_date</span>, fetch.<span class="hljs-property">url</span>, fetch.<span class="hljs-property">source_name</span>, fetch.<span class="hljs-property">source_encoding</span>, fetch.<span class="hljs-property">crawltime</span>]];<br>              <span class="hljs-comment">//将文章信息添加进数据库</span><br>                sqliteDBNews.<span class="hljs-title function_">insertData</span>(insertNewsSql, newsCell);<br>               <span class="hljs-comment">//设置数据库查询语句，匹配新闻正文中出现的城市与城市所在经纬度</span><br>                <span class="hljs-keyword">var</span> querySql = <span class="hljs-string">`</span><br><span class="hljs-string">                SELECT</span><br><span class="hljs-string">                Location.*,News.*</span><br><span class="hljs-string">                    FROM</span><br><span class="hljs-string">                        Location</span><br><span class="hljs-string">                        INNER JOIN News </span><br><span class="hljs-string">                    WHERE</span><br><span class="hljs-string">                        News.content LIKE &#x27;%&#x27;||Location.city||&#x27;%&#x27;`</span>;<br>               <span class="hljs-comment">//执行数据库查询语句，作为Promise返回</span><br>                <span class="hljs-keyword">await</span> sqliteDBNews.<span class="hljs-title function_">queryData</span>(querySql).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                    <span class="hljs-title function_">resolve</span>(data)<br>                &#125;)<br>                <span class="hljs-comment">//存储json</span><br>              <span class="hljs-comment">// var filename = source_name + &quot;_&quot; + (new Date()).toFormat(&quot;YYYY-MM-DD&quot;) +</span><br>                 <span class="hljs-comment">//   &quot;_&quot; + myURL.substr(myURL.lastIndexOf(&#x27;/&#x27;) + 1) + &quot;.json&quot;;</span><br>                <span class="hljs-comment">// fs.writeFileSync(&#x27;/Users/lingyi/postGraduate/codeMapNews/server/News/&#x27; + filename, JSON.stringify(fetch));</span><br>            &#125;<br>        &#125;)<br>    &#125;)<br>    <span class="hljs-comment">// &#125;);</span><br><br></code></pre></td></tr></table></figure><h5 id="5-对执行顺序的一些说明"><a href="#5-对执行顺序的一些说明" class="headerlink" title="5.对执行顺序的一些说明"></a>5.对执行顺序的一些说明</h5><ol><li><p>后端服务启动 （1）</p></li><li><p>前端发送请求进入 （2）</p><ul><li>进入（4）函数<code>reqNewsData()</code>，等待<code>reqCallback()</code>函数期约完成<ul><li><code>resolve </code>  <code>reqNewsData()</code>期约返回的<code>Promise</code>数据(数据库运算完成的新闻数据，包含(content、latitude、longitude))</li></ul></li></ul></li><li><p>函数<code>reqNewsData()</code>等待<code>reqCallback()</code>期约完成，</p><ul><li><code>resolve </code>  <code>reqCallback()</code>期约返回的<code>Promise</code>数据(数据库运算完成的新闻数据，包含(content、latitude、longitude))</li></ul></li><li><p>函数<code>reqCallback()</code>等待<code>newsGet()</code>期约完成，</p><ul><li><code>resolve </code>  <code>newsGet()</code>期约返回的<code>Promise</code>数据(数据库运算完成的新闻数据，包含(content、latitude、longitude))</li></ul></li><li><p>函数<code>newsGet()</code>等待<code>sqliteDBNews.queryData()</code>期约完成，</p><ul><li><code>resolve </code>  <code>sqliteDBNews.queryData()</code>期约返回的<code>Promise</code>数据(数据库运算完成的新闻数据，包含(content、latitude、longitude))</li></ul><p><strong>核心：将数据库返回的数据一层一层传上去，但是由于异步，处理需要时间，所以用Promise一层一层返回</strong>     </p></li></ol><h5 id="6-前端代码"><a href="#6-前端代码" class="headerlink" title="6.前端代码"></a>6.前端代码</h5><ul><li><p>用<code>angular-cli</code>生成的，很简单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--app.component.html--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* app.component.css */</span><br><span class="hljs-selector-id">#map</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//app.Component.ts</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> L <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;leaflet&#x27;</span>;<br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-root&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.css&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppComponent</span> &#123;<br>  title = <span class="hljs-string">&#x27;mapNews&#x27;</span>;<br>  <span class="hljs-attr">map</span>: <span class="hljs-built_in">any</span>;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>  &#125;<br>  <br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">initMap</span>()<br>  &#125;<br><br>  <span class="hljs-keyword">async</span> <span class="hljs-title function_">initMap</span>(): <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-built_in">any</span>&gt; &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span> = L.<span class="hljs-title function_">map</span>(<span class="hljs-string">&#x27;map&#x27;</span>, &#123;<br>      <span class="hljs-attr">zoom</span>: <span class="hljs-number">7</span>,<br>      <span class="hljs-attr">center</span>: [<span class="hljs-number">32.10296</span>, <span class="hljs-number">118.91125</span>]<br>    &#125;);<br><br>    <span class="hljs-comment">// 添加图层到地图上</span><br>    <span class="hljs-keyword">let</span> tile = L.<span class="hljs-title function_">tileLayer</span>(<span class="hljs-string">&#x27;http://wprd04.is.autonavi.com/appmaptile?lang=zh_cn&amp;size=1&amp;style=7&amp;x=&#123;x&#125;&amp;y=&#123;y&#125;&amp;z=&#123;z&#125;&#x27;</span>, &#123;<br>      <span class="hljs-attr">maxZoom</span>: <span class="hljs-number">18</span>,<br>    &#125;);<br>    tile.<span class="hljs-title function_">addTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>);<br>    <span class="hljs-comment">//等待拿到数据</span><br>    <span class="hljs-keyword">let</span> temp = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">reqNewsData</span>();<br>    <span class="hljs-keyword">let</span> newsPos = temp.<span class="hljs-property">data</span>;<br>    <span class="hljs-keyword">var</span> newsLon = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> newsLat = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> newsContent = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//将拿到的经纬度，作为点坐标加载，Content作为bindPipup()提示参数加载</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; newsPos.<span class="hljs-property">length</span>; i++) &#123;<br>      newsLon = newsPos[i].<span class="hljs-property">lon</span>;<br>      newsLat = newsPos[i].<span class="hljs-property">lat</span>;<br>      newsContent = newsPos[i].<span class="hljs-property">content</span>;<br>      L.<span class="hljs-title function_">marker</span>([newsLat, newsLon]).<span class="hljs-title function_">addTo</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">map</span>).<span class="hljs-title function_">bindPopup</span>(newsContent)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//向后端发送请求</span><br>  <span class="hljs-title function_">reqNewsData</span>(): <span class="hljs-built_in">any</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>      axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:8082/server&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(res)<br>      &#125;)<br>    &#125;)<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-实现效果"><a href="#3-实现效果" class="headerlink" title="3.实现效果"></a>3.实现效果</h4><p><img src="/img/mapNews1.png" alt="mapNewsIMG1"></p><p><img src="/img/mapNews2.png" alt="mapNewsIMG2"></p><p><img src="/img/mapNews3.png" alt="mapNewsIMG3"></p><p><img src="/img/mapNews4.png" alt="mapNewsIMG4"></p><p><img src="/img/mapNews5.png" alt="数据库服务(部分)"></p><h4 id="4-目前的不足"><a href="#4-目前的不足" class="headerlink" title="4. 目前的不足"></a>4. 目前的不足</h4><ol><li>爬取到的新闻本身是没有坐标的，本项目在数据库中根据正文内容实现了城市坐标匹配<ul><li>匹配的精度、速度取决于所使用的数据库</li><li>当一个新闻中有多个地点、或者有类地名的名词时也会匹配到“错误”的城市坐标</li><li>解决方法<ul><li>更改数据库中城市数据组织方式</li><li>优化数据库中匹配（查询）方法，对正文中的城市进行更高规格的检索</li></ul></li></ul></li><li>前后端通信的时候，有时候数据传输速度很快，有的时候很慢，有的时候后端甚至自己报错停掉了<ul><li>可能取决于当时的网络情况</li><li> 后端是用<code>Nodejs</code>写的，存在异步情况。数据处理（存、匹配、取）时间过长导致响应时间过长</li></ul></li><li>其他 遇到问题再说吧，纯粹突发奇想</li></ol>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6笔记</title>
    <link href="/2022/09/08/ES6%E7%AC%94%E8%AE%B0/ES6%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/08/ES6%E7%AC%94%E8%AE%B0/ES6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h5 id="运算符的拓展"><a href="#运算符的拓展" class="headerlink" title="运算符的拓展"></a>运算符的拓展</h5><h6 id="1-链式判断运算符"><a href="#1-链式判断运算符" class="headerlink" title="1.链式判断运算符 ?."></a>1.链式判断运算符 ?.</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span> obj?.<span class="hljs-property">properities</span><br><span class="hljs-comment">//判断对象的属性是否存在</span><br><span class="hljs-number">2.</span> obj?.[expressions]<br><span class="hljs-comment">//判断对象的属性是否存在</span><br><span class="hljs-number">3.</span> func?.[...args]<br><span class="hljs-comment">//函数或者方法对象是否存在</span><br></code></pre></td></tr></table></figure><p><strong>eg:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> hex = <span class="hljs-string">&quot;#COFFEE&quot;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/#([A-Z]+)/i</span>)?.[<span class="hljs-number">1</span>];<br><span class="hljs-comment">//COFFEE //正则表达式的使用</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">a</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这是a的匿名函数&#x27;</span>);<br>&#125;<br>a?.()<br><span class="hljs-comment">//这是a的匿名函数 </span><br><span class="hljs-comment">//等价于 a==null ? undefined :a()  函数a是null吗？是的话就赋值为undefined，否则（不是null）就执行a()</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Javascript中一切皆对象</span><br><br>a?.<span class="hljs-property">b</span><br><span class="hljs-comment">// 等同于</span><br>a == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : a.<span class="hljs-property">b</span><br><span class="hljs-comment">//对象a是null吗？ 是的话就赋值为undefined,否则执行a.b  获得对象a的b属性</span><br><br>a?.[x]<br><span class="hljs-comment">// 等同于</span><br>a == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : a[x]<br><span class="hljs-comment">//对象a是null吗？ 是的话就赋值为undefined,否则执行a[x]  获得对象a[x]的方法</span><br><br>a?.<span class="hljs-title function_">b</span>()<br><span class="hljs-comment">// 等同于</span><br>a == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : a.<span class="hljs-title function_">b</span>()<br><span class="hljs-comment">//对象a是null吗？ 是的话就赋值为undefined,否则执行a.b()  对象a中的b()方法</span><br><br>a?.()<br><span class="hljs-comment">// 等同于</span><br>a == <span class="hljs-literal">null</span> ? <span class="hljs-literal">undefined</span> : <span class="hljs-title function_">a</span>()<br><span class="hljs-comment">//对象a是null吗？ 是的话就赋值为undefined,否则执行a()  对象a()方法</span><br></code></pre></td></tr></table></figure><p><em>注意：</em>如果<code>a?.b()</code>里面的<code>a.b</code>有值，但不是函数，不可调用，那么<code>a?.b()</code>是会报错的。<code>a?.()</code>也是如此，如果<code>a</code>不是<code>null</code>或<code>undefined</code>，但也不是函数，那么<code>a?.()</code>会报错。</p><h5 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h5><h6 id="1-为了解决的问题"><a href="#1-为了解决的问题" class="headerlink" title="1.为了解决的问题"></a>1.为了解决的问题</h6><p>对象的属性名称都是字符串，特别是自己定义的时候，特别容易冲突。</p><h6 id="2-含义"><a href="#2-含义" class="headerlink" title="2.含义"></a>2.含义</h6><p><code>Symbol()</code>代表唯一的值</p><h6 id="3-机制"><a href="#3-机制" class="headerlink" title="3.机制"></a>3.机制</h6><p>如果<code>Symbol()</code>的参数是一个对象，就会调用改对象的<code>toString()</code>方法，将其转为字符串，然后生成一个<code>Symbol</code>值</p><p><strong>eg:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sym = <span class="hljs-title class_">Symbol</span>(obj);<br>sym <span class="hljs-comment">// Symbol(abc)</span><br><br><span class="hljs-title class_">Symbol</span>()函数只表示当前赋值对象的描述<br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">Symbol</span>()<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">Symbol</span>()<br>a === b <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.可以给Symbol添加描述</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;Attribute a&#x27;</span>)<br><span class="hljs-title function_">conlog</span>(a.<span class="hljs-property">discription</span>)<br><span class="hljs-comment">//Attribute a</span><br><br><span class="hljs-comment">//Symbol()作为属性名，此时不能用点运算符获得属性</span><br><span class="hljs-keyword">let</span> mySymbol = <span class="hljs-title class_">Symbol</span>()<br><span class="hljs-comment">//创建变量</span><br><span class="hljs-keyword">let</span> b = &#123;<br>    [mySymbol]: <span class="hljs-string">&#x27;helo&#x27;</span><br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">let</span> c=&#123;&#125;<br>c[mySymbol]=<span class="hljs-string">&#x27;helo&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d[mySymbol]);<br><span class="hljs-comment">//获得属性</span><br><br><span class="hljs-keyword">let</span> d =&#123;<br>  [mySymbol](value)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>  &#125;<br>&#125;<br>d[mySymbol](<span class="hljs-string">&#x27;打印值&#x27;</span>)<br><span class="hljs-comment">//调用方法，注意参数args的传入方式 [name](args)&#123;expression&#125;</span><br></code></pre></td></tr></table></figure><h6 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArea</span>(<span class="hljs-params">shape, options</span>) &#123;<br>    <span class="hljs-keyword">let</span> area = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">switch</span> (shape) &#123;<br>        <span class="hljs-keyword">case</span> shapeType.<span class="hljs-property">triangle</span>:<br>            area = <span class="hljs-number">.5</span> * options.<span class="hljs-property">width</span> * options.<span class="hljs-property">height</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">case</span> shapeType.<span class="hljs-property">square</span>:<br>            area = <span class="hljs-number">6</span><br>            <span class="hljs-keyword">break</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> area<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getArea</span>(shapeType.<span class="hljs-property">triangle</span>, &#123; <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>, &#125;));<br><span class="hljs-comment">//5000</span><br></code></pre></td></tr></table></figure><h5 id="Promise与顶层await"><a href="#Promise与顶层await" class="headerlink" title="Promise与顶层await"></a>Promise与顶层await</h5><h6 id="1-什么是Promise"><a href="#1-什么是Promise" class="headerlink" title="1.什么是Promise"></a>1.什么是Promise</h6><ul><li><p>在Javascript中表示期约，说白了就是当想获取的数据需要花时间计算时候，“等”这个计算完成，再执行后面的代码，避免后面拿值拿不到。</p></li><li><p>解释<a href="https://www.cnblogs.com/lvdabao/p/es6-promise-1.html">大白话讲解Promise（一） </a></p></li></ul><h6 id="2-await"><a href="#2-await" class="headerlink" title="2.await"></a>2.await</h6><ul><li>await用于等待一个<code>Promise</code>对象，只能在异步函数<code>async function    </code>中使用<ul><li>首先为什么是一个<code>Promise</code>对象，因为<code>await</code>我理解为一个标志，标志后面的函数需要返回<code>Promise</code>对象</li><li>如果表达式的值不是<code>Promise</code>对象，<code>await</code>会把该值转换为已经正常处理的<code>Promise</code>结果并返回</li><li>通过<code>Promise</code>对象实现异步</li></ul></li></ul><h6 id="3-顶层await"><a href="#3-顶层await" class="headerlink" title="3.顶层await"></a>3.顶层await</h6><ul><li><p>ES6之后，可以单独使用<code>await</code>？ ==存疑==</p><ul><li><p>旧版本在一个async函数外单独使用<code>await</code>会引起错误，常用立即执行函数表达式(<code>IIFE</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;ok&#x27;</span>) <span class="hljs-comment">//错误用法</span><br><br>(<span class="hljs-title function_">async</span>()=&gt;&#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>  )<br>&#125;) <span class="hljs-comment">//正确用法</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>顶层<code>await</code>想解决的问题： ES6模块化中导入导出，防止模块之间相互访问时异步访问无值的问题。</p><ul><li><p>看下面一个例子 来源<a href="https://blog.csdn.net/xgangzai/article/details/114314178?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-114314178-blog-115314719.t5_download_50w&spm=1001.2101.3001.4242.1&utm_relevant_index=3">为何要在Javascript中使用顶层await</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注意这边的module 像浏览器解释js脚本的风格 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ library.js ------</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> sqrt = <span class="hljs-title class_">Math</span>.<span class="hljs-property">sqrt</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">square</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">return</span> x * x;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">diagonal</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">sqrt</span>(<span class="hljs-title function_">square</span>(x) + <span class="hljs-title function_">square</span>(y));<br>&#125;<br><span class="hljs-comment">//暴露具体的函数</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ middleware.js ------ 中间件</span><br><span class="hljs-keyword">import</span> &#123; square, diagonal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./library.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Middleware&#x27;</span>);<br> <br><span class="hljs-keyword">let</span> squareOutput;<br><span class="hljs-keyword">let</span> diagonalOutput;<br> <br><span class="hljs-comment">// IIFE</span><br> (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>  squareOutput = <span class="hljs-title function_">square</span>(<span class="hljs-number">13</span>);<br>  diagonalOutput = <span class="hljs-title function_">diagonal</span>(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>);<br> &#125;)();<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delayInms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❤️&#x27;</span>));<br>    &#125;, delayInms);<br>  &#125;);<br>&#125;<br> <span class="hljs-comment">//中间件中计算并暴露值</span><br><span class="hljs-keyword">export</span> &#123;squareOutput,diagonalOutput&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ main.js ------</span><br><span class="hljs-keyword">import</span> &#123; squareOutput, diagonalOutput &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleware.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput); <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput); <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Main&#x27;</span>);<br> <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput), <span class="hljs-number">2000</span>);<br><span class="hljs-comment">//169</span><br> <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput), <span class="hljs-number">2000</span>);<br><span class="hljs-comment">//13</span><br></code></pre></td></tr></table></figure><ul><li>问题：<code>main.js</code>中第一次打印，读取到了中间件中暴露出来的值，但中间件中线程并没有计算完成。</li></ul></li><li><p>两种解决方案</p><ul><li><p>计算值的时候用一个<code>Promise</code>作为总的判断依据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ middleware.js ------ 中间件</span><br><span class="hljs-keyword">import</span> &#123; square, diagonal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./library.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Middleware&#x27;</span>);<br> <br><span class="hljs-keyword">let</span> squareOutput;<br><span class="hljs-keyword">let</span> diagonalOutput;<br> <br><span class="hljs-comment">// IIFE 用export把IIFE返回的Promise暴露出去</span><br><span class="hljs-comment">// 用该Promise作为判断函数是否执行完的标准</span><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>  squareOutput = <span class="hljs-title function_">square</span>(<span class="hljs-number">13</span>);<br>  diagonalOutput = <span class="hljs-title function_">diagonal</span>(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>);<br> &#125;)();<br><br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delayInms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❤️&#x27;</span>));<br>    &#125;, delayInms);<br>  &#125;);<br>&#125;<br> <span class="hljs-comment">//中间件中计算并暴露值</span><br><span class="hljs-keyword">export</span> &#123;squareOutput,diagonalOutput&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ main.js ------</span><br><span class="hljs-keyword">import</span> promise,&#123;squareOutput,diagonalOutput&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleware.js&#x27;</span>;<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput); <span class="hljs-comment">// 169</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput); <span class="hljs-comment">// 13</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Main&#x27;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput), <span class="hljs-number">2000</span>);<span class="hljs-comment">// 169</span><br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput), <span class="hljs-number">2000</span>);<span class="hljs-comment">// 13</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>可行，但带来了新的问题<ul><li><code>main.js</code>    调用中<code>middleware.js</code>中暴露出来的变量没有问题</li><li>但是如果有另一个模块<code>B.js</code>需要调用<code>main.js</code>，那么就需要再在<code>main.js</code>中使用一次和<code>middleware.js</code>中间件中一样的<code>IIFE Promise</code>才能让<code>B.js</code>正确访问变量。</li></ul></li></ul></li><li><p>用导出的变量去<strong>resolve</strong> <code>IIFE promise</code></p><ul><li><p>将变量作为<code>IIFE promise</code>的返回值返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ middleware.js ------ 中间件</span><br><span class="hljs-keyword">import</span> &#123; square, diagonal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./library.js&#x27;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Middleware&#x27;</span>);<br><br><span class="hljs-keyword">let</span> squareOutput;<br><span class="hljs-keyword">let</span> diagonalOutput;<br><br><span class="hljs-comment">// IIFE</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> (<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>    squareOutput = <span class="hljs-title function_">square</span>(<span class="hljs-number">13</span>);<br>    diagonalOutput = <span class="hljs-title function_">diagonal</span>(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">return</span> &#123; squareOutput, diagonalOutput &#125; <span class="hljs-comment">//作为返回值返回</span><br>&#125;)();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delayInms</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❤️&#x27;</span>));<br>        &#125;, delayInms);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123; squareOutput, diagonalOutput &#125;;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> promise, &#123; squareOutput, diagonalOutput &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleware.js&#x27;</span>;<br><br><span class="hljs-comment">//解析返回值，返回值其实就包含Promise的状态（已完成）</span><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123;squareOutput,diagonalOutput&#125;</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput); <span class="hljs-comment">// 169</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput); <span class="hljs-comment">// 13</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Main&#x27;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput), <span class="hljs-number">2000</span>);<br>    <span class="hljs-comment">//169</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput), <span class="hljs-number">2000</span>);<br>    <span class="hljs-comment">//13</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>问题：大部分函数模块都放在了<code>then()    </code>中，缺乏动态性和灵活性</li></ul></li><li><p>顶层<code>await</code></p><ul><li><p>允许我们让模块系统去处理<code>Promise</code>之间的关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ middleware.js 中间件函数------</span><br><span class="hljs-keyword">import</span> &#123; square, diagonal &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./library.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Middleware&#x27;</span>);<br> <br><span class="hljs-keyword">let</span> squareOutput;<br><span class="hljs-keyword">let</span> diagonalOutput;<br> <br><span class="hljs-comment">//使用顶层 await</span><br><span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-comment">//await 标志 等待delay执行完之后，才会生成squareOutput</span><br>squareOutput = <span class="hljs-title function_">square</span>(<span class="hljs-number">13</span>);<br>diagonalOutput = <span class="hljs-title function_">diagonal</span>(<span class="hljs-number">12</span>, <span class="hljs-number">5</span>);<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">delayInms</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;❤️&#x27;</span>));<br>    &#125;, delayInms);<br>  &#125;);<br>&#125;<br> <br><span class="hljs-keyword">export</span> &#123;squareOutput,diagonalOutput&#125;;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//------ main.js 主函数------</span><br><span class="hljs-keyword">import</span> &#123; squareOutput, diagonalOutput &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./middleware.js&#x27;</span>;<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput); <span class="hljs-comment">// 169</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput); <span class="hljs-comment">// 13</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;From Main&#x27;</span>);<br> <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(squareOutput), <span class="hljs-number">2000</span>);<span class="hljs-comment">// 169</span><br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(diagonalOutput), <span class="hljs-number">2000</span>); <span class="hljs-comment">// 13</span><br></code></pre></td></tr></table></figure></li><li><p>注意：顶层<code>await</code>只在ES模块中生效，这些ES模块之间必须具备某种相互依赖关系</p></li><li><p>总结：</p><ul><li>顶层<code>await</code>顾名思义，在某个代码块的顶层，下面的代码块全需要等它。</li><li>在<code>await</code>函数的<code>Promise</code>被<code>resolve</code>之前，<code>await</code>下所有的代码都不会执行。</li><li>而如果仅仅在一个函数外面使用<code>await</code>，<strong>函数外面export的东西，外部也会读到</strong></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><h5 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h5><h6 id="1-遍历-Iterator"><a href="#1-遍历-Iterator" class="headerlink" title="1.遍历 Iterator"></a>1.遍历 Iterator</h6><ul><li><p>任何数据结构只要部署<code>Iterator</code>接口，就可以完成遍历操作</p></li><li><p>作用</p><ol><li>为各种数据结构提供一个统一的、简便的数据访问接口</li><li>使得数据结构成员能够按照某种次序排列</li><li>供<code>for of</code>使用</li></ol></li><li><p>遍历过程：</p><ol><li>创建一个指针对象，指向起始位置（遍历器对象的本质是一个指针对象）</li><li>第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</li><li>第二次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第二个成员。</li><li>不断调用指针对象的<code>next</code>方法，直到指向数据结构的结束位置</li></ol></li><li><p>返回值<code>&#123;value: data , done: boolean&#125;</code> data是当前属性的值，done属性表示遍历是否结束</p></li><li><p>一个函数只要部署了``Symbol.iterator<code>属性，就被视为具有</code>iterator`接口</p></li><li><p><code>for of</code>循环，内部调用的就是<code>Symbol.iterator</code>方法</p></li><li><p>常见的具有<code>iterator</code>接口的结构</p><ol><li>数组</li><li>Set和Map结构</li><li>计算生成的数据结构（ES6数组、Set、Map）<ol><li><code>entries()</code></li><li><code>keys()</code></li><li><code>values()</code></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> pair <span class="hljs-keyword">of</span> arr.<span class="hljs-title function_">entries</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pair);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><p>类似数组的对象</p><ol><li>字符串</li><li>DOM Nodelist对象</li><li>arguments对象 </li></ol></li></ol><p>​         <strong>注意：</strong>并不是所有的类数组对象都有Iterator接口，需要使用<code>Array.from</code>方法将其转化为数组</p><ol start="5"><li><p>对象</p><ul><li><p>普通对象，<code>for in</code>可以遍历键名，<code>for of</code>循环会报错</p></li><li><p>如果要用<code>for of</code></p><ol><li><p>用<code>Object.keys</code>方法将对象的键名生成一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(someObject)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&#x27;: &#x27;</span> + someObject[key]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>用<code>Generator</code>函数将对象重新包装一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">entries</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)) &#123;<br>    <span class="hljs-keyword">yield</span> [key, obj[key]];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title function_">entries</span>(obj)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, <span class="hljs-string">&#x27;-&gt;&#x27;</span>, value);<br>&#125;<br><span class="hljs-comment">// a -&gt; 1</span><br><span class="hljs-comment">// b -&gt; 2</span><br><span class="hljs-comment">// c -&gt; 3</span><br></code></pre></td></tr></table></figure></li></ol></li></ul></li></ol></li></ul><h6 id="2-Generator函数"><a href="#2-Generator函数" class="headerlink" title="2.Generator函数"></a>2.Generator函数</h6><ul><li><p>写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">generator</span>(<span class="hljs-params"></span>)&#123;       <span class="hljs-comment">//函数名前，fucntion后有星号</span><br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;hello&#x27;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ending&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">var</span> gen = <span class="hljs-title function_">generator</span>()<br></code></pre></td></tr></table></figure></li><li><p>机制</p><ul><li><p>调用该函数后，返回一个指向内部状态的指针对象（<code>Iterator</code>对象）</p></li><li><p>调用遍历器的<code>next()</code>方法，使指针指向下一个状态</p><ul><li>第一次调用，Generator 函数开始执行，直到遇到第一个<code>yield</code>表达式为止</li><li><code>yield</code>表达式<ul><li>是一种暂停标志，<code>next()</code>方法遇到<code>yield</code>表达式就暂停后面的操作</li><li>将紧跟在<code>yield</code>后面的表达式的值作为返回对象的<code>value</code>值</li></ul></li><li>下一次调用<code>next</code>方法时，内部指针从函数头部或者<strong>上一次停下来的地方</strong>再继续往下执行，直到遇到下一个<code>yield</code>表达式。</li><li>如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止</li><li>并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</li></ul></li><li><p><code>next()</code>方法中的参数</p><ul><li>该参数会被当成上一个<code>yield</code>表达式的返回值</li><li>通过该参数，就能在<code>Generator()</code>函数运行后，继续向该函数中注入值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">var</span> y = <span class="hljs-number">2</span> * (<span class="hljs-keyword">yield</span> (x + <span class="hljs-number">1</span>));<br>  <span class="hljs-keyword">var</span> z = <span class="hljs-keyword">yield</span> (y / <span class="hljs-number">3</span>);<br>  <span class="hljs-keyword">return</span> (x + y + z);<br>&#125;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-title function_">foo</span>(<span class="hljs-number">5</span>);<br>a.<span class="hljs-title function_">next</span>() <br><span class="hljs-comment">// Object&#123;value:6, done:false&#125;  </span><br><span class="hljs-comment">// 第一次运行，x值为5 返回var y = 2 * (yield (x + 1))中 yield后面的(x+1)，返回值为6</span><br>a.<span class="hljs-title function_">next</span>() <br><span class="hljs-comment">// Object&#123;value:NaN, done:false&#125;</span><br><span class="hljs-comment">// 第二次运行，next()中不带参数，undefined 返回var y = 2 * undefined，返回值为NaN</span><br>a.<span class="hljs-title function_">next</span>() <br><span class="hljs-comment">// Object&#123;value:NaN, done:true&#125;</span><br><span class="hljs-comment">// 第三次运行，next()中不带参数，undefined 返回var z = undefinedw;，返回值为NaN</span><br><br><span class="hljs-keyword">var</span> b = <span class="hljs-title function_">foo</span>(<span class="hljs-number">5</span>);<br>b.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; value:6, done:false &#125;</span><br>b.<span class="hljs-title function_">next</span>(<span class="hljs-number">12</span>) <span class="hljs-comment">// &#123; value:8, done:false &#125;</span><br>b.<span class="hljs-title function_">next</span>(<span class="hljs-number">13</span>) <span class="hljs-comment">// &#123; value:42, done:true &#125;</span><br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>上面代码中，第二次运行<code>next</code>方法的时候不带参数，导致 y 的值等于<code>2 * undefined</code>（即<code>NaN</code>），除以 3 以后还是<code>NaN</code>，因此返回对象的<code>value</code>属性也等于<code>NaN</code>。第三次运行<code>Next</code>方法的时候不带参数，所以<code>z</code>等于<code>undefined</code>，返回对象的<code>value</code>属性等于<code>5 + NaN + undefined</code>，即<code>NaN</code>。</p><p>如果向<code>next</code>方法提供参数，返回结果就完全不一样了。上面代码第一次调用<code>b</code>的<code>next</code>方法时，返回<code>x+1</code>的值<code>6</code>；第二次调用<code>next</code>方法，将上一次<code>yield</code>表达式的值设为<code>12</code>，因此<code>y</code>等于<code>24</code>，返回<code>y / 3</code>的值<code>8</code>；第三次调用<code>next</code>方法，将上一次<code>yield</code>表达式的值设为<code>13</code>，因此<code>z</code>等于<code>13</code>，这时<code>x</code>等于<code>5</code>，<code>y</code>等于<code>24</code>，所以<code>return</code>语句的值等于<code>42</code>。</p></li></ul></li></ul><h5 id="ES6中的Module模块"><a href="#ES6中的Module模块" class="headerlink" title="ES6中的Module模块"></a>ES6中的Module模块</h5><h6 id="1-注意是ES6模块中的不是Nodejs模块中的CommonJS规范"><a href="#1-注意是ES6模块中的不是Nodejs模块中的CommonJS规范" class="headerlink" title="1. 注意是ES6模块中的不是Nodejs模块中的CommonJS规范"></a>1. 注意是ES6模块中的不是Nodejs模块中的CommonJS规范</h6><p><a href="https://blog.csdn.net/qq_15589375/article/details/123476690">module.exports、exports、export都是导出，有何区别？</a></p><h6 id="2-ES6中export"><a href="#2-ES6中export" class="headerlink" title="2. ES6中export"></a>2. ES6中export</h6><ul><li><p>ES6模块不是对象，而是通过<code>export</code>命令显式指定输出的代码，再通过<code>import</code>命令输入。</p></li><li><p>可以输出变量、函数和类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//变量</span><br><span class="hljs-keyword">var</span> firstName = <span class="hljs-string">&#x27;Lingyi&#x27;</span>;<br><span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Zhu&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123;firstName,lastName&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> firstName =<span class="hljs-string">&#x27;Lingyi&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> lastName = <span class="hljs-string">&#x27;Zhu&#x27;</span>;<br><br><span class="hljs-comment">//函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">multiply</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x*y;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>通常情况下，<code>export</code>输出的变量是原本的名字，但是可以用<code>as</code>关键字来重新命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">v1</span>(<span class="hljs-params"></span>)&#123;...&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">v2</span>(<span class="hljs-params"></span>)&#123;...&#125;<br><br><span class="hljs-keyword">export</span>&#123;<br>v1 <span class="hljs-keyword">as</span> streamV1;<br>v2 <span class="hljs-keyword">as</span> streamV2;<br>  v2 <span class="hljs-keyword">as</span> streamLatestVersion; <span class="hljs-comment">//v2可以使用不同的名字输出两次</span><br>             &#125;<br></code></pre></td></tr></table></figure></li><li><p><code>export</code>模块暴露的接口必须与内部元素建立起一一对应的关系</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//报错</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> m =<span class="hljs-number">1</span>;<span class="hljs-comment">//正确</span><br><br><span class="hljs-keyword">var</span> m =<span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> m;<span class="hljs-comment">//报错</span><br><span class="hljs-keyword">export</span> &#123;m&#125;;<span class="hljs-comment">//正确</span><br><br><span class="hljs-keyword">var</span> n = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> &#123;n <span class="hljs-keyword">as</span> m&#125;; <span class="hljs-comment">//正确，用m来接收</span><br></code></pre></td></tr></table></figure></li><li><p>关于整体暴露的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//temp.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">plus</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x+y;<br>&#125;<br>eport <span class="hljs-keyword">function</span> <span class="hljs-title function_">multi</span>(<span class="hljs-params">x,y</span>)&#123;<br>  <span class="hljs-keyword">return</span> x*y;<br>&#125;<br><br><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> &#123;plus,multi&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;temp.js&#x27;</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-title function_">plus</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">let</span> b = <span class="hljs-title function_">multi</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//也可以写为</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> <span class="hljs-title class_">Math</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;temp.js&#x27;</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">plus</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">multi</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure></li><li><p>关于动态绑定，<code>export</code>接口与对应的元素是动态绑定关系，可以通过该接口获取该元素内部实时、后面变化的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;没变之前就先暴露出去&#x27;</span>;<br><span class="hljs-title function_">settimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;foo=<span class="hljs-string">&#x27;暴露之后变化成现在这个值，5秒后别的文件读也会变成这个值&#x27;</span>&#125;,<span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure></li><li><p>关于继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//circleplus.js</span><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circle&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> e = <span class="hljs-number">2.7</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">exp</span>(x);<br>&#125;<br><span class="hljs-keyword">export</span> &#123;area <span class="hljs-keyword">as</span> circleArea&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circle&#x27;</span>;<br><br><span class="hljs-comment">//main.js</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> math <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circleplus&#x27;</span>;<br><span class="hljs-keyword">import</span> exp <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;circleplus&#x27;</span>;  <span class="hljs-comment">//将circleplus模块中的默认方法加载为exp方法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">exp</span>(math.<span class="hljs-property">e</span>));<br><br></code></pre></td></tr></table></figure></li><li><p>关于<code>export default</code></p><ul><li>为了用户快速上手，可以不命名元素</li><li>本质是系统自动给<code>default</code>后面的元素赋值为<code>default</code></li><li>用户可以<code>import</code>时，设置元素的名称</li><li>用于指定模块的默认输出，一个模块只能有一个默认输出，因此 <code>export default</code>模块只能使用一次</li></ul></li><li><p>关于<code>const</code>变量跨模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//constants.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> A = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> B = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> C = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">//test1.js 写法1</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> constants <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;constants.js&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(constants.<span class="hljs-property">A</span>); <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(constants.<span class="hljs-property">B</span>);<span class="hljs-comment">//2</span><br><br><span class="hljs-comment">//test2.js 写法2 加载单一的输出项</span><br><span class="hljs-keyword">import</span> &#123;A,C&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;constants.js.&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(A);<span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(B);<span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure><p>在使用的变量非常多的时候，常常专门建立一个<code>constants</code>目录，将常量写在歌中不同的文件里，然后合并在<code>index.js</code>中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//本代码块包含两个文件的代码，分别是db.js和user.js</span><br><span class="hljs-comment">//constants/db.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> db = &#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://my.couchdbserver.local:5984&#x27;</span>,<br>  <span class="hljs-attr">admin_username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>  <span class="hljs-attr">admin_password</span>: <span class="hljs-string">&#x27;admin password&#x27;</span><br>&#125;;<br><br><span class="hljs-comment">// constants/user.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> users = [<span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;staff&#x27;</span>, <span class="hljs-string">&#x27;ceo&#x27;</span>, <span class="hljs-string">&#x27;chief&#x27;</span>, <span class="hljs-string">&#x27;moderator&#x27;</span>];<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.js  将上述两个js文件中的常量合并</span><br><span class="hljs-keyword">export</span> &#123;db&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;db.js&#x27;</span><br><span class="hljs-keyword">export</span> &#123;users&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;users.js&#x27;</span> <span class="hljs-comment">//跨模块常量的引入，带&#123;&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><code>export</code>可以出现在任何位置，只要处于模块顶层就行。在块级作用域中则会报错。</p></li></ul><h6 id="3-ES6中import"><a href="#3-ES6中import" class="headerlink" title="3.ES6中import"></a>3.ES6中import</h6><ul><li><p>返回一个<code>Promise</code>对象，需要用<code>.then()方法指定处理函数</code>，推荐使用<code>await</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">renderWidget</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//async封装Promise，下面await</span><br>  <span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;widget&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (container !== <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-comment">// 等同于</span><br>    <span class="hljs-comment">// import(&quot;./widget&quot;).then(widget =&gt; &#123;</span><br>    <span class="hljs-comment">//   widget.render(container);</span><br>    <span class="hljs-comment">// &#125;);</span><br>    <span class="hljs-keyword">const</span> widget = <span class="hljs-keyword">await</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./widget.js&#x27;</span>); <span class="hljs-comment">//await相当于Promise中的then()，所以前面说等同于</span><br>    widget.<span class="hljs-title function_">render</span>(container);<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">renderWidget</span>();<br></code></pre></td></tr></table></figure></li><li><p><code>import</code></p><ul><li><p>按需加载，什么时候需要，什么时候加载</p></li><li><p>条件加载，可以放在<code>if</code>模块中</p></li><li><p>允许加载模块的路径是动态生成的 <code>import(function(var))</code></p></li><li><p>加载成功后，该模块会当作一个对象，作为<code>.then()</code>的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//如果有default模块的话</span><br><span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./myModule.js&#x27;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">myModule</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myModule.<span class="hljs-property">default</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>加载方式</p><ul><li>```html<script type='module' src="foo.js" async></script><!--开始渲染 标签加载ok了渲染暂停执行标签 标签执行完成再继续开始渲染工作--><script type='module' src='foo.js' defer></script> <!--defer加和不加没啥区别--><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br>+ ```html<br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;module&#x27;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;foo.js&#x27;</span></span><br><span class="language-javascript">    ...</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h6 id="4-ES6模块和Common-JS模块的差异"><a href="#4-ES6模块和Common-JS模块的差异" class="headerlink" title="4. ES6模块和Common JS模块的差异"></a>4. ES6模块和Common JS模块的差异</h6><ul><li>ES6模块是对外接口的一种静态定义，在代码静态解析阶段就会完成</li><li>ES6模块输出的是值的引用，模块中变化了输出也变化了。</li><li>Common JS模块加载的是一个对象，该对象在脚本运行时才会生成</li><li>Common JS模块输出是一个值的拷贝，内部变化，不会影响已经输出的值。</li><li>其他区别<a href="https://es6.ruanyifeng.com/#docs/module-loader">Module 的加载实现</a></li></ul><h6 id="5-Common-JS加载ES6模块"><a href="#5-Common-JS加载ES6模块" class="headerlink" title="5.Common JS加载ES6模块"></a>5.Common JS加载ES6模块</h6><ul><li><p>CommonJS模块的<code>require()</code>不能加载ES6模块，只能用<code>import()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;./my-app.mjs&#x27;</span>);<br>&#125;)();<br></code></pre></td></tr></table></figure></li><li><p><code>require()</code>不支持 ES6 模块的一个原因是，它是同步加载，而 ES6 模块内部可以使用顶层<code>await</code>命令，导致无法被同步加载。</p></li></ul><h6 id="6-ES6加载CommonJS模块"><a href="#6-ES6加载CommonJS模块" class="headerlink" title="6.ES6加载CommonJS模块"></a>6.ES6加载CommonJS模块</h6><ul><li><p>ES6需要静态代码分析，而CommonJS输出的是一个对象，无法被静态解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 正确 只能整体加载</span><br><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br><br><span class="hljs-comment">// 报错 不能只加载单一的输出项</span><br><span class="hljs-keyword">import</span> &#123; method &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br><br><span class="hljs-comment">//加载输出单一项的写法（折中）</span><br><span class="hljs-keyword">import</span> packageMain <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;commonjs-package&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123; method &#125; = packageMain;<br></code></pre></td></tr></table></figure></li></ul><p><a href="https://zhuanlan.zhihu.com/p/290837844">深入了解ES6点<code>module export</code></a></p><h5 id="随时查的技巧总结"><a href="#随时查的技巧总结" class="headerlink" title="随时查的技巧总结"></a>随时查的技巧总结</h5><p><a href="http://t.zoukankan.com/smileyqp-p-12675287.html">变量、字符串、数值、数组、函数</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>暑期项目总结</title>
    <link href="/2022/09/01/%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2022/09/01/%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/%E6%9A%91%E6%9C%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="暑期工作内容总结"><a href="#暑期工作内容总结" class="headerlink" title="暑期工作内容总结"></a>暑期工作内容总结</h3><h4 id="0-概述"><a href="#0-概述" class="headerlink" title="0.概述"></a>0.概述</h4><ol><li><p>项目要求：用户上传地理数据，根据用户的需求进行可视化</p></li><li><p>项目框架：</p><ul><li>前端框架：Vue（暂定）</li><li>后端：Nodejs  （不会Java Springboot）</li><li>地理服务提供商：Geoserver</li><li>Geoserver操作：Geoserver Rest Api</li></ul></li><li><p>具体需求：</p><ul><li><p>用户上传地理数据（前端），自动发布到Geoserver中</p><ul><li>矢量数据：shp、kml、geojson(json)</li><li>栅格数据：dem、tif</li></ul></li><li><p>数据发布服务</p><ul><li>WMS</li><li>WTF</li><li>WMTS</li><li>TMS</li></ul></li><li><p>数据的可视化</p><ul><li><p>前端可视化：利用leaflet、Cesium自带函数，对请求返回的json数据（WFS服务）进行可视化</p></li><li><p>后端可视化：根据用户可视化需求生成SLD样式文件，并上传到Geoserver中，应用样式</p></li></ul></li></ul></li></ol><h4 id="1-用到的模块"><a href="#1-用到的模块" class="headerlink" title="1.用到的模块"></a>1.用到的模块</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;child_process&quot;</span>);<br><span class="hljs-comment">//用来处理子进程</span><br><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-comment">//用来进行通信</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-comment">//用来读取文件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">AdmZip</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;adm-zip&#x27;</span>);<br><span class="hljs-comment">//用来处理压缩包任务</span><br><span class="hljs-keyword">const</span> geojson2shp = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;geojson2shp&#x27;</span>)<br><span class="hljs-comment">//用来处理json与shp文件转换</span><br><span class="hljs-keyword">const</span> tj = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@mapbox/togeojson&#x27;</span>)<br><span class="hljs-comment">//用来处理kml与json文件转换</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">DOMParser</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;xmldom&#x27;</span>).<span class="hljs-property">DOMParser</span>;<br><span class="hljs-comment">//用来处理dom文件，提取Dom节点(信息)</span><br><br><span class="hljs-comment">//用来处理通信路由</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>()<br><span class="hljs-comment">// 导入用户路由处理函数模块</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Handler</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../router_handler/formal&#x27;</span>)<br><span class="hljs-comment">//作为处理文件上传的中间件</span><br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>)<br><span class="hljs-keyword">const</span> &#123; route &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./test&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-具体功能的实现"><a href="#2-具体功能的实现" class="headerlink" title="2.具体功能的实现"></a>2.具体功能的实现</h4><h6 id="1-（多）文件上传-Upload-many"><a href="#1-（多）文件上传-Upload-many" class="headerlink" title="1. （多）文件上传 Upload_many()"></a>1. （多）文件上传 Upload_many()</h6><ul><li>==使用到了<code>multer</code>模块==</li><li>核心：后端接收文件、判断后缀、格式转化(shp)、文件压缩、文件上传(Geoserver Api 接口)</li><li>问题：<ul><li>文件上传至后端<ul><li>multer模块不进行配置，不能正常获取原文件等名称</li><li>多文件上传的时候，每个文件都会调用一次storage，所以stroage中判断文件名称后缀时候不能用数组的方式读取</li></ul></li><li>后端文件格式的处理<ul><li>shp格式的文件：<ul><li>存在的问题<ol><li>由多个文件(shp、shx、prj、dbf等等)构成，需要进行核心文件等判断</li></ol></li></ul></li><li>kml格式的文件：利用togeojson库转为geojson<ul><li>存在的问题<ol><li>数据量大时，转化不完全， 存在矢量缺失的情况</li><li>投影问题较多，例如：只能强制转化为几种常见投影，kml文件缺失投影信息转换容易出错</li></ol></li></ul></li><li>json(geojson)格式的文件：利用geojson2shp库转为shp<ul><li>存在的问题<ol><li>可支持的投影较少，生成的.prj文件或与标准prj文件的格式有所差异</li><li>毕竟是github上抄的库</li></ol></li></ul></li><li>思路：前端上传文件(<code>input</code>标签)，后端使用multer模块接收。接收时，截取上传文件类型，根据对应的格式存放到服务器不同的文件架上。由于矢量文件在Geoserver提供的API中都需要以ZIP的格式上传，所以利用第三方库对shp下的文件进行打包，最后使用<code>clild process</code>下<code>exec</code>函数调用curl命令，上传到后台Geoserver中。</li></ul></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//后端路由代码</span><br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>)<br><span class="hljs-keyword">const</span> storage = multer.<span class="hljs-title function_">diskStorage</span>(&#123;<br>    <span class="hljs-attr">destination</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">request, files, cb</span>) &#123;<br>        <span class="hljs-keyword">if</span> (files.<span class="hljs-property">originalname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>] != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(files.<span class="hljs-property">originalname</span>)<br>            <span class="hljs-keyword">let</span> tpName = files.<span class="hljs-property">originalname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">switch</span> (tpName) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;zip&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload&#x27;</span>)    <span class="hljs-comment">// 上传文件的目录</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;png&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;jpg&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;svg&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;jpeg&#x27;</span>:<br>                    <span class="hljs-comment">// cb(null, &#x27;../geoserver_rest/uploadfile/Image&#x27;)</span><br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/public/userImage&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 上传文件的目录</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;tif&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Tiff&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 上传文件的目录</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;json&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;geojson&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/geojson&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;kml&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/kml&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;shp&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;shx&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;dbf&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;cpg&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sbx&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;sbn&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;qix&#x27;</span>:<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;shp.xml&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/shpcomponent&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-comment">//prj文件单独存，因为栅格和矢量都会用到</span><br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;prj&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Prj&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;asc&#x27;</span>:<br>                    <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Asc&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-attr">default</span>:<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;上传文件类型出错,请检查文件类型与后缀&#x27;</span>)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">filename</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">request, files, cb</span>) &#123;<br>        <span class="hljs-title function_">cb</span>(<span class="hljs-literal">null</span>, files.<span class="hljs-property">originalname</span>)<br>        orgName = files.<span class="hljs-property">originalname</span>    <span class="hljs-comment">// 上传文件的目录、文件名称保存到全局变量中</span><br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// multer 配置</span><br><span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>(&#123;<br>    storage<br>&#125;)<br><br><span class="hljs-comment">/*--------------------------------------------------------------------------------*/</span><br><br><span class="hljs-comment">//后端处理函数代码</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Upload_many</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//多文件</span><br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">files</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">var</span> zip = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdmZip</span>()<br>    <span class="hljs-comment">//投影信息存放的文件夹</span><br>    <span class="hljs-keyword">let</span> prjPath = <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Prj/&#x27;</span><br>    <span class="hljs-keyword">let</span> fullName = req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">originalname</span><br>    <span class="hljs-keyword">let</span> fileName = fullName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">// 先把所有后缀拿到，放在数组中</span><br>    <span class="hljs-keyword">let</span> suffixs = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; req.<span class="hljs-property">files</span>.<span class="hljs-property">length</span>; i++) &#123;<br>      suffixs.<span class="hljs-title function_">push</span>(req.<span class="hljs-property">files</span>[i].<span class="hljs-property">originalname</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>])<br>    &#125;<br>    <span class="hljs-keyword">if</span> (suffixs.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;shp&quot;</span>)) &#123;<br>      <span class="hljs-comment">// shapefile文件只需要shp shx dbf文件即可生成正常显示，外加上可选的prj文件</span><br>      <span class="hljs-keyword">let</span> upfilePath = <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/shpcomponent/&#x27;</span><br>      zip.<span class="hljs-title function_">addLocalFile</span>(upfilePath + fileName + <span class="hljs-string">&#x27;.shp&#x27;</span>)<br>      zip.<span class="hljs-title function_">addLocalFile</span>(upfilePath + fileName + <span class="hljs-string">&#x27;.shx&#x27;</span>)<br>      zip.<span class="hljs-title function_">addLocalFile</span>(upfilePath + fileName + <span class="hljs-string">&#x27;.dbf&#x27;</span>)<br>      zip.<span class="hljs-title function_">addLocalFile</span>(prjPath + fileName + <span class="hljs-string">&#x27;.prj&#x27;</span>)<br>      zip.<span class="hljs-title function_">writeZip</span>(<span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span>)<br>      <span class="hljs-comment">// 设置延时，先让zip文件生成</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/datastores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.shp&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (error) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>          &#125;<br>          res.<span class="hljs-title function_">send</span>(stdout)<br>        &#125;)<br>      &#125;, <span class="hljs-number">200</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (suffixs.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;asc&quot;</span>)) &#123;<br>      <span class="hljs-comment">// asc文件只用asc文件和包含投影信息的prj文件</span><br>      <span class="hljs-keyword">let</span> upfilePath = <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/Asc/&#x27;</span><br>      zip.<span class="hljs-title function_">addLocalFile</span>(upfilePath + fileName + <span class="hljs-string">&#x27;.asc&#x27;</span>)<br>      zip.<span class="hljs-title function_">addLocalFile</span>(prjPath + fileName + <span class="hljs-string">&#x27;.prj&#x27;</span>)<br>      zip.<span class="hljs-title function_">writeZip</span>(<span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span>)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fileName)<br>      <span class="hljs-comment">// 设置延时，先让zip文件生成</span><br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/coveragestores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.arcgrid&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>          <span class="hljs-keyword">if</span> (error) &#123;<br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>          &#125;<br>          res.<span class="hljs-title function_">send</span>(stdout)<br>        &#125;)<br>      &#125;, <span class="hljs-number">200</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;暂不支持该文件类型&quot;</span>)<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//单文件</span><br>  <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">let</span> fullName = req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">originalname</span><br>    <span class="hljs-keyword">let</span> fileName = fullName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">let</span> filetype = fullName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">switch</span> (filetype) &#123;<br>      <span class="hljs-comment">// shp格式数据</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;zip&#x27;</span>:<br>        &#123;<br>          cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">path</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/datastores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.shp&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (error) &#123;<br>              <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>            &#125;<br>            res.<span class="hljs-title function_">send</span>(stdout)<br>          &#125;)<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;json&#x27;</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;geojson&#x27;</span>:<br>        <span class="hljs-keyword">const</span> options = &#123;<br>          <span class="hljs-attr">layer</span>: fileName,<br>          <span class="hljs-attr">targetCrs</span>: <span class="hljs-number">4326</span><br>        &#125;<br>        <span class="hljs-comment">// Paths</span><br>        geojson2shp.<span class="hljs-title function_">convert</span>(<span class="hljs-string">&#x27;../geoserver_rest/uploadfile/geojson/&#x27;</span> + fullName, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span>, options)<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/datastores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.shp&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (error) &#123;<br>              <span class="hljs-comment">// console.error(&#x27;error:&#x27;, error);</span><br>              <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>            &#125;<br>            res.<span class="hljs-title function_">send</span>(stdout)<br>          &#125;)<br>          <span class="hljs-comment">// 注意设置延时时间，要不会产生Error occured unzipping file的错误 </span><br>          <span class="hljs-comment">// 1 是还没有上传完就执行了在geoserver上传，找不到文件 可以适当延长延时时间</span><br>          <span class="hljs-comment">// 2 路径问题， 两者本质上都是文件找不到，所以会产生解压错误 </span><br>          <span class="hljs-comment">// 后续可以使用promise处理这种响应事件</span><br>        &#125;, <span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-comment">//kml本质上是先将kml转为json，在把json转为shpzip</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;kml&#x27;</span>:<br>        &#123;<br>          <span class="hljs-keyword">var</span> kml = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMParser</span>().<span class="hljs-title function_">parseFromString</span>(fs.<span class="hljs-title function_">readFileSync</span>(req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">path</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>));<br>          <span class="hljs-keyword">let</span> kml2Json = tj.<span class="hljs-title function_">kml</span>(kml)<br>          <span class="hljs-keyword">const</span> options = &#123;<br>            <span class="hljs-attr">layer</span>: fileName,<br>            <span class="hljs-attr">targetCrs</span>: <span class="hljs-number">4326</span><br>          &#125;<br>          geojson2shp.<span class="hljs-title function_">convert</span>(kml2Json, <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span>, options)<br>          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u admin:geoserver -X PUT -H &quot;Content-type:application/zip&quot; --data-binary @&#x27;</span> + <span class="hljs-string">&#x27;../geoserver_rest/uploadfile/upload/&#x27;</span> + fileName + <span class="hljs-string">&#x27;.zip&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/datastores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.shp&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>              <span class="hljs-keyword">if</span> (error) &#123;<br>                <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>              &#125;<br>              res.<span class="hljs-title function_">send</span>(stdout)<br>            &#125;)<br>          &#125;, <span class="hljs-number">500</span>);<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-comment">// 栅格数据的上传</span><br>      <span class="hljs-comment">// tif单文件上传</span><br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;tif&#x27;</span>:<br>        &#123;<br>          cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -u admin:geoserver -XPUT -H &quot;Content-type:image/tiff&quot; --data-binary @&#x27;</span> + req.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>].<span class="hljs-property">path</span> + <span class="hljs-string">&#x27; http://localhost:8080/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/coveragestores/&#x27;</span> + fileName + <span class="hljs-string">&#x27;/file.geotiff&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (error) &#123;<br>              <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">cc</span>(error);<br>            &#125;<br>            res.<span class="hljs-title function_">send</span>(stdout)<br>          &#125;)<br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;数据上传响应成功&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-获取工作空间-GetWorkspace"><a href="#2-获取工作空间-GetWorkspace" class="headerlink" title="2. 获取工作空间 GetWorkspace()"></a>2. 获取工作空间 GetWorkspace()</h6><ul><li>==使用到了<code>child process</code>模块==</li><li>核心：<code>curl</code>调用Geoserver Rest API接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取工作空间名称</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">GetWorkSpaces</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> user = req.<span class="hljs-property">body</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(user)<br>  <span class="hljs-keyword">const</span> result = cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u &#x27;</span> + user.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;:&#x27;</span> + user.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27; -XGET\</span><br><span class="hljs-string">    http://localhost:8080/geoserver/rest/workspaces&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span>, error);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    res.<span class="hljs-title function_">send</span>(stdout) <br>    <span class="hljs-comment">//向前端发送从Geoserver中请求的工作空间信息</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-获取图层-GetLayers"><a href="#3-获取图层-GetLayers" class="headerlink" title="3. 获取图层 GetLayers"></a>3. 获取图层 GetLayers</h6><ul><li>==使用到了<code>child process</code>模块==</li><li>核心：<code>curl</code>调用Geoserver Rest API接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span>.<span class="hljs-property">GetLayers</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> info = req.<span class="hljs-property">body</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info)<br>  cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u &#x27;</span> + info.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;:&#x27;</span> + info.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27; -X GET http://localhost:8080/geoserver/rest/workspaces/&#x27;</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">workspace_name</span> + <span class="hljs-string">&#x27;/layers &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span>, error);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;触发了GetLayers函数&quot;</span>)<br>    data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(stdout)<br>    res.<span class="hljs-title function_">send</span>(data.<span class="hljs-property">layers</span>.<span class="hljs-property">layer</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="4-获取二维WMTS链接"><a href="#4-获取二维WMTS链接" class="headerlink" title="4. 获取二维WMTS链接"></a>4. 获取二维WMTS链接</h6><ul><li>==使用到了<code>axios</code>模块==</li><li>核心：链接格式的拼接</li><li>切片投影矩阵：WebMercatorQuad（EPSG:3857、EPSG:900913）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 2dWMTS</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Get2DWMTS</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>  <span class="hljs-keyword">let</span> data = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8080/geoserver/gwc/service/wmts&quot;</span>,<br>    <span class="hljs-attr">layer</span>: workspace_used + <span class="hljs-string">&quot;:&quot;</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">layer</span>,<br>    <span class="hljs-attr">tilematrixSet</span>: <span class="hljs-string">&quot;WebMercatorQuad&quot;</span>,<br>    <span class="hljs-comment">// tilematrixSet: &quot;EPSG:4326&quot;,</span><br>  &#125;<br>  res.<span class="hljs-title function_">send</span>(data)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="5-获取三维WMTS链接（Cesium）"><a href="#5-获取三维WMTS链接（Cesium）" class="headerlink" title="5.  获取三维WMTS链接（Cesium）"></a>5.  获取三维WMTS链接（Cesium）</h6><ul><li><p>==使用到了<code>axios</code>模块==</p></li><li><p>核心：链接格式的拼接</p></li><li><p>注意投影切片矩阵的格式</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span>.<span class="hljs-property">Get3DWMTS</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>)<br>  <span class="hljs-keyword">let</span> data = &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:8080/geoserver/gwc/service/wmts&quot;</span>,<br>    <span class="hljs-attr">layer</span>: workspace_used + req.<span class="hljs-property">body</span>.<span class="hljs-property">layer</span>,<br>    <span class="hljs-comment">// tilematrixSet: &quot;WebMercatorQuad&quot;,</span><br>    <span class="hljs-attr">tilematrixSet</span>: <span class="hljs-string">&quot;EPSG:4326&quot;</span>,<br>    <span class="hljs-attr">matrixIds</span>: [<span class="hljs-string">&#x27;EPSG:4326:0&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:1&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:2&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:3&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:4&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:5&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:6&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:7&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:8&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:9&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:10&#x27;</span>,<br>      <span class="hljs-string">&#x27;EPSG:4326:11&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:12&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:13&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:14&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:15&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:16&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:17&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:18&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:19&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:20&#x27;</span>, <span class="hljs-string">&#x27;EPSG:4326:21&#x27;</span><br>    ]<br>  &#125;<br>  res.<span class="hljs-title function_">send</span>(data)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="6-整合图层服务链接"><a href="#6-整合图层服务链接" class="headerlink" title="6. 整合图层服务链接"></a>6. 整合图层服务链接</h6><ul><li> ==使用到了<code>axios</code>模块==</li><li> 整合链接，提供给前端</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取单个图层的WMS WMTS WFS TMS</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Get_WWWT</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> info = req.<span class="hljs-property">body</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info)<br>  cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u &#x27;</span> + info.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;:&#x27;</span> + info.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27; -X GET &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;/layers &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span>, error);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//stdou是string ，转成json， 返回去</span><br>    <span class="hljs-keyword">let</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(stdout)<br>    <span class="hljs-keyword">const</span> layer = data.<span class="hljs-property">layers</span>.<span class="hljs-property">layer</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(layer)<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Layer</span>_big = []<br>    <span class="hljs-keyword">let</span> types = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; layer.<span class="hljs-property">length</span>; i++) &#123;<br>      axios.<span class="hljs-title function_">get</span>(http_url + <span class="hljs-string">&#x27;/geoserver/wfs?service=wfs&amp;version=2.0.0&amp;request=DescribeFeatureType&amp;typeNames=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(layer[i].<span class="hljs-property">name</span>) + <span class="hljs-string">&#x27;&amp;outputFormat=application%2Fjson&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">//用字典存，就不存在同异步的问题</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">data</span>)<br>        <span class="hljs-comment">//存在两个问题：？？？？？？？？？？？？？？？？？？？？？</span><br>        <span class="hljs-comment">//1.通过postgis上传的图层的 &quot;name&quot;: &quot;the_geom&quot;所在的位置不是第一个，不能直接用featureTypes[0]，可能需要加一层判断</span><br>        <span class="hljs-comment">//2.栅格数据不存在此类属性，需要区分讨论</span><br>        types[layer[i].<span class="hljs-property">name</span>] = response.<span class="hljs-property">data</span>.<span class="hljs-property">featureTypes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">properties</span>[<span class="hljs-number">0</span>].<span class="hljs-property">localType</span><br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>      &#125;)<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; layer.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> WMS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;/wms?&amp;layer=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;format=image/png&amp;transparent=true&#x27;</span><br>        <span class="hljs-keyword">let</span> WMS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;/wms?&amp;layer=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">let</span> WMTS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/wmts?service=WMTS&amp;request=GetTile&amp;version=1.0.0&amp;layer=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;style=&amp;tilematrixset=WebMercatorQuad&amp;format=image%2Fpng&amp;width=256&amp;height=256&amp;tilematrix=&#123;z&#125;&amp;tilerow=&#123;y&#125;&amp;tilecol=&#123;x&#125;&#x27;</span><br>        <span class="hljs-keyword">let</span> WFS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/wfs?request=GetFeature&amp;version=1.1.0&amp;typeName=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;maxFeatures=50&amp;outputFormat=application/json&#x27;</span><br>        <span class="hljs-keyword">let</span> TMS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/tms/1.0.0/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;@WebMercatorQuad@png/&#123;z&#125;/&#123;x&#125;/&#123;-y&#125;.png&#x27;</span><br>        <span class="hljs-keyword">let</span> TMS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/tms/1.0.0/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;@EPSG:900913@png/&#123;z&#125;/&#123;x&#125;/&#123;reverseY&#125;.png&#x27;</span><br>        <span class="hljs-keyword">let</span> WMTS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/wmts/rest/&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;/&#123;style&#125;/&#123;TileMatrixSet&#125;/&#123;TileMatrixSet&#125;:&#123;TileMatrix&#125;/&#123;TileRow&#125;/&#123;TileCol&#125;?format=image/png&#x27;</span><br>        <span class="hljs-keyword">let</span> services = [<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMS_url2<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WFS&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WFS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;TMS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: TMS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;TMS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: TMS_url2<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMTS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMTS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMTS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMTS_url2<br>          &#125;,<br>        ]<br>        <span class="hljs-keyword">let</span> temp = &#123;&#125;<br>        temp.<span class="hljs-property">name</span> = layer[i].<span class="hljs-property">name</span><br>        temp.<span class="hljs-property">id</span> = i + <span class="hljs-number">1</span><br>        temp.<span class="hljs-property">type</span> = types[layer[i].<span class="hljs-property">name</span>]<br>        temp.<span class="hljs-property">service</span> = services<br>        <span class="hljs-title class_">Layer</span>_big.<span class="hljs-title function_">push</span>(temp)<br>      &#125;<br>    &#125;, <span class="hljs-number">100</span>);<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">Layer</span>_big)<br>    &#125;, <span class="hljs-number">200</span>);<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">//获取单个用户图层的WMS WMTS WFS TMS</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">Get_WWWT_user</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> info = req.<span class="hljs-property">body</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info)<br>  cs.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;curl -v -u &#x27;</span> + info.<span class="hljs-property">username</span> + <span class="hljs-string">&#x27;:&#x27;</span> + info.<span class="hljs-property">password</span> + <span class="hljs-string">&#x27; -X GET &#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/rest/workspaces/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/layers &#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error, stdout, stderr</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;error:&#x27;</span>, error);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(stdout)<br>    <span class="hljs-comment">// console.log(data.layers.layer)</span><br>    <span class="hljs-keyword">const</span> layer = data.<span class="hljs-property">layers</span>.<span class="hljs-property">layer</span><br>    <span class="hljs-comment">// console.log(layer)</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">Layer</span>_big = []<br>    <span class="hljs-keyword">let</span> types = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; layer.<span class="hljs-property">length</span>; i++) &#123;<br>      axios.<span class="hljs-title function_">get</span>(http_url + <span class="hljs-string">&#x27;/geoserver/wfs?service=wfs&amp;version=2.0.0&amp;request=DescribeFeatureType&amp;typeNames=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(layer[i].<span class="hljs-property">name</span>) + <span class="hljs-string">&#x27;&amp;outputFormat=application%2Fjson&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">//用字典存，就不存在同异步的问题</span><br>        types[layer[i].<span class="hljs-property">name</span>] = response.<span class="hljs-property">data</span>.<span class="hljs-property">featureTypes</span>[<span class="hljs-number">0</span>].<span class="hljs-property">properties</span>[<span class="hljs-number">0</span>].<span class="hljs-property">localType</span><br>      &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>      &#125;)<br>    &#125;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; layer.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> WMS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/wms?&amp;layer=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;format=image/png&amp;transparent=true&#x27;</span><br>        <span class="hljs-keyword">let</span> WMS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;/wms?&amp;layer=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">let</span> WMTS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/wmts?service=WMTS&amp;request=GetTile&amp;version=1.0.0&amp;layer=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;style=&amp;tilematrixset=WebMercatorQuad&amp;format=image%2Fpng&amp;width=256&amp;height=256&amp;tilematrix=&#123;z&#125;&amp;tilerow=&#123;y&#125;&amp;tilecol=&#123;x&#125;&#x27;</span><br>        <span class="hljs-keyword">let</span> WFS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/wfs?request=GetFeature&amp;version=1.1.0&amp;typeName=&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&amp;maxFeatures=50&amp;outputFormat=application/json&#x27;</span><br>        <span class="hljs-keyword">let</span> TMS_url = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/tms/1.0.0/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;@WebMercatorQuad@png/&#123;z&#125;/&#123;x&#125;/&#123;-y&#125;.png&#x27;</span><br>        <span class="hljs-keyword">let</span> TMS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/tms/1.0.0/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;@EPSG:900913@png/&#123;z&#125;/&#123;x&#125;/&#123;reverseY&#125;.png&#x27;</span><br>        <span class="hljs-keyword">let</span> WMTS_url2 = <span class="hljs-string">&#x27;&#x27;</span> + http_url + <span class="hljs-string">&#x27;/geoserver/gwc/service/wmts/rest/&#x27;</span> + user_workspace + <span class="hljs-string">&#x27;:&#x27;</span> + layer[i].<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;/&#123;style&#125;/&#123;TileMatrixSet&#125;/&#123;TileMatrixSet&#125;:&#123;TileMatrix&#125;/&#123;TileRow&#125;/&#123;TileCol&#125;?format=image/png&#x27;</span><br>        <span class="hljs-keyword">let</span> services = [<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMS_url2<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WFS&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WFS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;TMS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: TMS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;TMS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: TMS_url2<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMTS-二维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMTS_url<br>          &#125;,<br>          &#123;<br>            <span class="hljs-title class_">ServiceName</span>: <span class="hljs-string">&quot;WMTS-三维&quot;</span>,<br>            <span class="hljs-attr">URL</span>: WMTS_url2<br>          &#125;,<br>        ]<br>        <span class="hljs-keyword">let</span> temp = &#123;&#125;<br>        temp.<span class="hljs-property">name</span> = layer[i].<span class="hljs-property">name</span><br>        temp.<span class="hljs-property">id</span> = i + <span class="hljs-number">1</span><br>        temp.<span class="hljs-property">type</span> = types[layer[i].<span class="hljs-property">name</span>]<br>        temp.<span class="hljs-property">service</span> = services<br>        <span class="hljs-title class_">Layer</span>_big.<span class="hljs-title function_">push</span>(temp)<br>      &#125;<br>    &#125;, <span class="hljs-number">100</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      res.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">Layer</span>_big)<br>    &#125;, <span class="hljs-number">200</span>);<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="7-WFS获取Layer属性表"><a href="#7-WFS获取Layer属性表" class="headerlink" title="7. WFS获取Layer属性表"></a>7. WFS获取Layer属性表</h6><ul><li>核心：WFS请求，获取json格式属性数据，解析成友好的格式</li><li>难点：从json数据中把属性数据提取出来</li><li>思路：后端向Geoserver后台发送请求，获取Json格式的图层数据。把Json中的有用Attribute Table信息，push到数组中，将数组发送到前端。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//wfs服务获取指定Layer的属性表</span><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">WFS_getFeatures</span> = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> attrList = []<br>  <span class="hljs-keyword">let</span> treeCol = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">WFSUrl</span> = <span class="hljs-string">&quot;http://localhost:8080/geoserver/wfs?&quot;</span><br>  <span class="hljs-keyword">var</span> feature_url = <span class="hljs-title class_">WFSUrl</span> + <span class="hljs-string">&#x27;request=GetFeature&amp;version=1.1.0&amp;typeName=&#x27;</span> + workspace_used + <span class="hljs-string">&#x27;:&#x27;</span> + req.<span class="hljs-property">body</span>.<span class="hljs-property">layer</span> + <span class="hljs-string">&#x27;&amp;outputFormat=application/json&#x27;</span>;<br>  axios.<span class="hljs-title function_">get</span>(feature_url).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">WFS_res</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//WFS请求，以json格式返回制定图层的属性数据</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">GeoObject</span> = WFS_res.<span class="hljs-property">data</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">GeoObject</span>)<br>    <span class="hljs-comment">// res.send(typeof(GeoObject))</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">for</span> (atr <span class="hljs-keyword">in</span> <span class="hljs-title class_">GeoObject</span>.<span class="hljs-property">features</span>[<span class="hljs-number">0</span>].<span class="hljs-property">properties</span>) &#123;<br>        attrList.<span class="hljs-title function_">push</span>(atr)<br>      &#125;<br>      <span class="hljs-comment">// res.send(attrList)</span><br>      <span class="hljs-keyword">let</span> attrLen = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">GeoObject</span>.<span class="hljs-property">features</span>[<span class="hljs-number">0</span>].<span class="hljs-property">properties</span>).<span class="hljs-property">length</span><br>      <span class="hljs-keyword">let</span> featureCount = <span class="hljs-title class_">GeoObject</span>.<span class="hljs-property">totalFeatures</span><br><br>      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; attrLen; i++) &#123;<br>        treeCol[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; featureCount; j++) &#123;<br>          treeCol[i][j] = <span class="hljs-title class_">GeoObject</span>.<span class="hljs-property">features</span>[j].<span class="hljs-property">properties</span>[attrList[i]];<br>          <span class="hljs-comment">//拼接属性表</span><br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Error:&quot;</span> + error)<br>    &#125;<br>    res.<span class="hljs-title function_">send</span>(&#123; <span class="hljs-title class_">Attributes</span>: attrList, <span class="hljs-title class_">Value</span>: treeCol &#125;)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
      <tag>Nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx</title>
    <link href="/2022/08/11/Nginx/Nginx/"/>
    <url>/2022/08/11/Nginx/Nginx/</url>
    
    <content type="html"><![CDATA[<h3 id="一、Nginx介绍"><a href="#一、Nginx介绍" class="headerlink" title="一、Nginx介绍"></a>一、Nginx介绍</h3><p><a href="https://zhuanlan.zhihu.com/p/34943332">深入浅出Nginx</a></p><p>Nginx是lgor Sysoev为俄罗斯访问量第二的rambler.ru站点设计开发的。从2004年发布至今，凭借开源的力量，已经接近成熟与完善。</p><p>Nginx功能丰富，可作为HTTP服务器，也可作为反向代理服务器，邮件服务器。支持FastCGI、SSL、Virtual Host、URL Rewrite、Gzip等功能。并且支持很多第三方的模块扩展。</p><h3 id="二、常用操作"><a href="#二、常用操作" class="headerlink" title="二、常用操作"></a>二、常用操作</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">//注意路径问题<br>启动<br>[root@localhost ~]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx</span><br>停止/重启<br>[root@localhost ~]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx -s stop(quit、reload)</span><br>命令帮助<br>[root@localhost ~]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx -h</span><br>验证配置文件<br>[root@localhost ~]<span class="hljs-comment"># /usr/local/nginx/sbin/nginx -t</span><br>配置文件<br>[root@localhost ~]<span class="hljs-comment"># vim /usr/local/nginx/conf/nginx.conf</span><br></code></pre></td></tr></table></figure><h3 id="三、常见BUG"><a href="#三、常见BUG" class="headerlink" title="三、常见BUG"></a>三、常见BUG</h3><ol><li><p>[emerg] open() “/usr/local/var/run/nginx.pid“ failed (13: Permission denied</p><ul><li><code>sudo nginx -c /usr/local/etc/nginx/nginx.conf. //你本地的nginx.config路径</code></li></ul></li><li><p>Nginx nginx: [emerg] bind() to 0.0.0.0:8083 failed (48: Address already in use)</p><ul><li><p><code>ps -ef|grep nginx</code> </p></li><li><p><code>sudo kill PID</code></p></li></ul></li><li><p>nginx: [alert] kill(21725, 1) failed (1: Operation not permitted)</p><ul><li><code>sudo nginx -s reload</code></li></ul></li></ol><h3 id="四、还没解决的问题"><a href="#四、还没解决的问题" class="headerlink" title="四、还没解决的问题"></a>四、还没解决的问题</h3><ol><li>之所以用Nginx是因为后面项目可能需要用到Nginx配置</li><li>QGIS server  如何基于Nginx部署，很麻烦，目前国内的资料很少，特别是对于Mac系统来说</li><li>不像Geoserver 直接拖入到tomcat的Webapp目录里面就行</li></ol>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery笔记</title>
    <link href="/2022/08/09/jQuery%E7%AC%94%E8%AE%B0/jQuery%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/09/jQuery%E7%AC%94%E8%AE%B0/jQuery%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、jQuery"><a href="#一、jQuery" class="headerlink" title="一、jQuery"></a>一、jQuery</h3><ul><li><p>jQuery是一个JavaScript库 <code>确实</code></p></li><li><p>jQuery极大的简化了JavaScript编程 <code>Maybe</code></p></li><li><p>jQuery 很容易学习 <code>$是核心</code></p></li><li><p>本文主要涉及对DOM元素的操作`</p></li><li><p><a href="https://www.w3school.com.cn/jquery/index.asp">w3cschool</a></p></li></ul><h3 id="二、jQuery与HTML"><a href="#二、jQuery与HTML" class="headerlink" title="二、jQuery与HTML"></a>二、jQuery与HTML</h3><p>jQuery 中非常重要的部分，就是操作 DOM 的能力。</p><p>jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易。</p><p><strong>提示：</strong>DOM = Document Object Model（文档对象模型）</p><p>DOM 定义访问 HTML 和 XML 文档的标准</p><h5 id="1-获取DOM的内容"><a href="#1-获取DOM的内容" class="headerlink" title="1. 获取DOM的内容"></a>1. 获取DOM的内容</h5><ul><li><p> text() 设置或者获取所选元素的文本内容</p></li><li><p>html() 设置或者获取所选元素的内容（包括HTML标记）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//获取 id为btn1的按钮</span></span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Text: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">text</span>()); <span class="hljs-comment">//获取id为test的标签</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  </span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;HTML: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">html</span>());</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>这是段落中的<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>粗体<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>文本。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>显示文本<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>显示 HTML<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>val()</p><p><img src="/img/jQuery_val().png" alt="val方法"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Value: &quot;</span> + $(<span class="hljs-string">&quot;#test&quot;</span>).<span class="hljs-title function_">val</span>()); <span class="hljs-comment">//获取input标签</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;米老鼠&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>attr()获取标签的属性</p><p><img src="/img/jQuery_attr().png" alt="attr方法"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;#w3s&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;href&quot;</span>));</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.w3school.com.cn&quot;</span><span class="hljs-attr">id</span>=<span class="hljs-string">&quot;w3s&quot;</span>&gt;</span>W3School.com.cn<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>  <span class="hljs-comment">&lt;!--返回a标签中属性herf的值--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>显示 href 值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="2-改变DOM的内容（设置内容）"><a href="#2-改变DOM的内容（设置内容）" class="headerlink" title="2.改变DOM的内容（设置内容）"></a>2.改变DOM的内容（设置内容）</h5><ul><li><p>text()、html()、val()  设置值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#test1&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;Hello world!&quot;</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn2&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#test2&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;#btn3&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#test3&quot;</span>).<span class="hljs-title function_">val</span>(<span class="hljs-string">&quot;Dolly Duck&quot;</span>);</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test1&quot;</span>&gt;</span>这是段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test2&quot;</span>&gt;</span>这是另一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Input field: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test3&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mickey Mouse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span>&gt;</span>设置文本<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn2&quot;</span>&gt;</span>设置 HTML<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn3&quot;</span>&gt;</span>设置值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>attr()设置属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#w3s&quot;</span>).<span class="hljs-title function_">attr</span>(</span><br><span class="language-javascript">      <span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;http://www.w3school.com.cn/jquery&quot;</span></span><br><span class="language-javascript">      <span class="hljs-string">&quot;title&quot;</span>,<span class="hljs-string">&quot;W3School jQuery教程&quot;</span></span><br><span class="language-javascript">    );</span><br><span class="language-javascript">    <span class="hljs-comment">//注意这个属性啊啊啊啊 不然拿不到标签</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>也是<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.w3school.com.cn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;w3s&quot;</span>&gt;</span>W3School.com.cn<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>改变 href 值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请把鼠标指针移动到链接上，或者点击该链接，来查看已经改变的 href 值。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>回调函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">  $(&quot;#btn1&quot;).click(function()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  $(&quot;#test1&quot;).text(function(i,origText)&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">     <span class="hljs-comment">&lt;!-- .attr()回调函数--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    return &quot;Old text: &quot; + origText + &quot; New text: Hello world!</span></span><br><span class="language-xml"><span class="language-handlebars">    (index: &quot; + i + &quot;)&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars">$(&quot;#btn2&quot;).click(function()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  $(&quot;#test2&quot;).html(function(i,origText)&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!-- .text()回调函数--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    return &quot;Old html: &quot; + origText + &quot; New html: Hello <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>world!<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    (index: &quot; + i + &quot;)&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">  </span></span><br><span class="language-xml"><span class="language-handlebars">$(&quot;button&quot;).click(function()&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">  $(&quot;#w3s&quot;).attr(&quot;href&quot;, function(i,origValue)&#123;</span></span><br><span class="language-xml"><span class="language-handlebars">     <span class="hljs-comment">&lt;!-- .attr()回调函数--&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    return origValue + &quot;/jquery&quot;;</span></span><br><span class="language-xml"><span class="language-handlebars">  &#125;);</span></span><br><span class="language-xml"><span class="language-handlebars">&#125;);</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="3-追加"><a href="#3-追加" class="headerlink" title="3.追加"></a>3.追加</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;Some appended text.&quot;</span>); <span class="hljs-comment">//在p标签文本前面拼</span></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">prepend</span>(<span class="hljs-string">&quot;Some prepended text.&quot;</span>); <span class="hljs-comment">//在p标签文本后面拼</span></span><br><span class="language-javascript">  </span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">appendText</span>(<span class="hljs-params"></span>)</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt1=<span class="hljs-string">&quot;&lt;p&gt;Text.&lt;/p&gt;&quot;</span>;               <span class="hljs-comment">// 以 HTML 创建新元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt2=$(<span class="hljs-string">&quot;&lt;p&gt;&lt;/p&gt;&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;Text.&quot;</span>);   <span class="hljs-comment">// 以 jQuery 创建新元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt3=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>);  <span class="hljs-comment">// 以 DOM 创建新元素</span></span><br><span class="language-javascript">txt3.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;Text.&quot;</span>;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">append</span>(txt1,txt2,txt3);         <span class="hljs-comment">// 追加新元素</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">after</span>(<span class="hljs-string">&quot;Some text after&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">before</span>(<span class="hljs-string">&quot;Some text before&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">afterText</span>(<span class="hljs-params"></span>)</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt1=<span class="hljs-string">&quot;&lt;b&gt;I &lt;/b&gt;&quot;</span>;                    <span class="hljs-comment">// 以 HTML 创建新元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt2=$(<span class="hljs-string">&quot;&lt;i&gt;&lt;/i&gt;&quot;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&quot;love &quot;</span>);     <span class="hljs-comment">// 通过 jQuery 创建新元素</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> txt3=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;big&quot;</span>);  <span class="hljs-comment">// 通过 DOM 创建新元素</span></span><br><span class="language-javascript">txt3.<span class="hljs-property">innerHTML</span>=<span class="hljs-string">&quot;jQuery!&quot;</span>;</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;img&quot;</span>).<span class="hljs-title function_">after</span>(txt1,txt2,txt3);          <span class="hljs-comment">// 在 img 之后插入新元素</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-删除"><a href="#4-删除" class="headerlink" title="4.删除"></a>4.删除</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--删除元素 remove--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">remove</span>(<span class="hljs-string">&quot;.italic&quot;</span>); <span class="hljs-comment">//删除所有class=‘italic’的标签</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;italic&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>This is another paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;italic&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>This is another paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <br><span class="hljs-comment">&lt;!--清空元素 empty--&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">empty</span>(); <span class="hljs-comment">//清空div(中)的元素</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;height:100px;width:300px;border:1px solid black;background-color:yellow;&quot;</span>&gt;</span><br>This is some text in the div.<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is another paragraph in the div.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="5-设置样式"><a href="#5-设置样式" class="headerlink" title="5.设置样式"></a>5.设置样式</h5><ol><li></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  &lt;!-- .表示类，所以.<span class="hljs-property">blue</span> 用 addClass 将style绑定到标签上--&gt;</span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">//将 h1、h2、p style设置为蓝色（应用.blue）</span></span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;important&quot;</span>); <span class="hljs-comment">//将div 加粗加大（应用.important）</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;#div1&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;important blue&quot;</span>); <span class="hljs-comment">//可以同时对一个标签设置多个样式类</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"> $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">removeClass</span>(<span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">//移除blue样式</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h1,h2,p&quot;</span>).<span class="hljs-title function_">toggleClass</span>(<span class="hljs-string">&quot;blue&quot;</span>); <span class="hljs-comment">//toggle 来回切换样式 点一下应用，点一下取消</span></span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.important</span></span><br><span class="language-css">&#123;</span><br><span class="language-css"><span class="hljs-attribute">font-weight</span>:bold;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>:xx-large;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.blue</span></span><br><span class="language-css">&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:blue;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>标题 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>标题 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是另一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是非常重要的文本！<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>向元素添加类<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>jQuery中CSS方法</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Background color = &quot;</span> + $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>));</span><br><span class="language-javascript">    <span class="hljs-comment">//$(&quot;p&quot;).css(&quot;background-color&quot;) 返回p标签的背景颜色 格式：rgb(255, 0, 0)</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>); <span class="hljs-comment">//设置p标签背景颜色为黄色</span></span><br><span class="language-javascript">    <span class="hljs-comment">//指定css属性 语法 css(&quot;propertyname&quot;,&quot;value&quot;);</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;background-color&quot;</span>:<span class="hljs-string">&quot;yellow&quot;</span>,<span class="hljs-string">&quot;font-size&quot;</span>:<span class="hljs-string">&quot;200%&quot;</span>&#125;);</span><br><span class="language-javascript">    <span class="hljs-comment">//同时设置多个css属性</span></span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#ff0000&quot;</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#00ff00&quot;</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color:#0000ff&quot;</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>返回 p 元素的背景色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>jQuery与DOM尺寸</p><p><a href="https://www.w3school.com.cn/jquery/jquery_dimensions.asp">jQuery 尺寸</a></p></li></ol><h5 id="6-jQuery遍历元素"><a href="#6-jQuery遍历元素" class="headerlink" title="6. jQuery遍历元素"></a>6. jQuery遍历元素</h5><p>​    jQuery 遍历，意为“移动”，用于根据其相对于其他元素的关系来“查找”（或选取）HTML 元素。以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止。</p><p>下图展示了一个家族树。通过 jQuery 遍历，您能够从被选（当前的）元素开始，轻松地在家族树中向上移动（祖先），向下移动（子孙），水平移动（同胞）。这种移动被称为对 DOM 进行遍历。</p><p>图示解释：</p><p><img src="/img/dom_tree.gif" alt="遍历 DOM 树"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div&gt; 元素是 &lt;ul&gt; 的父元素，同时是其中所有内容的祖先。<br>&lt;ul&gt; 元素是 &lt;li&gt; 元素的父元素，同时是 &lt;div&gt; 的子元素<br>左边的 &lt;li&gt; 元素是 &lt;span&gt; 的父元素，&lt;ul&gt; 的子元素，同时是 &lt;div&gt; 的后代<br>&lt;span&gt; 元素是 &lt;li&gt; 的子元素，同时是 &lt;ul&gt; 和 &lt;div&gt; 的后代。<br>两个 &lt;li&gt; 元素是同胞（拥有相同的父元素）。<br>右边的 &lt;li&gt; 元素是 &lt;b&gt; 的父元素，&lt;ul&gt; 的子元素，同时是 &lt;div&gt; 的后代。<br>&lt;b&gt; 元素是右边的 &lt;li&gt; 的子元素，同时是 &lt;ul&gt; 和 &lt;div&gt; 的后代。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong>祖先是父、祖父、曾祖父等等。后代是子、孙、曾孙等等。同胞拥有相同的父。</p><h6 id="1-父与子遍历"><a href="#1-父与子遍历" class="headerlink" title="1.父与子遍历"></a>1.父与子遍历</h6><p><img src="/img/jQuery_parent().png" alt="jQuery遍历父标签"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.ancestors</span> *</span><br><span class="language-css">&#123; </span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid lightgrey;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: lightgrey;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery/jquery-1.11.1.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-comment">//遍历祖先</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//修改span标签的上一级父标签的css</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parent</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//修改span标签的所有父标签的css</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parents</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//修改span标签的div父标签，自己拓展 parents(&quot;#xxx&quot;)-id  parents(&quot;.xxx&quot;)-class</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">////修改介于 &lt;span&gt; 与 &lt;div&gt; 元素之间的所有祖先元素：</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;span&quot;</span>).<span class="hljs-title function_">parentsUntil</span>(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">  </span><br><span class="language-javascript">  <span class="hljs-comment">//遍历后代</span></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//设置div标签的所有子标签样式</span></span><br><span class="language-javascript">   $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">children</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置 &lt;div&gt; 的直接子元素中类名为 &quot;1&quot; 的所有 &lt;p&gt; 元素的样式</span></span><br><span class="language-javascript">   $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">children</span>(<span class="hljs-string">&quot;p.1&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript"><span class="hljs-comment">//设置 &lt;div&gt; 的所有后代的样式：</span></span><br><span class="language-javascript">   $(<span class="hljs-string">&quot;div&quot;</span>).<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;*&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ancestors&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:500px;&quot;</span>&gt;</span>div (曾祖父)<br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>ul (祖父)  <br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>li (直接父)<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>   <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:500px;&quot;</span>&gt;</span>div (祖父)   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p (直接父)<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-同胞元素遍历"><a href="#2-同胞元素遍历" class="headerlink" title="2.同胞元素遍历"></a>2.同胞元素遍历</h6><p><img src="/img/jQuery_child().png" alt="jQuery遍历子标签"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.sty</span> *</span><br><span class="language-css">&#123; </span><br><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><br><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid lightgrey;</span><br><span class="language-css"><span class="hljs-attribute">color</span>: lightgrey;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/jquery/jquery-1.11.1.min.js&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//设置所有与h2标签同胞元素的所有标签元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">siblings</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置所有与h2标签同胞元素的所有 &lt;p&gt; 元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">siblings</span>(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置 &lt;h2&gt; 的下一个同胞元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">next</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置 &lt;h2&gt; 的所有跟随（同级的，顺序在他下面的）的同胞元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">nextAll</span>().<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">  <span class="hljs-comment">//设置介于 &lt;h2&gt; 与 &lt;h6&gt; 元素之间的所有同胞元素的标签样式</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;h2&quot;</span>).<span class="hljs-title function_">nextUntil</span>(<span class="hljs-string">&quot;h6&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-string">&quot;color&quot;</span>:<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;border&quot;</span>:<span class="hljs-string">&quot;2px solid red&quot;</span>&#125;);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sty&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>div (父)<br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>p<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="3-进一步过滤（筛选）"><a href="#3-进一步过滤（筛选）" class="headerlink" title="3.进一步过滤（筛选）"></a>3.进一步过滤（筛选）</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-comment">//选取首个 &lt;div&gt; 元素内部的第一个 &lt;p&gt; 元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;div p&quot;</span>).<span class="hljs-title function_">first</span>(); </span><br><span class="language-javascript">  <span class="hljs-comment">//选取首个 &lt;div&gt; 元素内部的最后一个 &lt;p&gt; 元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;div p&quot;</span>).<span class="hljs-title function_">last</span>();</span><br><span class="language-javascript">  <span class="hljs-comment">//选取被选元素中带有指定索引号的元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">  <span class="hljs-comment">// &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;p&gt;2&lt;/p&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span></span><br><span class="language-javascript">  <span class="hljs-comment">//选取类名为 &quot;intro&quot; 的所有 &lt;p&gt; 元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-string">&quot;.intro&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-comment">//选取类名不带有 &quot;intro&quot; 的所有 &lt;p&gt; 元素</span></span><br><span class="language-javascript">  $(<span class="hljs-string">&quot;p&quot;</span>).<span class="hljs-title function_">not</span>(<span class="hljs-string">&quot;.intro&quot;</span>);</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/jquery/jquery_ref_traversing.asp">其他一些遍历的方法</a></p>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS项目《贪吃蛇》</title>
    <link href="/2022/08/08/%E9%80%8F%E8%A7%86%EF%BC%9ATS%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%B4%AA%E5%90%83%E8%9B%87%E3%80%8B/%E9%80%8F%E8%A7%86%EF%BC%9ATS%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%B4%AA%E5%90%83%E8%9B%87%E3%80%8B/"/>
    <url>/2022/08/08/%E9%80%8F%E8%A7%86%EF%BC%9ATS%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%B4%AA%E5%90%83%E8%9B%87%E3%80%8B/%E9%80%8F%E8%A7%86%EF%BC%9ATS%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%B4%AA%E5%90%83%E8%9B%87%E3%80%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h3><p>在Web端，利用Html、CSS、Typescript语言，实现贪吃蛇游戏的功能</p><ol><li><h5 id="界面的搭建-HTML、CSS"><a href="#界面的搭建-HTML、CSS" class="headerlink" title="界面的搭建 HTML、CSS"></a>界面的搭建 HTML、CSS</h5></li><li><h5 id="系统功能的完成"><a href="#系统功能的完成" class="headerlink" title="系统功能的完成"></a>系统功能的完成</h5><ul><li>类型：蛇的实现<ul><li>蛇（头）的坐标</li><li>移动功能</li><li>转向功能</li><li>蛇身体变长功能</li><li>检测蛇是否撞到墙的功能</li><li>检测蛇是否撞到自己的功能</li></ul></li><li>类型：记分板的实现<ul><li>分数增加功能</li><li>等级（难度）增加功能</li></ul></li><li>类型：食物的实现<ul><li>随机生成食物坐标功能</li></ul></li><li>类型：游戏控制的实现（核心类）<ul><li>游戏初始化功能</li><li>键盘按下的响应功能</li><li>根据键盘响应改变蛇的方向功能</li><li>检测是否吃到食物功能</li></ul></li></ul></li></ol><h3 id="二、界面搭建"><a href="#二、界面搭建" class="headerlink" title="二、界面搭建"></a>二、界面搭建</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- index.html界面--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>贪吃蛇<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;stage&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;snake&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;food&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;score_panel&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                SCORE:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;score&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                LEVEL:<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;leve&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>问题：div下嵌套div，下面的DOM的获取方式没见过</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 设置变量</span><br><span class="hljs-variable">@bg-color:</span> <span class="hljs-number">#b7d4a8</span>;<br><br><span class="hljs-comment">//清除默认样式</span><br>*&#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 改变盒子模型的计算方式</span><br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>&#125;<br><br><span class="hljs-selector-tag">body</span>&#123;<br>  <span class="hljs-attribute">font</span>: bold <span class="hljs-number">20px</span> <span class="hljs-string">&quot;Courier&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//设置主窗口的样式</span><br><span class="hljs-selector-id">#main</span>&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">360px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">420px</span>;<br>  <span class="hljs-comment">// 设置背景颜色</span><br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">@bg-color</span>;<br>  <span class="hljs-comment">// 设置居中</span><br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> solid black;<br>  <span class="hljs-comment">// 设置圆角</span><br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">40px</span>;<br><br>  <span class="hljs-comment">// 开启弹性盒模型</span><br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-comment">// 设置主轴的方向</span><br>  <span class="hljs-attribute">flex-flow</span>: column;<br>  <span class="hljs-comment">// 设置侧轴的对齐方式</span><br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-comment">// 设置主轴的对齐方式</span><br>  <span class="hljs-attribute">justify-content</span>: space-around;<br><br>  <span class="hljs-comment">// 游戏舞台</span><br>  <span class="hljs-selector-id">#stage</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">304px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">304px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid black;<br>    <span class="hljs-comment">// 开启相对定位</span><br>    <span class="hljs-attribute">position</span>: relative;<br><br>    <span class="hljs-comment">// 设置蛇的样式</span><br>    <span class="hljs-selector-id">#snake</span>&#123;<br>        <span class="hljs-selector-tag">&amp;</span>&gt;<span class="hljs-selector-tag">div</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-variable">@bg-color</span>;<br>            <span class="hljs-comment">//开启绝对定位</span><br>            <span class="hljs-attribute">position</span>: absolute;<br>        &#125;<br>    &#125;<br>    <span class="hljs-selector-id">#food</span>&#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-comment">// background-color: red;</span><br>        <span class="hljs-attribute">display</span>: flex; <span class="hljs-comment">//父亲开启弹性盒</span><br>        <span class="hljs-attribute">flex-flow</span>: row wrap; <span class="hljs-comment">//设置主轴横向排列 wrap表示会换行</span><br>        <span class="hljs-attribute">justify-content</span>: space-between;<span class="hljs-comment">//主轴的空白空间分配到元素之间</span><br>        <span class="hljs-attribute">align-content</span>: space-between; <span class="hljs-comment">//让四个小方块在四周</span><br><br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">40px</span>;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">40px</span>;<br>        <span class="hljs-selector-tag">&amp;</span>&gt;<span class="hljs-selector-tag">div</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">4px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">4px</span>;<br>            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#000</span>;<br>            <span class="hljs-attribute">transform</span>: rotate(<span class="hljs-number">45deg</span>); <span class="hljs-comment">//设置每个div旋转45度</span><br>        &#125; <br>      <span class="hljs-comment">//不知道这边和 直接div有什么区别</span><br>    &#125;<br>  <br>  &#125;<br><br>  <span class="hljs-comment">// 记分牌</span><br>  <span class="hljs-selector-id">#score-panel</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-comment">// 设置主轴的对齐方式</span><br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//例如div span得到的是div下所有的span元素，而div&gt;span则是取得的div下第一级的span元素。</span><br></code></pre></td></tr></table></figure><h3 id="三、系统功能的完成"><a href="#三、系统功能的完成" class="headerlink" title="三、系统功能的完成"></a>三、系统功能的完成</h3><h4 id="1-蛇类"><a href="#1-蛇类" class="headerlink" title="1. 蛇类"></a>1. 蛇类</h4>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Snake</span> &#123;<br>    <span class="hljs-comment">//表示蛇头的元素</span><br>    <span class="hljs-attr">head</span>: <span class="hljs-title class_">HTMLElement</span><br>    <span class="hljs-comment">//蛇的身体，包括蛇头</span><br>    <span class="hljs-attr">bodies</span>: <span class="hljs-title class_">HTMLCollection</span><br>    <span class="hljs-comment">//获取蛇的容器</span><br>    <span class="hljs-attr">element</span>: <span class="hljs-title class_">HTMLElement</span><br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;snake&#x27;</span>)! <span class="hljs-comment">//获取蛇在html中的容器标签</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#snake &gt; div&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span> <span class="hljs-comment">//获取蛇头 #snake下的div标签</span><br>       <span class="hljs-comment">// &lt;div id=&quot;snake&quot;&gt;</span><br>       <span class="hljs-comment">//         &lt;div&gt;&lt;/div&gt;      //‘#snake &gt; div 获取的就是这个，id是snake，子元素 div标签</span><br>       <span class="hljs-comment">//&lt;/div&gt;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;div&#x27;</span>)! <span class="hljs-comment">//获取所有的div蛇身  //获取蛇下的所有div</span><br>    &#125;<br><br>    <span class="hljs-comment">//获取蛇头的坐标</span><br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">X</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">offsetLeft</span>   <span class="hljs-comment">//距离左边的距离</span><br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">Y</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">offsetTop</span>   <span class="hljs-comment">//距离上边的距离</span><br>    &#125;<br><br>    <span class="hljs-comment">//设置蛇头坐标 构造函数</span><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">X</span>(<span class="hljs-params">value: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span> === value) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span> || value &gt; <span class="hljs-number">290</span>) &#123;<br>            <span class="hljs-comment">//进入判断 说明蛇撞墙了</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;蛇撞墙了&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[<span class="hljs-number">1</span>] &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">offsetLeft</span> === value) &#123;<br>            <span class="hljs-comment">//如果发生了掉头，让头向反方向继续移动</span><br>            <span class="hljs-keyword">if</span> (value &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span>) &#123;<br>                value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span> - <span class="hljs-number">10</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span> + <span class="hljs-number">10</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">moveBody</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = value + <span class="hljs-string">&#x27;px&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkHeadBody</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">Y</span>(<span class="hljs-params">value: <span class="hljs-built_in">number</span></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span> === value) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">0</span> || value &gt; <span class="hljs-number">290</span>) &#123;<br>            <span class="hljs-comment">//进入判断 说明蛇撞墙了</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;蛇撞墙了&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[<span class="hljs-number">1</span>] &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">offsetTop</span> === value) &#123;<br>            <span class="hljs-comment">//如果发生了掉头，让头向反方向继续移动</span><br>            <span class="hljs-keyword">if</span> (value &gt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span>) &#123;<br>                value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span> - <span class="hljs-number">10</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span> + <span class="hljs-number">10</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">moveBody</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">head</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = value + <span class="hljs-string">&#x27;px&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">checkHeadBody</span>()<br>    &#125;<br><br>    <span class="hljs-comment">//设置蛇增加身体的方法</span><br>    <span class="hljs-title function_">addBody</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&#x27;beforeend&#x27;</span>, <span class="hljs-string">&quot;&lt;div&gt;&lt;/div&gt;&quot;</span>)<br>        <span class="hljs-comment">//在结束标签之前的位置插入一个HTML div</span><br>    &#125;<br><br>    <span class="hljs-title function_">moveBody</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//将后边身体设置为前面身体的位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">let</span> x = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i - <span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">offsetLeft</span><br>            <span class="hljs-keyword">let</span> y = (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i - <span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">offsetTop</span>;<br>            (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = x + <span class="hljs-string">&#x27;px&#x27;</span>;<br>            (<span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span>).<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = y + <span class="hljs-string">&#x27;px&#x27;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-title function_">checkHeadBody</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 获取所有的身体，检查是否和蛇头的坐标发生重叠</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">let</span> bd = <span class="hljs-variable language_">this</span>.<span class="hljs-property">bodies</span>[i] <span class="hljs-keyword">as</span> <span class="hljs-title class_">HTMLElement</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">X</span> === bd.<span class="hljs-property">offsetLeft</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">Y</span> === bd.<span class="hljs-property">offsetTop</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;撞到自己了&#x27;</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Snake</span>;  <span class="hljs-comment">//最后记得把类暴露出去 后面就可以import</span><br></code></pre></td></tr></table></figure><p>   补充：get和set （C#都忘光了。。。）</p>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-attr">_name</span>:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment">//私有属性，外部访问不到</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;&#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>()&#123;    <span class="hljs-comment">//get 使得该类具有了访问name属性的方法 ，后面就可以直接 person.name</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span>   <span class="hljs-comment">//实现的对私有属性的“访问”</span><br>  &#125;<br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">set</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">inputName:<span class="hljs-built_in">string</span></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_name</span> = inputName  <span class="hljs-comment">//实现对私有属性赋值</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-得分窗口类"><a href="#2-得分窗口类" class="headerlink" title="2.得分窗口类"></a>2.得分窗口类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//定义表示记分牌的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScorePanel</span> &#123;<br>    <span class="hljs-comment">// 记录分数和等级</span><br>    score = <span class="hljs-number">0</span><br>    level = <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 分数和等级所在的元素</span><br>    <span class="hljs-attr">scoreEle</span>: <span class="hljs-title class_">HTMLElement</span><br>    <span class="hljs-attr">levelEle</span>: <span class="hljs-title class_">HTMLElement</span><br>    <span class="hljs-attr">maxLevel</span>: <span class="hljs-built_in">number</span><br>    <span class="hljs-attr">upScore</span>: <span class="hljs-built_in">number</span><br><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">maxLevel: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>, upScore: <span class="hljs-built_in">number</span> = <span class="hljs-number">10</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">scoreEle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;score&#x27;</span>)!<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelEle</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;level&#x27;</span>)!<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxLevel</span> = maxLevel<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">upScore</span> = upScore<br>    &#125;<br>    <span class="hljs-title function_">addScore</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//实现分数自增</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span>++<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">scoreEle</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> + <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment">//判断分数是多少</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">score</span> % <span class="hljs-variable language_">this</span>.<span class="hljs-property">upScore</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">levelUp</span>()<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">levelUp</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//实现分数自增</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span> &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">maxLevel</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span>++<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">levelEle</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">level</span> + <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">ScorePanel</span>;<br></code></pre></td></tr></table></figure><h4 id="3-食物类"><a href="#3-食物类" class="headerlink" title="3.食物类"></a>3.食物类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Food</span>&#123;<br>    <span class="hljs-comment">//定义一个属性来表示食物所对应的元素</span><br>    <span class="hljs-attr">element</span>:<span class="hljs-title class_">HTMLElement</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//获取页面中的food元素并赋值给Element</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;food&#x27;</span>)!<br>    &#125;<br>    <span class="hljs-comment">//定义一个获取食物x轴坐标的方法</span><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">X</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">offsetLeft</span>  <span class="hljs-comment">//使得外部可以通过 food.X 和 food.Y 访问到 Food的坐标</span><br>    &#125;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">Y</span>()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">offsetTop</span><br>    &#125;<br>    <span class="hljs-comment">// 修改食物位置的方法</span><br>    <span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//生成一个随机的位置</span><br>        <span class="hljs-keyword">let</span> top = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">29</span>)*<span class="hljs-number">10</span><br>        <span class="hljs-keyword">let</span> left = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">29</span>)*<span class="hljs-number">10</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = left+<span class="hljs-string">&#x27;px&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">element</span>.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = top+<span class="hljs-string">&#x27;px&#x27;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Food</span>;<br></code></pre></td></tr></table></figure><h4 id="4-游戏控制类"><a href="#4-游戏控制类" class="headerlink" title="4.游戏控制类"></a>4.游戏控制类</h4><pre><code class="typescript">//控制其他的所有类//引入其他类import Snake from &quot;./snake&quot;;import Food from &quot;./food&quot;;import ScorePanel from &quot;./scorePanel&quot;;class GameControl &#123;  //定义三个属性  snake: Snake;  food: Food;  scorePanel: ScorePanel;  //创建属性 存储蛇的移动方向（按键方向）  direction: string = &quot;&quot;;  //创建属性 记录游戏是否结束  isLive = true;  constructor() &#123;    this.snake = new Snake();    this.food = new Food();    this.scorePanel = new ScorePanel();    this.init();  &#125;  //游戏的初始化方法，调用后游戏开始  init() &#123;    document.addEventListener(&quot;keydown&quot;, this.keyDownloadHandler.bind(this));    this.run();  &#125;  //创建一个键盘按下的响应函数  keyDownloadHandler(event: KeyboardEvent) &#123;    //赋值之前需要检查方向 event.key  用户是否按了正确的按键    this.direction = event.key; //用户按下按键的时候，方向值存到direction中  &#125;  run() &#123;    //根据方向，使得蛇的位置改变    //向上 top值减小 向下 top值增加 左left减少 右 left增加    //获取蛇现在的坐标    let X = this.snake.X;    let Y = this.snake.Y;    //根据按键的方向修改 X Y    switch (this.direction) &#123;      case &quot;ArrowUp&quot;:      case &quot;Up&quot;:        Y -= 10;        break;      case &quot;ArrowDown&quot;:      case &quot;Down&quot;:        Y += 10;        break;      case &quot;ArrowLeft&quot;:      case &quot;Left&quot;:        X -= 10;        break;      case &quot;ArrowRight&quot;:      case &quot;Right&quot;:        X += 10;        break;    &#125;    this.checkEat(X, Y)    try &#123;      this.snake.X = X;      this.snake.Y = Y;    &#125; catch (error) &#123;      alert(error)      this.isLive = false    &#125;    //开启定时调用    this.isLive &amp;&amp; setTimeout(this.run.bind(this), 100 - (this.scorePanel.level - 1) * 10);  &#125;  //检查蛇是否吃到了食物   checkEat(X: number, Y: number) &#123;    if (X === this.food.X &amp;&amp; Y === this.food.Y) &#123;      console.log(&#39;吃到食物&#39;)      //食物的位置要重置      this.food.change()      this.scorePanel.addScore()      this.snake.addBody()    &#125;  &#125;&#125;export default GameControl;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Projects</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typescript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>angular笔记</title>
    <link href="/2022/08/06/angular%E7%AC%94%E8%AE%B0/angular%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/06/angular%E7%AC%94%E8%AE%B0/angular%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Angular-学习"><a href="#Angular-学习" class="headerlink" title="Angular 学习"></a>Angular 学习</h2><h4 id="1-组件"><a href="#1-组件" class="headerlink" title="1.组件"></a>1.组件</h4><p>angular中 一个组件由三个文件组成</p><ul><li><p>.html、.ts、.css</p></li><li><p>ts文件中</p><ul><li>Selector :’app-my01’表示组件到名称，使用的时候<app-my01></app-my01></li><li>templateUrl 组件关联的html地址</li><li>styleUrl 组件所关联使用的css文件地址</li><li>Export class 组件的类名</li></ul></li><li><p>组件制作完毕之后，必须注册到全局中才能使用</p><ul><li>app.module.ts 中    declearations</li><li>在根组件html中使用组件 <app-my01></app-my01></li></ul></li><li><p>快速制作组件</p><ul><li>ng generate component 组件名称</li><li>缩写 ng g c 组件名称</li><li>自动更新到全局module中</li></ul></li><li><p>同一组件中数据和属性的绑定 </p><ul><li>在 ts脚本文件的 类中书写</li></ul> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My01Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br><br>  name =<span class="hljs-string">&#x27;01&#x27;</span><br>  age = <span class="hljs-number">18</span><br>  married = <span class="hljs-literal">false</span><br><br><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123; &#125;<br></code></pre></td></tr></table></figure><h5 id="花括号的使用"><a href="#花括号的使用" class="headerlink" title="花括号的使用"></a>花括号的使用</h5> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello world my <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;married&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>括号中支持</p><ul><li><p>数学运算符 加减乘除、取余</p></li><li><p>比较运算符 大于小于等于不等于。。。</p></li><li><p>三元运算符  age &gt; 30 ?  “中年”：青年</p></li><li><p>逻辑运算符</p><ul><li><p>逻辑与&amp;&amp; </p></li><li><p>逻辑或 ｜｜</p></li><li><p>逻辑非 ！</p></li></ul></li><li><p>对象方法</p></li></ul> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;&#123;<span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_">toUpperCase</span>()&#125;&#125;<br></code></pre></td></tr></table></figure><ul><li>类中的方法</li></ul> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// html</span><br>&lt;h3&gt;可以调用方法&#123;&#123;<span class="hljs-title function_">getVal</span>()&#125;&#125;&lt;/h3<br><span class="hljs-comment">// ts</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">getVal</span>():<span class="hljs-built_in">any</span>&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">65535</span>;<br> &#125;<br></code></pre></td></tr></table></figure><ul><li>局部变量</li></ul> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;input #heroInput&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;heroInput.value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>点击事件</li></ul> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//在 ts文件的类中写方法</span><br> <span class="hljs-title function_">showClick</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;触发了点击事件&#x27;</span>)<br>  &#125;<br></code></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--在html中插入button按钮并且注册事件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;showClick()&quot;</span>&gt;</span>点击事件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>其他一些知识点</p><ul><li>属性的绑定</li></ul></li></ul> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!--在ts类中注册了 name=&quot;朱凌一&quot; --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">title</span> = <span class="hljs-string">&quot;朱凌一&quot;</span>&gt;</span>本阶段学习的学生<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> [<span class="hljs-attr">title</span>]=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>本阶段学习的学生<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>   <br><span class="hljs-comment">&lt;!--  ts // name = “朱凌一”  --&gt;</span><br></code></pre></td></tr></table></figure><ul><li>特殊属性 HTML绑定</li></ul> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;html&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br>        <span class="hljs-comment">&lt;!-- //等价于 原生DOM中的 innerHTML 里面的内容会被当作纯文本 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> [<span class="hljs-attr">innerHtml</span>]=<span class="hljs-string">&quot;html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <br>        <span class="hljs-comment">&lt;!-- //数据被解析了 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>双向数据绑定<ul><li><p>angular 默认不支持双向数据绑定</p><ul><li>在 全局配置文件 app.module.ts中进行引入</li></ul></li></ul></li></ul> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">FormsModule</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/forms&#x27;</span>;<br></code></pre></td></tr></table></figure> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//注入Forms模块</span><br>      <span class="hljs-attr">imports</span>: [<br>          <span class="hljs-title class_">BrowserModule</span>,<br>          <span class="hljs-title class_">AppRoutingModule</span>,<br>          <span class="hljs-title class_">FormsModule</span><br>        ],<br></code></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--对name属性进行双向绑定 []--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="样式属性-class与style的使用"><a href="#样式属性-class与style的使用" class="headerlink" title="样式属性 class与style的使用"></a>样式属性 class与style的使用</h5><ul><li><p>动态样式 ngStyle</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> [<span class="hljs-attr">ngStyle</span>]=<span class="hljs-string">&quot;&#123;color:&#x27;red&#x27;,&#x27;font-size&#x27;:size&#125;&quot;</span>&gt;</span>&#123;&#123;size&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> [<span class="hljs-attr">ngStyle</span>]=<span class="hljs-string">&quot;&#123;color:&#x27;red&#x27;,fontSize:size&#125;&quot;</span>&gt;</span>&#123;&#123;size&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>对象类型属性名不能含有中划线</p><ul><li>小驼峰命名法或者用字符串包裹起来</li></ul></li><li><p>html不支持++、+=等复合运算符</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;size=size+1&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;&#123;danger:true&#125;&quot;</span>&gt;</span>变大<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;size=size+1&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;&#123;danger:size&gt;20&#125;&quot;</span>&gt;</span>变大<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;size=size+1&quot;</span> [<span class="hljs-attr">ngClass</span>]=<span class="hljs-string">&quot;&#123;success:size&gt;=30&#125;&quot;</span>&gt;</span>变大<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.css</span> 文件中<br><span class="hljs-selector-tag">h1</span>&#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><span class="hljs-selector-class">.danger</span>&#123;<br>    <span class="hljs-attribute">color</span>:white;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br><br>&#125;<br><br><span class="hljs-selector-class">.success</span>&#123;<br>    <span class="hljs-attribute">color</span>:white;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h5><h6 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h6><ol><li><p>if指令</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">*ngif=<span class="hljs-string">&quot;expression&quot;</span><br>&lt;div *ngIf=<span class="hljs-string">&quot;score&lt;=90&quot;</span>&gt;良好&lt;/div&gt;<br></code></pre></td></tr></table></figure></li><li><p>if-else指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ng-container</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;score&gt;=100; else elseTemplate&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>及格<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ng-container</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ng-template</span> #<span class="hljs-attr">elseTemplate</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>不及格<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ng-template</span>&gt;</span><br><span class="hljs-comment">&lt;!-- elseTemplate 标记else方法执行的跳转位置 --&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>switch指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> [<span class="hljs-attr">ngSwitch</span>]=<span class="hljs-string">&quot;type&quot;</span>&gt;</span> <br>         <span class="hljs-comment">&lt;!-- ngSwitch 变量值 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> 普通会员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> 黄金会员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> *<span class="hljs-attr">ngSwitchCase</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span> 钻石会员<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span> *<span class="hljs-attr">ngSwitchDefault</span>&gt;</span>啥也不是<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="循环指令"><a href="#循环指令" class="headerlink" title="循环指令"></a>循环指令</h6><ol><li><p>for 循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"> *ngFor = &quot;let item of items&quot;<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of names&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>带有序号的for循环</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- i 元素在数组中的序号 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of names; let i=index&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>&#123;&#123;i&#125;&#125;.<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h6 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h6>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 自定义指令： ng generate directive 指令名 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- 简化写法 ng g d 指令名 --&gt;</span><br>      <span class="hljs-comment">&lt;!-- eg: 自定义指令 appfocus 让输入框自动获取焦点 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>  <span class="hljs-attr">appFocus</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 ng g d focus 生成的ts配置文件中<br> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//使得 input标签获得焦点</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Directive</span>, <span class="hljs-title class_">ElementRef</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br></code></pre></td></tr></table></figure></p>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[appFocus]&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FocusDirective</span> &#123;<br>  <span class="hljs-comment">//生成新的指令必须重启服务器，否则不生效</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">e:ElementRef</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    <span class="hljs-keyword">let</span> input = e.<span class="hljs-property">nativeElement</span> <span class="hljs-comment">//用指令绑定标签</span><br>    input.<span class="hljs-title function_">focus</span>() <span class="hljs-comment">//通过指令使得标签获得了 nativeElement.foucs的原生功能</span><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//使得 input标签中的值变为大写</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Directive</span>, <span class="hljs-title class_">ElementRef</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Directive</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;[appUpper]&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UpperDirective</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">e:ElementRef</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>    e.<span class="hljs-property">nativeElement</span>.<span class="hljs-property">value</span> = e.<span class="hljs-property">nativeElement</span>.<span class="hljs-property">value</span>.<span class="hljs-title function_">toUpperCase</span>()<br><br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//e.nativeElement 当前标签 如 input </span><br></code></pre></td></tr></table></figure><h5 id="过滤器、管道（pipe）"><a href="#过滤器、管道（pipe）" class="headerlink" title="过滤器、管道（pipe）"></a>过滤器、管道（pipe）</h5><p>常常用来格式化数据</p><h6 id="1-常用的系统管道"><a href="#1-常用的系统管道" class="headerlink" title="1.常用的系统管道"></a>1.常用的系统管道</h6>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>大写:&#123;&#123;&#x27;hello&#x27;|uppercase&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小写:&#123;&#123;&#x27;WORLD&#x27;|lowercase&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>首字母大写&#123;&#123;&#x27;my name is xx&#x27;|titlecase&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>百分数:&#123;&#123;0.33|percent&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>百分数小数位：&#123;&#123;0.565656|percent:&#x27;2.2&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!-- 整数位两位，小数位两位 56.56%  不足要求的位数会用0补全--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>钱：&#123;&#123;123456.789|currency&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 自带四舍五入，带千进位 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>钱：&#123;&#123;123456.789|currency:&#x27;¥&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 日期格式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 时间戳需要ts中文件支持 距离1970年1月1日的秒数 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>时间戳:&#123;&#123;time&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 转化为日期格式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>日期格式:&#123;&#123;time|date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过参数定制日期格式 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 年y 月M（大M） 日d 小时h 分钟m 秒s --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>日期：&#123;&#123;time|date:&#x27;yyyy-MM-dd HH:mm:ss&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>日期：&#123;&#123;time|date:&#x27;yyyy-M-d hh:mm:ss&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-自定义管道"><a href="#2-自定义管道" class="headerlink" title="2.自定义管道"></a>2.自定义管道</h6>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//ng g p gender 生成管道文件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Pipe</span>, <span class="hljs-title class_">PipeTransform</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-meta">@Pipe</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;gender&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenderPipe</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PipeTransform</span> &#123;<br><br>  <span class="hljs-comment">// transform(value: unknown, ...args: unknown[]): unknown &#123;</span><br>  <span class="hljs-comment">//   return null;</span><br>  <span class="hljs-comment">// &#125;</span><br>  <span class="hljs-comment">// 管道生成之后必须重启</span><br>  <span class="hljs-comment">// 固定的管道写法问题&#123;&#123;value|管道名&#125;&#125;</span><br>  <span class="hljs-comment">//value值 会固定传递到下方transform方法的参数中</span><br>  <span class="hljs-comment">// 返回值就会作为管道的处理结果</span><br>  <span class="hljs-title function_">transform</span>(<span class="hljs-params">value:<span class="hljs-built_in">any</span>,lang=<span class="hljs-string">&#x27;zh&#x27;</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>     <span class="hljs-keyword">if</span>(lang==<span class="hljs-string">&#x27;zh&#x27;</span>)&#123;<br>      <span class="hljs-keyword">if</span>(value==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>      <span class="hljs-keyword">if</span>(value==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;女&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(lang==<span class="hljs-string">&#x27;en&#x27;</span>)&#123;<br>      <span class="hljs-keyword">if</span>(value==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;male&#x27;</span>;<br>      <span class="hljs-keyword">if</span>(value==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;female&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 自定义管道--&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>性别:en<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let item of emps;let i = index&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;&#x27;序号:&#x27;+(i+1)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-comment">&lt;!-- 制作gender性别 pipe管道 --&gt;</span><br>          <span class="hljs-comment">&lt;!-- 生成自定义管道 ng g p  --&gt;</span><br>          <span class="hljs-comment">&lt;!-- 管道的可选、非可选参数声明 --&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.sex|gender&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123;item.sex|gender:&quot;en&quot;&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h5><p>定义：一个组件从生成到出现，然后最终销毁的过程 就是组件的生命周期</p><p>生命周期的每个阶段都会触发对应的函数，利用这些函数可以在不同周期完成对应的任务</p><ol><li><p>constructor() </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//面向对象中类的构造方法</span><br><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件出生的第一时间触发&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ngOnDestroy()</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">ngOnDestroy</span>():<span class="hljs-built_in">void</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;组件销毁时触发&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ngOnInit()</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">ngOnOInit</span>():<span class="hljs-built_in">void</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件中的内容开始初始化&quot;</span>) <span class="hljs-comment">//类似vue中mounted</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>总览</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; <br>  <span class="hljs-comment">//组件的构造函数 第一个执行的</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My02Component进行constructor完成&#x27;</span>)<br>&#125;<br>show02 = <span class="hljs-literal">true</span><br><span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Init执行完成&#x27;</span>)<br>  <span class="hljs-comment">//常常在这个方法中发送一些网络请求</span><br>&#125;<br><span class="hljs-title function_">ngAfterContentInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called after ngOnInit when the component&#x27;s or directive&#x27;s content has been initialized.</span><br>  <span class="hljs-comment">//Add &#x27;implements AfterContentInit&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;组件中的数据初始化完毕时候触发&#x27;</span>);  <br>&#125;<br><span class="hljs-title function_">ngAfterViewInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called after ngAfterContentInit when the component&#x27;s view has been initialized. Applies to components only.</span><br>  <span class="hljs-comment">//Add &#x27;implements AfterViewInit&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件上的UI，显示的时候用户的界面初始化完成时候的时候触发&quot;</span>);<br>&#125;<br><br><span class="hljs-title function_">ngAfterContentChecked</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called after every check of the component&#x27;s or directive&#x27;s content.</span><br>  <span class="hljs-comment">//Add &#x27;implements AfterContentChecked&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;专门用来监听组件上的数据发生变化，数据发生变化的时候触发&quot;</span>);<br>  <br>&#125;<br><span class="hljs-title function_">ngAfterViewChecked</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called after every check of the component&#x27;s view. Applies to components only.</span><br>  <span class="hljs-comment">//Add &#x27;implements AfterViewChecked&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;组件上的UI随着数据更新而变化时候触发&quot;</span>);<br>  <br>&#125;<br><span class="hljs-title function_">ngOnDestroy</span>(): <span class="hljs-built_in">void</span> &#123;<br>  <span class="hljs-comment">//Called once, before the instance is destroyed.</span><br>  <span class="hljs-comment">//Add &#x27;implements OnDestroy&#x27; to the class.</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;OnDestroy组件销毁完成&#x27;</span>)<br>  <span class="hljs-comment">//组件销毁的时候做一些清理工作</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-组件通信"><a href="#2-组件通信" class="headerlink" title="2.组件通信"></a>2.组件通信</h4><h5 id="父元素与子元素"><a href="#父元素与子元素" class="headerlink" title="父元素与子元素"></a>父元素与子元素</h5>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 给要掌控的子元素组件一个唯一标识 类似 id=&#x27;xxx&#x27; --&gt;</span><br><span class="hljs-comment">&lt;!-- 与语法糖 #代替了 id --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-my03</span> #<span class="hljs-attr">my03</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-my03</span>&gt;</span><br></code></pre></td></tr></table></figure>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;my03&#x27;</span>)my03!:<span class="hljs-title class_">My03Component</span><br>    <br><span class="hljs-title function_">change</span>(<span class="hljs-params"></span>)&#123; <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">my03</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">my03</span>.<span class="hljs-property">age</span> +=<span class="hljs-number">10</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">my03</span>.<span class="hljs-title function_">show</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="父子传参"><a href="#父子传参" class="headerlink" title="父子传参"></a>父子传参</h5><p><img src="/img/input-output-diagram.svg" alt="input-output-diagram"></p><ol><li><h6 id="父组件传值给子组件"><a href="#父组件传值给子组件" class="headerlink" title="父组件传值给子组件"></a>父组件传值给子组件</h6><ol><li>父组件可以直接访问子组件中的public变量</li></ol><ul><li>父组件中声明子组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--父组件的html文件，引入子组件  设置父组件ts中ViewChild的属性（索引）：#child--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>father works!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-child</span> #<span class="hljs-attr">child</span> [<span class="hljs-attr">childReceivefatherMsg</span>]=<span class="hljs-string">&quot;fatherMsg&quot;</span> [<span class="hljs-attr">childUseFatherRun</span>]=<span class="hljs-string">&quot;fatherRun&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-child</span>&gt;</span><br><span class="hljs-comment">&lt;!--子中：childReceivefatherMsg属性，绑定接受父组件中fatherMsg属性--&gt;</span><br><span class="hljs-comment">&lt;!--子中：childUseFatherRun，绑定调用父组件中childUseFatherRun方法--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;fatherUseChild()&quot;</span>&gt;</span>调用子组件属性<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//父组件的TS文件</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">OnInit</span>, <span class="hljs-title class_">ViewChild</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-father&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./father.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./father.component.css&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FatherComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br><br>  <span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;child&#x27;</span>) <span class="hljs-attr">child</span>: <span class="hljs-built_in">any</span>  <span class="hljs-comment">//获取对应的子组件，赋值给child变量</span><br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">fatherMsg</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;这是父组件中的信息&#x27;</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br><br>  <span class="hljs-title function_">fatherRun</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;父组件正在跑&quot;</span>)<br>  &#125;<br><br>  <span class="hljs-title function_">fatherUseChild</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//父组件调用子组件的方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">child</span>.<span class="hljs-property">childMsg</span>)<br>  &#125;<br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>子组件中声明接受与调用的变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My04Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>  <span class="hljs-meta">@Input</span>() name!:<span class="hljs-built_in">string</span>  <span class="hljs-comment">//核心 利用@Input 获取父组件中指定的name属性，作为自己一个属性</span><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!--子组件的html中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>child works!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;clildRunsFather()&quot;</span>&gt;</span>子组件调用父组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript">   <span class="hljs-comment">//子组件的TS文件中</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Component</span>, <span class="hljs-title class_">Input</span>, <span class="hljs-title class_">OnInit</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Component</span>(&#123;<br>  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;app-child&#x27;</span>,<br>  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./child.component.html&#x27;</span>,<br>  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./child.component.css&#x27;</span>]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildComponent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br><br>  <span class="hljs-meta">@Input</span>()<br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">childReceivefatherMsg</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">undefined</span><br>  <span class="hljs-meta">@Input</span>()<br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">childUseFatherRun</span>: <span class="hljs-built_in">any</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-attr">childMsg</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;这是子组件中的属性信息&#x27;</span><br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br><br><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br><br>  <span class="hljs-title function_">clildRunsFather</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">childReceivefatherMsg</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">childUseFatherRun</span>()<br>  &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>子元素传值给父元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;1--父组件&gt;&lt;/1--&gt;<br><span class="hljs-comment">&lt;!--父组件中安排一个间谍--&gt;</span>   <br><span class="hljs-tag">&lt;<span class="hljs-name">app-my05</span> (<span class="hljs-attr">msgEvent</span>)=<span class="hljs-string">&quot;show($event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-my05</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//父组件中设置show方法</span><br><span class="hljs-title function_">show</span>(<span class="hljs-params">msg:<span class="hljs-built_in">string</span></span>)&#123;<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;msg:&#x27;</span>,msg)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">pMsg</span> = msg<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;msgEvent.emit(&#x27;东东&#x27;)&quot;</span>&gt;</span>东东<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;msgEvent.emit(&#x27;亮亮&#x27;)&quot;</span>&gt;</span>亮亮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;msgEvent.emit(&#x27;然然&#x27;)&quot;</span>&gt;</span>然然<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//子组件中注册间谍事件并声明Output传参</span><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My05Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <span class="hljs-meta">@Output</span>()msgEvent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>()<br> <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>（根）核型组件中的设置<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!--根组件中--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">app-father</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-father</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h5 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h5><p>angular中利用服务实现状态管理，在组件之间共享数据</p>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// ng g s name 生成名为name的服务，类为NameService</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Injectable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-meta">@Injectable</span>(&#123;<br>  <span class="hljs-attr">providedIn</span>: <span class="hljs-string">&#x27;root&#x27;</span><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NameService</span> &#123;<br><span class="hljs-comment">//nameS下的names属性 nameS.names</span><br>  names =[<span class="hljs-string">&#x27;亮亮&#x27;</span>,<span class="hljs-string">&#x27;然呢&#x27;</span>,<span class="hljs-string">&#x27;东东&#x27;</span>]<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//在组件ts文件中 注册服务</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My06Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <br>  <span class="hljs-comment">//声明属性 来保存传入的服务 </span><br>  <span class="hljs-comment">//只有属性才能在html中使用  ：类型给VScode看，能够解析</span><br>  <span class="hljs-attr">nameS</span>:<span class="hljs-title class_">NameService</span> <br><br>  <span class="hljs-comment">//声明依赖 要想初始化当前组件必须传入一个 NameService类型的变量</span><br>  <span class="hljs-comment">//变量名是自定义的，最好需要有一定的含义</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">nameS:NameService</span>) &#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">nameS</span> = nameS<br>  &#125;<br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//语法糖写法</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">My06Component</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OnInit</span> &#123;<br>  <br>  <span class="hljs-comment">//声明属性 来保存传入的服务 </span><br>  <span class="hljs-comment">//只有属性才能在html中使用  ：类型给VScode看，能够解析</span><br><br>  <span class="hljs-comment">//声明依赖 要想初始化当前组件必须传入一个 NameService类型的变量</span><br>  <span class="hljs-comment">//变量名是自定义的，最好需要有一定的含义</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> nameS:NameService</span>) &#123;  <span class="hljs-comment">//加上public</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">nameS</span> = nameS<br>  &#125;<br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-网络请求"><a href="#4-网络请求" class="headerlink" title="4.网络请求"></a>4.网络请求</h4>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// Angular 中自带 HttpClient模块</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">HttpClientModule</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/common/http&#x27;</span>  <span class="hljs-comment">//加载网络模块</span><br><span class="hljs-comment">//下方imports中</span><br><span class="hljs-attr">imports</span>:[<span class="hljs-title class_">HttpClientModule</span>]<br></code></pre></td></tr></table></figure>   <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs typescript">res!:<span class="hljs-title class_">Result</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> http:HttpClient</span>) &#123;<br>    <span class="hljs-keyword">let</span> url = <span class="hljs-string">&quot;http://localhost:8082/server&quot;</span><br>    <span class="hljs-keyword">let</span> body = <span class="hljs-string">&#x27;pn0=1&#x27;</span><br>    <span class="hljs-keyword">let</span> options =&#123;<br>      <span class="hljs-attr">headers</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>(&#123;<br>        <span class="hljs-comment">//内容类型： 代表参数格式是字符串类型</span><br>        <span class="hljs-string">&#x27;content-type&#x27;</span>:<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>      &#125;)<br>    &#125;<br>    <span class="hljs-comment">// @ts-ignore</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">http</span>.<span class="hljs-title function_">get</span>(url).<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">(<span class="hljs-params">res:Result</span>)=&gt;</span>&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">name</span>)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">res</span> = res<br>    &#125;)<br>   &#125;<br><br>  <span class="hljs-title function_">ngOnInit</span>(): <span class="hljs-built_in">void</span> &#123;<br>  &#125;<br><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Result</span>&#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>;<br>  <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Notes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver（四 其他）</title>
    <link href="/2022/07/09/Geoserver4/Geoserver4/"/>
    <url>/2022/07/09/Geoserver4/Geoserver4/</url>
    
    <content type="html"><![CDATA[<h3 id="一、WMS-问题"><a href="#一、WMS-问题" class="headerlink" title="一、WMS 问题"></a>一、WMS 问题</h3><ul><li><p><a href="https://www.osgeo.cn/geoserver-user-manual/services/wms/reference.html">WMS参考</a></p><span id="more"></span></li></ul><h5 id="1-GetCapabilities"><a href="#1-GetCapabilities" class="headerlink" title="1. GetCapabilities"></a>1. GetCapabilities</h5><ul><li>```<br><a href="http://localhost:8080/geoserver/wms">http://localhost:8080/geoserver/wms</a>?<br>service=wms&amp; //服务名称<br>version=1.1.1&amp;//服务版本<br>request=GetCapabilities//请求功能<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><br>+ 有三个参数传递给WMS服务器， `<span class="hljs-attr">service</span><span class="hljs-operator">=</span>wms` ， `<span class="hljs-attr">version</span><span class="hljs-operator">=</span><span class="hljs-number">1.1</span><span class="hljs-number">.1</span>` 和 `<span class="hljs-attr">request</span><span class="hljs-operator">=</span>GetCapabilities` . 这个 `service` 参数告诉WMS服务器即将发出WMS请求。这个 `version` 参数引用正在请求的WMS版本。这个 `request` 参数指定getCapabilities操作。<br><br><span class="hljs-meta">##### 2. GetMap</span><br><br>+ ```<br><span class="hljs-symbol">  http:</span><span class="hljs-comment">//localhost:8080/geoserver/wms?</span><br>  <span class="hljs-attr">request</span><span class="hljs-operator">=</span>GetMap <span class="hljs-comment">//请求功能</span><br>  <span class="hljs-variable">&amp;service</span>=WMS<span class="hljs-comment">//服务名称</span><br>  <span class="hljs-variable">&amp;version</span>=<span class="hljs-number">1.1</span><span class="hljs-number">.1</span><span class="hljs-comment">//服务版本</span><br>  <span class="hljs-variable">&amp;layers</span>=topp%<span class="hljs-number">3</span>Astates<br>  <span class="hljs-variable">&amp;styles</span>=population<br>  <span class="hljs-variable">&amp;srs</span>=EPSG%<span class="hljs-number">3</span>A4326 <span class="hljs-comment">// SRS 坐标</span><br>  <span class="hljs-variable">&amp;bbox</span>=<span class="hljs-number">-145.15104058007</span>,<span class="hljs-number">21.731919794922</span>,<span class="hljs-number">-57.154894212888</span>,<span class="hljs-number">58.961058642578</span>&amp;<br>  <span class="hljs-variable">&amp;width</span>=<span class="hljs-number">780</span><br>  <span class="hljs-variable">&amp;height</span>=<span class="hljs-number">330</span><br>  <span class="hljs-variable">&amp;format</span>=image%<span class="hljs-number">2F</span>png<br></code></pre></td></tr></table></figure></li></ul><h5 id="3-GetFeatureInfo"><a href="#3-GetFeatureInfo" class="headerlink" title="3.GetFeatureInfo"></a>3.GetFeatureInfo</h5><ul><li><p>请求XML</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:8080/geoserver/wms?</span><br><span class="hljs-attr">request</span><span class="hljs-operator">=</span>GetFeatureInfo<br><span class="hljs-variable">&amp;service</span>=WMS<br><span class="hljs-variable">&amp;version</span>=<span class="hljs-number">1.1</span><span class="hljs-number">.1</span><br><span class="hljs-variable">&amp;layers</span>=topp%<span class="hljs-number">3</span>Astates<br><span class="hljs-variable">&amp;styles</span>=<br><span class="hljs-variable">&amp;srs</span>=EPSG%<span class="hljs-number">3</span>A4326<br><span class="hljs-variable">&amp;format</span>=image%<span class="hljs-number">2F</span>png<br><span class="hljs-variable">&amp;bbox</span>=<span class="hljs-number">-145.151041</span>%<span class="hljs-number">2</span>C21<span class="hljs-number">.73192</span>%<span class="hljs-number">2</span>C<span class="hljs-number">-57.154894</span>%<span class="hljs-number">2</span>C58<span class="hljs-number">.961059</span><br><span class="hljs-variable">&amp;width</span>=<span class="hljs-number">780</span><br><span class="hljs-variable">&amp;height</span>=<span class="hljs-number">330</span><br><span class="hljs-variable">&amp;query_layers</span>=topp%<span class="hljs-number">3</span>Astates<br><span class="hljs-variable">&amp;info_format</span>=text%<span class="hljs-number">2F</span>html<br><span class="hljs-variable">&amp;feature_count</span>=<span class="hljs-number">50</span><br><span class="hljs-variable">&amp;x</span>=<span class="hljs-number">353</span><br><span class="hljs-variable">&amp;y</span>=<span class="hljs-number">145</span><br><span class="hljs-variable">&amp;exceptions</span>=application%<span class="hljs-number">2F</span>vnd.ogc.se_xml<br></code></pre></td></tr></table></figure></li><li><p>请求GeoJson</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:8080/geoserver/wms?</span><br><span class="hljs-variable">&amp;</span>INFO_FORMAT=application/json<br><span class="hljs-variable">&amp;</span>REQUEST=GetFeatureInfo<br><span class="hljs-variable">&amp;</span>EXCEPTIONS=application/vnd.ogc.se_xml<br><span class="hljs-variable">&amp;</span>SERVICE=WMS<br><span class="hljs-variable">&amp;</span>VERSION=<span class="hljs-number">1.1</span><span class="hljs-number">.1</span><br><span class="hljs-variable">&amp;</span>WIDTH=<span class="hljs-number">970</span><span class="hljs-variable">&amp;</span>HEIGHT=<span class="hljs-number">485</span><span class="hljs-variable">&amp;</span>X=<span class="hljs-number">486</span><span class="hljs-variable">&amp;</span>Y=<span class="hljs-number">165</span><span class="hljs-variable">&amp;</span>BBOX=<span class="hljs-number">-180</span>,<span class="hljs-number">-90</span>,<span class="hljs-number">180</span>,<span class="hljs-number">90</span><br><span class="hljs-variable">&amp;</span>LAYERS=COUNTRYPROFILES:grp_administrative_map<br><span class="hljs-variable">&amp;</span>QUERY_LAYERS=COUNTRYPROFILES:grp_administrative_map<br><span class="hljs-variable">&amp;</span>TYPENAME=COUNTRYPROFILES:grp_administrative_map<br></code></pre></td></tr></table></figure></li></ul><h5 id="4-Describe-Layer"><a href="#4-Describe-Layer" class="headerlink" title="4.Describe Layer"></a>4.Describe Layer</h5><ul><li><pre><code class="hljs">http://localhost:8080/geoserver/wms?service=WMS&amp;version=1.1.1&amp;request=DescribeLayer&amp;layers=sf:roads,topp:tasmania_roads,nurc:mosaic&amp;outputFormat=application/json</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver（三 发布与服务）</title>
    <link href="/2022/07/05/Geoserver3/Geoserver3/"/>
    <url>/2022/07/05/Geoserver3/Geoserver3/</url>
    
    <content type="html"><![CDATA[<h3 id="一、发布Shapefile文件"><a href="#一、发布Shapefile文件" class="headerlink" title="一、发布Shapefile文件"></a>一、发布Shapefile文件</h3><span id="more"></span><h6 id="1-Shapefile实际上是文件的集合-shp、-dbf、-shx、-prj"><a href="#1-Shapefile实际上是文件的集合-shp、-dbf、-shx、-prj" class="headerlink" title="1. Shapefile实际上是文件的集合[.shp、.dbf、.shx、.prj]"></a>1. Shapefile实际上是文件的集合[.shp、.dbf、.shx、.prj]</h6><ul><li>同一个shapefile的文件最好放在同一个目录中</li><li>缺少.prj文件，Geoserver可能无法加载shapefile</li></ul><h6 id="2-创建工作区-空间-，以后的内容都可以在该工作-空间-中发布"><a href="#2-创建工作区-空间-，以后的内容都可以在该工作-空间-中发布" class="headerlink" title="2. 创建工作区(空间)，以后的内容都可以在该工作(空间)中发布"></a>2. 创建工作区(空间)，以后的内容都可以在该工作(空间)中发布</h6><h6 id="3-点击左侧-数据–-gt-数据存储-添加新的数据仓库"><a href="#3-点击左侧-数据–-gt-数据存储-添加新的数据仓库" class="headerlink" title="3. 点击左侧 数据–&gt;数据存储 添加新的数据仓库"></a>3. 点击左侧 数据–&gt;数据存储 添加新的数据仓库</h6><ol><li>新建数据源–&gt;矢量数据源–&gt;shapefile(.shp)文件</li><li>字符集<ul><li>英文：默认</li><li>中文: GBK </li><li><img src="/img/Geoserver3_2.png"></li></ul></li></ol><h6 id="4-发布"><a href="#4-发布" class="headerlink" title="4. 发布"></a>4. 发布</h6><ul><li><p>默认存储完直接跳转到发布</p></li><li><p>在图层中选择刚刚存储的图层点击发布</p></li></ul><h6 id="5-编辑发布的图层信息"><a href="#5-编辑发布的图层信息" class="headerlink" title="5. 编辑发布的图层信息"></a>5. 编辑发布的图层信息</h6><ul><li>关键字：提供快速索引</li><li> <img src="/img/Geoserver3_3.png"><h6 id="6-预览"><a href="#6-预览" class="headerlink" title="6. 预览"></a>6. 预览</h6></li><li>图层预览: OpenLayers</li></ul><h3 id="二、发布GeoTIFF-文件"><a href="#二、发布GeoTIFF-文件" class="headerlink" title="二、发布GeoTIFF 文件"></a>二、发布GeoTIFF 文件</h3><p> 与发布Shapefile文件类似</p><h3 id="三、发布PostGIS"><a href="#三、发布PostGIS" class="headerlink" title="三、发布PostGIS"></a>三、发布PostGIS</h3><h3 id="四、发布切片服务"><a href="#四、发布切片服务" class="headerlink" title="四、发布切片服务"></a>四、发布切片服务</h3><ul><li>参考 <a href="#WMS">WMS</a>和<a href="#WTMS">WMTS</a></li></ul><h3 id="五、地图服务"><a href="#五、地图服务" class="headerlink" title="五、地图服务"></a>五、地图服务</h3><h4 id="0-Preface"><a href="#0-Preface" class="headerlink" title="0. Preface"></a>0. Preface</h4><ul><li><p>地理数据形式： 矢量、栅格</p></li><li><p>矢量(Vector)</p><ul><li><p>shp文件 ，核心：点坐标</p></li><li><p>在数据库中的存储形式：表</p></li><li><p>e.g. arcgis中矢量数据的属性表dbf</p></li><li><p>和前端的交互方式：</p><ol><li>json格式，地理数据常用Geojson格式<ul><li>GeoJSON的强大之处在于它可以作为一种数据格式媒介，和其它几种数据格式进行相互转化，他也可以直接和shape格式的文件做转化。非常方便。而且它保存的数据是完整的，数据体积也很小。</li></ul></li><li>xml格式，地理数据常用KML，GML格式</li></ol></li></ul></li><li><p>栅格(Grid)</p><ul><li><p>Grid、Rater、Tiff文件，类似图片。</p></li><li><p>可以概括为Image类型的</p></li></ul></li></ul><h4 id="1-WMS"><a href="#1-WMS" class="headerlink" title="1.WMS"></a><span id="WMS">1.WMS</span></h4><ul><li><p>全称：Web Map Service  网络地图服务 <a href="https://docs.geoserver.org/stable/en/user/services/wms/index.html">官方文档</a></p></li><li><p>它是利用具有地理空间位置信息的数据制作地图，其中将地图定义为地理数据的可视化表现。WMS定义了一个规范的HTTP接口，支持标准HTTP协议的GET和POST请求，但多基于GET方式进行服务请求。能够根据用户请求返回相应的地图（包括<strong>PNG，GIF，JPEG</strong>等栅格形式或者是<strong>SVG和WEB CGM</strong>等矢量形式）。</p></li><li><p>WMS提供如下操作:</p><ol><li><p>GetCapabitities</p><p>返回服务级元数据，它是对服务信息内容和要求参数的一种描述。</p></li><li><p>GetMap</p><p>返回一个地图影像，其地理空间参考和大小参数是明确定义了的。</p></li><li><p>GetFeatureInfo</p><p>返回显示在地图上的某些特殊要素的信息。</p></li><li><p>GetLegendGraphic</p><p>返回地图的图例信息。</p></li></ol></li><li><p>简单概括：<strong>图片格式</strong>的地图被封装成了叫做WMS的服务。把你的数据源想方设法转化成一张和你数据源长得一样的图片。</p></li><li><p>但是无论怎么放大缩小，它就只是一张完整的图片。</p></li></ul><h4 id="2-WFS"><a href="#2-WFS" class="headerlink" title="2.WFS"></a>2.WFS</h4><ul><li><p>全称：Web Feature Service  Web矢量要素服务 <a href="https://docs.geoserver.org/stable/en/user/services/wfs/index.html">官方文档</a></p></li><li><p>矢量类型的数据源被封装成了WFS服务。服务返回矢量级的GML编码，可以对矢量进行增加、修改、删除等事务操作。</p></li><li><p>优点</p><ol><li>矢量图形不会随着放大程度的改变而失真，图片做不到。</li><li>.两要素方便与交互和编辑，修改形状等，这一点图片也做不到。</li></ol></li><li><p>WFS提供如下操作</p><ol><li>GetCapabilities<br> 获取WFS服务的元数据（介绍服务中的要素类和支持的操作）</li><li>DescribeFeatureType<br> 获取WFS服务支持的要素类的定义（要素类的元数据，比如要素包含哪些字段）</li><li>GetFeature<br> 获取要素数据</li><li>GetGmlObject<br> 通过XLink获取GML对象</li><li>Transaction<br> 创建、更新、删除要素数据的事务操作</li><li>LockFeature<br> 在事务过程中锁定要素。</li></ol></li></ul><h4 id="3-WCS"><a href="#3-WCS" class="headerlink" title="3.WCS"></a>3.WCS</h4><ul><li><p>全称：Web Coverage Service Web栅格服务 <a href="https://docs.geoserver.org/stable/en/user/services/wcs/index.html">官方文档</a></p></li><li><p>它将包含地理位置值的地理空间数据作为“<strong>栅格或者说“覆盖”（Coverage）</strong>”在网上相互交换。</p></li><li><p>WCS提供如下操作</p><ol><li><p>GetCapabilities</p><p>返回描述服务和数据集的XML文档。</p></li><li><p>GetCoverage</p><p>是在GetCapabilities确定什么样的查询可以执行、什么样的数据能够获取之后执行的，它使用通用的栅格格式返回地理位置的值或属性。</p></li><li><p>DescribeCoverageType</p><p>允许客户端请求由具体的WCS服务器提供的任一覆盖层的完全描述。</p></li></ol></li></ul><h4 id="4-TMS"><a href="#4-TMS" class="headerlink" title="4.TMS"></a>4.TMS</h4><ul><li>全称 ：Tile Map Service （OSGeo的）切片地图服务规范，提供的操作允许用户按需访问切片地图。将切片保存到了本地，使得访问速度更快，还支持修改坐标系，是一种纯RESTful的服务。</li><li>Tile（切片）思想<ul><li>使用瓦片地图时，我们看到的是一张铺满整个屏幕的大的地图图片。实际上，这张大的图片是多个尺寸相同（通常是256*256像素）的小图片按照既定规则无缝拼接而成的，这些小图片就是瓦片。瓦片按照如下图所示的金字塔结构组织，每张瓦片都可通过级别、行列号唯一标记。在平移地图、缩放地图时，浏览器根据金字塔规则，计算出所需的瓦片，从瓦片服务器获取并拼接。</li><li>由于瓦片是静态的图片，可预先生成，通过缓存和CDN技术，瓦片服务器可提供高效的瓦片读取服务。此外，浏览器并行获取和显示多张小图片，比获取和显示一张大图片要高效的多。显示地图变成和显示图片一样简单，这也是互联网地图能够承载亿级规模用户的原因。</li></ul></li></ul><h4 id="5-WMTS"><a href="#5-WMTS" class="headerlink" title="5.WMTS"></a><span id="WMTS">5.WMTS</span></h4><ul><li>全称：Web Map Tile Service Web地图瓦片服务</li><li>WMTS提供了一种采用<strong>预定义图块方法</strong>发布数字地图服务的标准化解决方案。</li><li>WMTS弥补了WMS不能提供分块地图的不足，在服务器端把地图切割为一定不同级别大小的瓦片（瓦片矩阵集合），对客户端预先提供这些预定义的瓦片，将更多的数据处理操作如叠加和切割等放在客户端，降低服务器端的载荷。</li><li>WMTS牺牲了提供定制地图的灵活性，代之以通过提供静态数据（基础地图）来增强伸缩性，这些静态数据的范围框和比例尺被限定在各个图块内。</li><li>这些固定的图块集使得对WMTS服务的实现可以使用一个仅简单返回已有文件的Web服务器即可，同时使得可以利用一些标准的诸如分布式缓存的网络机制实现伸缩性。</li><li>概括：WMTS比WMS 好的地方就是它能够加快加载速度，提升加载效率。可是它同时也失去了灵活性，你看的每一个区域都是被提前划分好的，限制在固定条带内的。</li><li>WMTS提供如下操作：<ol><li>GetCapabilities：获取WMTS的能力文档（即元数据文档），里面包含服务的所有信息</li><li>GetTile：获取地图瓦片。该操作根据客户端发出的请求参数在服务端进行检索，服务器端返回地图瓦片图像。</li><li>GetFeatureInfo：通过在WMTS图层上指定一定的条件，返回指定的地图瓦片内容对应的要素信息</li></ol></li></ul><h4 id="WMTS与TMS对比"><a href="#WMTS与TMS对比" class="headerlink" title="WMTS与TMS对比"></a>WMTS与TMS对比</h4><p><a href="https://blog.csdn.net/df1445/article/details/104997308">TMS和WMTS大概对比</a></p><h4 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h4><p>概括地来说：</p><ol><li>WMS：是一种<strong>动态地图</strong>服务，根据用户请求返回相应地图数据的可视化结果，实时切片，因此速度较慢。是GeoServer发布地图时较为常用的服务。</li><li>WMTS：是一种采用<strong>预定义图块方法</strong>发布数字地图服务，将地图切分成瓦片矩阵集合，牺牲了提供定制地图的灵活性，代之以通过提供静态数据（基础地图）来增强伸缩性，这些静态数据的范围框和比例尺被限定在各个图块内，但是提升了服务速度。例如我国的天地图就是使用这一服务进行组织的，详情见我另一篇博客：<a href="https://www.cnblogs.com/ssjxx98/p/10877692.html">关于天地图的瓦片下载</a>。</li><li>WFS：是为了返回<strong>纯地理数据</strong>而设计的，它不包含任何关于绘制数据的建议，它提供了对矢量的<strong>增加、修改、删除</strong>等事务操作。</li><li>WCS：是面向<strong>空间影像数据</strong>服务，它将包含地理位置值的地理空间数据作为“<strong>栅格或者说“覆盖”（Coverage）</strong>”在网上相互交换。</li><li>WPS：我理解的是一种提供和执行<strong>地理空间处理</strong>的服务，用于在web上发起空间运算操作。</li><li>WMSC：是一种预先缓存数据的方法，以提升地图请求的速度。目前已被WMTS和TMS取代。</li><li>TMS：也是一种瓦片地图服务，与WMTS类似，本质上遵循同样的切片规则。</li></ol><p><img src="/img/Geoserver3_1.png" alt="Relation"></p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://zhuanlan.zhihu.com/p/398998331">几种互联网地图服务背后的解读(WMS，WFS，WMTS，TMS)</a></p><p><a href="https://blog.csdn.net/oYinHeZhiGuang/article/details/115731622">Web地图服务规范(WMS、WMTS、TMS)简析</a></p><p><a href="https://younghappy.blog.csdn.net/article/details/85630292?spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4-85630292-blog-112880522.pc_relevant_aa2&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-4-85630292-blog-112880522.pc_relevant_aa2&utm_relevant_index=9">常见地图服务：WMS,WMS-C,TMS,WMTS,WFS,WCS,WPS</a></p><p><a href="https://blog.csdn.net/Tmraz/article/details/108749365#:~:text=%E6%9C%8D%E5%8A%A1%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8,WMTS%E6%9C%8D%E5%8A%A1%E6%94%AF%E6%8C%81RESTful%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%85%B6%E6%8E%A5%E5%8F%A3%E5%8C%85%E6%8B%ACGetCapabilities%E3%80%81GetTile%E5%92%8CGetFeatureInfo3%E4%B8%AA%E6%93%8D%E4%BD%9C%EF%BC%8C%E8%BF%99%E4%BA%9B%E6%93%8D%E4%BD%9C%E5%85%81%E8%AE%B8%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E5%88%87%E7%89%87%E5%9C%B0%E5%9B%BE%E3%80%82">WMS、WFS、WMTS服务接口说明</a></p><p><a href="https://www.cnblogs.com/ssjxx98/p/12531525.html">WMS、WFS、WCS、WPS、WMTS、WMSC、TMS等常见地图服务的区别</a></p><p><a href="https://blog.csdn.net/ranran_5300/article/details/50435086">WMS WFS WCS 的区别</a></p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ol><li><p>发布服务都是要在工作区里面的</p></li><li><p>基本流程</p><pre><code class=" mermaid">graph LR    准备好数据源 --&gt; 创建工作区--&gt; 创建数据存储 --&gt; 数据源发布图层 --&gt; 图层预览-客户端调用</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver（二 入门）</title>
    <link href="/2022/07/05/Geoserver2/GeoServer2/"/>
    <url>/2022/07/05/Geoserver2/GeoServer2/</url>
    
    <content type="html"><![CDATA[<h3 id="一、从TomCat启动服务"><a href="#一、从TomCat启动服务" class="headerlink" title="一、从TomCat启动服务"></a>一、从TomCat启动服务</h3><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">D:\\geo\\tomcat8\\bin <span class="hljs-comment">//文件夹</span><br>cmd<br>startup<br></code></pre></td></tr></table></figure><h5 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">UserName: admin<br>PassWord: geoserver<br></code></pre></td></tr></table></figure><h3 id="二、界面"><a href="#二、界面" class="headerlink" title="二、界面"></a>二、界面</h3>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geoserver（一 安装）</title>
    <link href="/2022/07/05/Geoserver/Geoserver/"/>
    <url>/2022/07/05/Geoserver/Geoserver/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="一、什么是GeoServer"><a href="#一、什么是GeoServer" class="headerlink" title="一、什么是GeoServer"></a>一、什么是GeoServer</h4><span id="more"></span><p>用于专门分享地理空间数据的开源服务器</p><h4 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h4><ol><li><p>安装环境需要Java 推荐安装JDK<br><a href="https://repo.huaweicloud.com/java/jdk/">华为JDK镜像</a></p></li><li><p>下载TomCat<br><a href="https://tomcat.apache.org/">TomCat官方网站 Apache Tomcat® - Welcome!</a></p><p>Tomcat简单的说就是一个运行JAVA的网络服务器，底层是Socket的一个程序，它也是JSP和Serlvet的一个容器。</p><ul><li><p>JSP(JavaServer Page)：JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p></li><li><p>Servlet: Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p></li></ul><p><img src="/img/tomcat.jpg" alt="tomcat和servlet在网络中的位置"></p></li><li><p>下载Geoserver</p><p><a href="%5BGeoServer%5D(https://geoserver.org/)">GeoServer官方网站</a></p></li></ol><h4 id="三、配置"><a href="#三、配置" class="headerlink" title="三、配置"></a>三、配置</h4><ol><li>Java、TomCat、GeoServer的版本匹配问题  参考如下，三者的安装版本必须要匹配，不然容易出问题</li></ol><p><img src="/img/Geoserver_2.png" alt="Java JDK与Geoserver版本"></p><p><img src="/img/Geoserver_3.png" alt="TomCat版本"></p><ol start="2"><li><p>Java环境变量的配置 </p><ul><li>系统变量</li></ul><p><img src="/img/Geoserver_4.png" alt="系统变量"></p><ul><li>系统变量中Path</li></ul><p><img src="/img/Geoserver_5.png" alt="Path"></p></li><li><p>TomCat安装 </p><ul><li>一路Next</li></ul></li><li><p>GeoServer安装</p><ol><li> Windows installer.exe文件安装 （不推荐）</li><li>通过war包导入TomCat安装（推荐）<ul><li>将war包放入tomcat\webapp下</li><li>运行bin/startup.bat</li><li>内部网址:localhost:端口号/geoserver</li></ul></li></ol></li></ol><h4 id="四、遇到的问题"><a href="#四、遇到的问题" class="headerlink" title="四、遇到的问题"></a>四、遇到的问题</h4><ol><li><p>运行startup.bat程序秒退，服务不能成功启动</p><ul><li>解决方法<ul><li>检查环境变量是否配置好 控制台输入 java、Java -version、javac测试</li><li>检查Java JDK、TomCat、GeoServer版本是否对应  e.g. JDK8  TomCat8</li></ul></li></ul></li><li><p>运行startup.bat中文乱码问题</p><ul><li><p>windows下的cmd的默认编码是GBK编码，Tomcat控制台默认输出设置为UTF-8编码</p></li><li><p>解决方法</p><ul><li><p>（方式一）修改CMD命令行的编码格式为UTF-8</p></li><li><p>（方式二）将tomcat控制台日志输出编码格式更改为GBK，修改tomcat根目录下conf/logging.properties文件中的ConsoleHandler.encoding=utf-8，这种方式能解决cmd控制台中文乱码，但<code>不建议使用</code>。</p></li><li><p><strong>因为更改了tomcat默认编码，如果我们使用idea启动tomcat，idea的默认编码不是GBK，就会同样产生idea控制台下tomcat乱码问题</strong></p></li></ul></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebGIS</tag>
      
      <tag>GeoServer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 在GIS中的使用(一)</title>
    <link href="/2022/06/27/Python-in-GIS/index/"/>
    <url>/2022/06/27/Python-in-GIS/index/</url>
    
    <content type="html"><![CDATA[<h4 id="1-Preface"><a href="#1-Preface" class="headerlink" title="1.Preface"></a>1.Preface</h4><ul><li><p>Python之所以强大是因为能用（依赖）的库多罢了</p></li><li><p>但是较为繁琐的是环境的搭建、配置和维护</p><ul><li>使用初期 包、库的安装</li><li>库的更新、Python版本的更新也会带来问题<ul><li>新版本库不支持老Python</li><li>新版本Python不支持老库</li></ul></li><li>语法规范？感觉像是双刃剑<ul><li>写起来方便</li><li>有时候理解需要一点时间反应</li></ul></li><li>Python运行有时候还是比较慢的</li></ul></li><li><p>可能优点是？</p><ul><li>在Win和Mac双系统切换的时候，都能正常使用</li><li>不像某些专业软件比如ArcGIS只有Win版</li><li>有相同的安装环境就能跑</li><li>网上可复用的代码块较多、案例较多</li><li>弥补局限性，代码代替多次操作，Arcpy代替ModelBuilder</li></ul></li></ul><h4 id="2-有关环境"><a href="#2-有关环境" class="headerlink" title="2.有关环境"></a>2.有关环境</h4><h5 id="1-使用工具"><a href="#1-使用工具" class="headerlink" title="1.使用工具"></a>1.使用工具</h5><ul><li>Anacoda3 2022.5 MacOSX</li><li>Spyder 5.1.5</li><li>Python 3.8.13</li></ul><h5 id="2-配置流程"><a href="#2-配置流程" class="headerlink" title="2.配置流程"></a>2.配置流程</h5><ul><li><p>安装Anaconda <a href="https://www.anaconda.com/">官网下载</a></p></li><li><p>Environments中配置自己的编程环境  OSGIS</p><ul><li>Create 创建环境</li><li>Import 导入环境</li><li>Backup 备份环境</li></ul></li><li><p>安装库</p><ul><li><p>方法1: 环境下利用终端  conda install 或者 pip install </p><ul><li>优点 直接 </li><li>缺点 非可视化</li></ul></li><li><p>方法2: 更新Channels 从 conda Channels中导入</p><ul><li><p>问题:文件夹写入权限问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">NotWritableError: The current user does not have write permissions to a required path.<br></code></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">cd /users/o1/opt   <span class="hljs-comment">//操作opt文件夹下的anaconda3</span><br>sū<span class="hljs-keyword">do</span> chown -R o1 anaconda3 <span class="hljs-comment">//赋予权限</span><br></code></pre></td></tr></table></figure></li><li><p>更新具体Channels</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C">conda config --get channels <span class="hljs-comment">//获取当前环境OSGIS下Channels</span><br>conda config --add channels conda-forge <span class="hljs-comment">//有强大的社区支持，提供了大多数安装包，并且更新及时</span><br>conda config --remove-key channels <span class="hljs-comment">//删除Channel</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.ustc.edu.cn/anaconda/pkgs/main/</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.ustc.edu.cn/anaconda/pkgs/free/</span><br>conda config --add channels https:<span class="hljs-comment">//mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/</span><br>pip config <span class="hljs-built_in">set</span> global.index-url https:<span class="hljs-comment">//mirrors.ustc.edu.cn/pypi/web/simple</span><br>conda config --<span class="hljs-built_in">set</span> show_channel_urls yes<br><span class="hljs-meta"># activate my environment</span><br>conda activate OSGIS<br><span class="hljs-meta"># update all packages <span class="hljs-keyword">if</span> needed</span><br>conda update --all<br><span class="hljs-meta"># set channel priority as strict 设置优先级</span><br>conda config --<span class="hljs-built_in">set</span> channel_priority strict<br></code></pre></td></tr></table></figure></li></ul></li><li><p>常见的库 </p><ul><li>numpy</li><li>GDAL</li></ul></li></ul></li></ul><h4 id="3-基本流程"><a href="#3-基本流程" class="headerlink" title="3. 基本流程"></a>3. 基本流程</h4><p>读取、处理、写入(更新)</p>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>GIS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO设置</title>
    <link href="/2022/06/26/HEXO%E8%AE%BE%E7%BD%AE/index/"/>
    <url>/2022/06/26/HEXO%E8%AE%BE%E7%BD%AE/index/</url>
    
    <content type="html"><![CDATA[<h4 id="1-背景设置"><a href="#1-背景设置" class="headerlink" title="1.背景设置"></a>1.背景设置</h4><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">https:<span class="hljs-comment">//blog.csdn.net/weixin_43828250/article/details/114379300</span><br></code></pre></td></tr></table></figure><h4 id="2-图片插入的包"><a href="#2-图片插入的包" class="headerlink" title="2.图片插入的包"></a>2.图片插入的包</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">npm install hexo-image-link --save<br>npm uninstall hexo-renderer-marker --save  #卸载 marked<br>npm install hexo-renderer-markdown-it --save  #安装markdown-it<br>https:<span class="hljs-comment">//blog.csdn.net/rentonhe/article/details/123666769</span><br></code></pre></td></tr></table></figure><p>或者直接使用 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C">&#123;% asset_img example.png This is an example image %&#125; <br></code></pre></td></tr></table></figure><ul><li>example.jpg放在同目录下同名资源文件夹中</li><li>见<a href="https://www.freesion.com/article/9410594097/">HEXO基本操作</a><!--more--></li></ul><h4 id="3-设置Padding、Margin等"><a href="#3-设置Padding、Margin等" class="headerlink" title="3.设置Padding、Margin等"></a>3.设置Padding、Margin等</h4><ul><li>在浏览器中查看Layout和对应的代码块</li><li>到CSS文件中找</li></ul><h4 id="4-关于本地端口占用"><a href="#4-关于本地端口占用" class="headerlink" title="4.关于本地端口占用"></a>4.关于本地端口占用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">Error: listen EADDRINUSE: address already in use :::<span class="hljs-number">4000</span><br>sudo lsof -i:端口号<br>sudo kill <span class="hljs-number">-9</span> pid<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象、Web API</title>
    <link href="/2022/06/26/%E5%AF%B9%E8%B1%A1%E3%80%81Web-API/index/"/>
    <url>/2022/06/26/%E5%AF%B9%E8%B1%A1%E3%80%81Web-API/index/</url>
    
    <content type="html"><![CDATA[<h3 id="对象、Web-API"><a href="#对象、Web-API" class="headerlink" title="对象、Web API"></a>对象、Web API</h3><h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1. 对象"></a>1. 对象</h4><h6 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h6><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<span class="hljs-comment">//空对象</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;01&#x27;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<br>    <span class="hljs-attr">sayHi</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hi~&#x27;</span>);<br>    &#125;<br>&#125;<span class="hljs-comment">//名称，年龄，匿名函数,属性逗号隔开</span><br><br><span class="hljs-comment">//第二种方法 Object</span><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;01&#x27;</span>;<br>obj.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br>obj.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;SayHi&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//第三种方法 构造函数 对象里一些相同的属性和方法抽象出来封装到函数里</span><br><span class="hljs-keyword">function</span> 构造函数名(参数)&#123;    <br>    <span class="hljs-variable language_">this</span>.属性 = 参数；<br>    <span class="hljs-variable language_">this</span>.方法 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> sth = <span class="hljs-keyword">new</span> 构造函数名(参数) <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sth.属性)<br><span class="hljs-comment">////构造函数名首字母要大写、用构造函数必须要new、属性和方法之前必须使用this</span><br><br></code></pre></td></tr></table></figure><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">uname</span>)<span class="hljs-comment">//对象.属性名</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj[<span class="hljs-string">&#x27;age&#x27;</span>])<span class="hljs-comment">//对象[&#x27;属性名&#x27;]</span><br>obj.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">//对象名.方法名</span><br><span class="hljs-comment">//遍历属性</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> 对象)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(对象[key])<span class="hljs-comment">//输出属性值</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h6><p>1.Math<br>2.Date<br>3.String<br>4.Array</p><h6 id="甄别"><a href="#甄别" class="headerlink" title="甄别"></a>甄别</h6><ol><li><p>函数和方法： 都是实现某种功能，在外面的叫函数，在对象里面的叫方法</p></li><li><p>构造函数和对象</p><p>构造函数是泛指的某一大类</p><p>对象是一个具体的事物，是构造函数的实例化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br></code></pre></td></tr></table></figure><h4 id="2-Web-API"><a href="#2-Web-API" class="headerlink" title="2. Web API"></a>2. Web API</h4><p>应用程序编程接口，实现页面交互功能</p></li></ol><ul><li>BOM 浏览器功能 交互效果<ul><li>alert</li></ul></li><li>DOM树  页面元素<ul><li>文档页面从上往下加载 得现有标签，script脚本写在标签下</li></ul></li></ul><h5 id="1-DOM"><a href="#1-DOM" class="headerlink" title="1.DOM"></a>1.DOM</h5><h6 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>() <span class="hljs-comment">//返回的是一个元素对象Object</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Prerequisites</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
